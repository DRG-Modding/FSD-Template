diff --git a/Config/DefaultGameplayTags.ini b/Config/DefaultGameplayTags.ini
index 9a384e56..62f25c86 100644
--- a/Config/DefaultGameplayTags.ini
+++ b/Config/DefaultGameplayTags.ini
@@ -47,0 +48 @@ NetIndexFirstBitSegment=16
++GameplayTagList=(Tag="Drone.Vacuum",DevComment="")
diff --git a/FSD.uproject b/FSD.uproject
index 201e2073..04fcd2e9 100644
--- a/FSD.uproject
+++ b/FSD.uproject
@@ -351,0 +352,8 @@
+		},
+		{
+			"Name": "ControlRig",
+			"Enabled": true
+		},
+		{
+			"Name": "FullBodyIK",
+			"Enabled": true
diff --git a/Plugins/SimpleUGC/Source/SimpleUGC/Private/UGCSettings.cpp b/Plugins/SimpleUGC/Source/SimpleUGC/Private/UGCSettings.cpp
index 2b390dd2..2c26d65c 100644
--- a/Plugins/SimpleUGC/Source/SimpleUGC/Private/UGCSettings.cpp
+++ b/Plugins/SimpleUGC/Source/SimpleUGC/Private/UGCSettings.cpp
@@ -51,3 +51,2 @@ UUGCSettings::UUGCSettings() {
-    this->slot2.AddDefaulted(13);
-    this->slot2Icon = 9;
-    this->slot3.AddDefaulted(39);
+    this->slot2.AddDefaulted(36);
+    this->slot2Icon = 0;
@@ -55 +53,0 @@ UUGCSettings::UUGCSettings() {
-    this->slot4.AddDefaulted(26);
diff --git a/Source/FSD/Private/AddComponentStatusEffectItem.cpp b/Source/FSD/Private/AddComponentStatusEffectItem.cpp
new file mode 100644
index 00000000..67ca9c15
--- /dev/null
+++ b/Source/FSD/Private/AddComponentStatusEffectItem.cpp
@@ -0,0 +1,6 @@
+#include "AddComponentStatusEffectItem.h"
+
+UAddComponentStatusEffectItem::UAddComponentStatusEffectItem() {
+    this->ComponentClass = NULL;
+}
+
diff --git a/Source/FSD/Private/AmmoDrivenWeapon.cpp b/Source/FSD/Private/AmmoDrivenWeapon.cpp
index 9f5e6afb..c446b6af 100644
--- a/Source/FSD/Private/AmmoDrivenWeapon.cpp
+++ b/Source/FSD/Private/AmmoDrivenWeapon.cpp
@@ -5,0 +6,3 @@
+void AAmmoDrivenWeapon::UpdateHoldToFire() {
+}
+
@@ -113,0 +117 @@ AAmmoDrivenWeapon::AAmmoDrivenWeapon() {
+    this->FireInputBufferTime = 0.00f;
@@ -120,0 +125,3 @@ AAmmoDrivenWeapon::AAmmoDrivenWeapon() {
+    this->HoldToFirePercentOfFireRatePenalty = -1.00f;
+    this->ApplyRecoilAtEndOfBurst = false;
+    this->EndOfBurstRecoilMultiplier = 1.00f;
diff --git a/Source/FSD/Private/AmmoDrivenWeaponAnimInstance.cpp b/Source/FSD/Private/AmmoDrivenWeaponAnimInstance.cpp
index 8a2ebf15..f12ca32b 100644
--- a/Source/FSD/Private/AmmoDrivenWeaponAnimInstance.cpp
+++ b/Source/FSD/Private/AmmoDrivenWeaponAnimInstance.cpp
@@ -15 +15 @@ UAmmoDrivenWeaponAnimInstance::UAmmoDrivenWeaponAnimInstance() {
-    this->Overheated = false;
+    this->overHeated = false;
diff --git a/Source/FSD/Private/AquireTargetTask.cpp b/Source/FSD/Private/AquireTargetTask.cpp
new file mode 100644
index 00000000..dabe6ea2
--- /dev/null
+++ b/Source/FSD/Private/AquireTargetTask.cpp
@@ -0,0 +1,6 @@
+#include "AquireTargetTask.h"
+
+UAquireTargetTask::UAquireTargetTask() {
+    this->ForceNewTarget = false;
+}
+
diff --git a/Source/FSD/Private/ArmorHealthDamageComponent.cpp b/Source/FSD/Private/ArmorHealthDamageComponent.cpp
index fbb9a88b..42ed8b12 100644
--- a/Source/FSD/Private/ArmorHealthDamageComponent.cpp
+++ b/Source/FSD/Private/ArmorHealthDamageComponent.cpp
@@ -10,0 +11,4 @@ void UArmorHealthDamageComponent::SetHealthOnAllItems(float newHealth) {
+bool UArmorHealthDamageComponent::SetArmorDamageEnabledOnItem(FName BoneName, bool Enabled) {
+    return false;
+}
+
@@ -19,0 +24,3 @@ void UArmorHealthDamageComponent::OnRep_ArmorDamageInfo(FArmorDamageInfo OldValu
+void UArmorHealthDamageComponent::DealSocketArmorDamage(float Damage, float armorDamageMultiplier, UPrimitiveComponent* collider, bool shatter, EArmorDamageType DamageType) {
+}
+
diff --git a/Source/FSD/Private/ArmorVanityItem.cpp b/Source/FSD/Private/ArmorVanityItem.cpp
index 51b52c4a..5fe5eb49 100644
--- a/Source/FSD/Private/ArmorVanityItem.cpp
+++ b/Source/FSD/Private/ArmorVanityItem.cpp
@@ -2,0 +3,3 @@
+void UArmorVanityItem::SetNewArmorType(UCharacterVanityComponent* Gear) {
+}
+
@@ -5,0 +9,8 @@ void UArmorVanityItem::PreviewArmor(AFSDPlayerState* PlayerState, bool Show, boo
+bool UArmorVanityItem::HasSleevelessArmorType() const {
+    return false;
+}
+
+EArmorMeshType UArmorVanityItem::GetFPMeshType() const {
+    return EArmorMeshType::None;
+}
+
@@ -6,0 +18 @@ UArmorVanityItem::UArmorVanityItem() {
+    this->AllowSleevelessUse = true;
diff --git a/Source/FSD/Private/AttachMeshesAfflictionItem.cpp b/Source/FSD/Private/AttachMeshesAfflictionItem.cpp
index 87460dfc..b087fc82 100644
--- a/Source/FSD/Private/AttachMeshesAfflictionItem.cpp
+++ b/Source/FSD/Private/AttachMeshesAfflictionItem.cpp
@@ -3,0 +4,3 @@ FAttachMeshesAfflictionItem::FAttachMeshesAfflictionItem() {
+    this->SkeletalMesh = NULL;
+    this->StaticMesh = NULL;
+    this->Animation = NULL;
@@ -5 +8,5 @@ FAttachMeshesAfflictionItem::FAttachMeshesAfflictionItem() {
-    this->Mesh = NULL;
+    this->AttachType = ECharacterMesh;
+    this->LoopAnimation = false;
+    this->RandomRotaiton = false;
+    this->RandomScale = false;
+    this->CastShadows = false;
diff --git a/Source/FSD/Private/BTDecorator_IsUnderCeiling.cpp b/Source/FSD/Private/BTDecorator_IsUnderCeiling.cpp
new file mode 100644
index 00000000..41957815
--- /dev/null
+++ b/Source/FSD/Private/BTDecorator_IsUnderCeiling.cpp
@@ -0,0 +1,9 @@
+#include "BTDecorator_IsUnderCeiling.h"
+
+UBTDecorator_IsUnderCeiling::UBTDecorator_IsUnderCeiling() {
+    this->Height = 0.00f;
+    this->Angle = 0.00f;
+    this->TryCalcFromSocket = false;
+    this->DrawDebug = false;
+}
+
diff --git a/Source/FSD/Private/BasicPistol.cpp b/Source/FSD/Private/BasicPistol.cpp
index ae5ea577..ea6b115e 100644
--- a/Source/FSD/Private/BasicPistol.cpp
+++ b/Source/FSD/Private/BasicPistol.cpp
@@ -1,0 +2 @@
+#include "DamageComponent.h"
@@ -5,0 +7,3 @@ void ABasicPistol::OnTargetDamaged(UHealthComponentBase* Health, float Amount, U
+void ABasicPistol::OnHit(const FHitResult& HitResult, bool isAlwaysPenetrated) {
+}
+
@@ -6,0 +11,2 @@ ABasicPistol::ABasicPistol() {
+    this->DamageComponent = CreateDefaultSubobject<UDamageComponent>(TEXT("DamageComponent"));
+    this->BurstArmorDamageMultiplier = 1.00f;
diff --git a/Source/FSD/Private/BodyRotationManagerComponent.cpp b/Source/FSD/Private/BodyRotationManagerComponent.cpp
new file mode 100644
index 00000000..c767d1dc
--- /dev/null
+++ b/Source/FSD/Private/BodyRotationManagerComponent.cpp
@@ -0,0 +1,9 @@
+#include "BodyRotationManagerComponent.h"
+
+void UBodyRotationManagerComponent::ApplyKnockBack(float force, float Duration, const FVector& Direction) {
+}
+
+UBodyRotationManagerComponent::UBodyRotationManagerComponent() {
+    this->LerpSpeed = 0.40f;
+}
+
diff --git a/Source/FSD/Private/Bomber.cpp b/Source/FSD/Private/Bomber.cpp
index 74884966..527299b6 100644
--- a/Source/FSD/Private/Bomber.cpp
+++ b/Source/FSD/Private/Bomber.cpp
@@ -71,0 +72 @@ ABomber::ABomber() {
+    this->NoDeathSpiral = false;
diff --git a/Source/FSD/Private/BoscoController.cpp b/Source/FSD/Private/BoscoController.cpp
index e841db04..0ef2e6ee 100644
--- a/Source/FSD/Private/BoscoController.cpp
+++ b/Source/FSD/Private/BoscoController.cpp
@@ -64 +63,0 @@ ABoscoController::ABoscoController() {
-    this->PlagueWarning = NULL;
diff --git a/Source/FSD/Private/CharacterOptions.cpp b/Source/FSD/Private/CharacterOptions.cpp
index e4031de0..1421cf8e 100644
--- a/Source/FSD/Private/CharacterOptions.cpp
+++ b/Source/FSD/Private/CharacterOptions.cpp
@@ -5,0 +6,2 @@ FCharacterOptions::FCharacterOptions() {
+    this->HoldToBreakImmobilization = false;
+    this->HoldToFire = false;
diff --git a/Source/FSD/Private/CharacterVanityComponent.cpp b/Source/FSD/Private/CharacterVanityComponent.cpp
index f61ddc20..ed0158a6 100644
--- a/Source/FSD/Private/CharacterVanityComponent.cpp
+++ b/Source/FSD/Private/CharacterVanityComponent.cpp
@@ -12,0 +13,3 @@ void UCharacterVanityComponent::SetEquippedVanityInViewer(const TArray<UVanityIt
+void UCharacterVanityComponent::SetDesireSleevelessArmor(UObject* WorldContextObject, UPlayerCharacterID* Character, bool inDesireSleeveless) {
+}
+
@@ -15,0 +19,3 @@ void UCharacterVanityComponent::Server_SetEquippedVanity_Implementation(const FE
+void UCharacterVanityComponent::Server_SetDesireSleevelessArmor_Implementation(bool useSleeveless) {
+}
+
@@ -22,0 +29,4 @@ UVanityItem* UCharacterVanityComponent::Receive_GetEquippedVanityItem(UObject* W
+bool UCharacterVanityComponent::Receive_GetDesireSleevelessArmor(UObject* WorldContextObject, UPlayerCharacterID* Character) {
+    return false;
+}
+
@@ -25,0 +36,3 @@ void UCharacterVanityComponent::OnRep_EquippedVanity() {
+void UCharacterVanityComponent::OnRep_DesireSleeveless() {
+}
+
@@ -33,0 +47,4 @@ UVanityItem* UCharacterVanityComponent::GetEquippedVanityItem(EVanitySlot Slot,
+bool UCharacterVanityComponent::GetDesireSleevelessArmor() const {
+    return false;
+}
+
@@ -56,0 +74 @@ void UCharacterVanityComponent::GetLifetimeReplicatedProps(TArray<FLifetimePrope
+    DOREPLIFETIME(UCharacterVanityComponent, DesireSleevelessArmor);
@@ -68,0 +87 @@ UCharacterVanityComponent::UCharacterVanityComponent() {
+    this->DesireSleevelessArmor = false;
diff --git a/Source/FSD/Private/CharacterVanityLoadout.cpp b/Source/FSD/Private/CharacterVanityLoadout.cpp
index aa16ea80..592d5719 100644
--- a/Source/FSD/Private/CharacterVanityLoadout.cpp
+++ b/Source/FSD/Private/CharacterVanityLoadout.cpp
@@ -3,0 +4 @@ FCharacterVanityLoadout::FCharacterVanityLoadout() {
+    this->UsingSleevelessArmor = false;
diff --git a/Source/FSD/Private/CrossbowProjectileRecallable.cpp b/Source/FSD/Private/CrossbowProjectileRecallable.cpp
index 62b1480a..d9c6a932 100644
--- a/Source/FSD/Private/CrossbowProjectileRecallable.cpp
+++ b/Source/FSD/Private/CrossbowProjectileRecallable.cpp
@@ -19,0 +20 @@ UCrossbowProjectileRecallable::UCrossbowProjectileRecallable() {
+    this->FPMeshComponent = NULL;
diff --git a/Source/FSD/Private/DamageComponent.cpp b/Source/FSD/Private/DamageComponent.cpp
index 36cc1a03..ebfb1fe3 100644
--- a/Source/FSD/Private/DamageComponent.cpp
+++ b/Source/FSD/Private/DamageComponent.cpp
@@ -38 +38 @@ UDamageComponent::UDamageComponent() {
-    this->ArmorDamageMultiplier = 1.00f;
+    this->armorDamageMultiplier = 1.00f;
diff --git a/Source/FSD/Private/DeepPathfinderMovement.cpp b/Source/FSD/Private/DeepPathfinderMovement.cpp
index 9945fc15..94c99b62 100644
--- a/Source/FSD/Private/DeepPathfinderMovement.cpp
+++ b/Source/FSD/Private/DeepPathfinderMovement.cpp
@@ -137,0 +138,4 @@ UFakeMoverSettings* UDeepPathfinderMovement::GetCurrentFakePhysicsMoveSet() {
+float UDeepPathfinderMovement::GetApproximatePathLength(FVector Start, FVector End) const {
+    return 0.0f;
+}
+
diff --git a/Source/FSD/Private/DisplayCase.cpp b/Source/FSD/Private/DisplayCase.cpp
index ec3e1201..38b81c07 100644
--- a/Source/FSD/Private/DisplayCase.cpp
+++ b/Source/FSD/Private/DisplayCase.cpp
@@ -14,0 +15,4 @@ void ADisplayCase::OnRep_ContentIndex() {
+bool ADisplayCase::IsSpecialContent() const {
+    return false;
+}
+
diff --git a/Source/FSD/Private/DoubleDrillItem.cpp b/Source/FSD/Private/DoubleDrillItem.cpp
index 0d72f557..65a50e2a 100644
--- a/Source/FSD/Private/DoubleDrillItem.cpp
+++ b/Source/FSD/Private/DoubleDrillItem.cpp
@@ -84 +84 @@ ADoubleDrillItem::ADoubleDrillItem() {
-    this->ArmorDamageMultiplier = 1.00f;
+    this->armorDamageMultiplier = 1.00f;
diff --git a/Source/FSD/Private/DrinkEffectComponent.cpp b/Source/FSD/Private/DrinkEffectComponent.cpp
index 08bcd40e..12a72190 100644
--- a/Source/FSD/Private/DrinkEffectComponent.cpp
+++ b/Source/FSD/Private/DrinkEffectComponent.cpp
@@ -10,0 +11,4 @@ void UDrinkEffectComponent::OnChangedCharacter(APlayerCharacter* changedToCharac
+bool UDrinkEffectComponent::GetActivateOnlyWhenDrinking() const {
+    return false;
+}
+
@@ -14,0 +19 @@ UDrinkEffectComponent::UDrinkEffectComponent() {
+    this->ActivatesOnlyOnceWhenDrinking = false;
diff --git a/Source/FSD/Private/DrinkableDataAsset.cpp b/Source/FSD/Private/DrinkableDataAsset.cpp
index 17e00595..9d1f0053 100644
--- a/Source/FSD/Private/DrinkableDataAsset.cpp
+++ b/Source/FSD/Private/DrinkableDataAsset.cpp
@@ -47,0 +48 @@ UDrinkableDataAsset::UDrinkableDataAsset() {
+    this->IsSpecialBeer = false;
diff --git a/Source/FSD/Private/DroneBase.cpp b/Source/FSD/Private/DroneBase.cpp
index daec32cc..2283f56e 100644
--- a/Source/FSD/Private/DroneBase.cpp
+++ b/Source/FSD/Private/DroneBase.cpp
@@ -1,0 +2 @@
+#include "Components/PointLightComponent.h"
@@ -13,0 +15 @@ ADroneBase::ADroneBase() {
+    this->StateLight = CreateDefaultSubobject<UPointLightComponent>(TEXT("StateLight"));
diff --git a/Source/FSD/Private/DroneCarryComponent.cpp b/Source/FSD/Private/DroneCarryComponent.cpp
deleted file mode 100644
index 492a6703..00000000
--- a/Source/FSD/Private/DroneCarryComponent.cpp
+++ /dev/null
@@ -1,12 +0,0 @@
-#include "DroneCarryComponent.h"
-
-void UDroneCarryComponent::OnCarriedUsed(APlayerCharacter* User, EInputKeys Key) {
-}
-
-void UDroneCarryComponent::OnCarriedDropped() {
-}
-
-UDroneCarryComponent::UDroneCarryComponent() {
-    this->CurrentCarried = NULL;
-}
-
diff --git a/Source/FSD/Private/DroneControllerBase.cpp b/Source/FSD/Private/DroneControllerBase.cpp
index 04478741..b21fa666 100644
--- a/Source/FSD/Private/DroneControllerBase.cpp
+++ b/Source/FSD/Private/DroneControllerBase.cpp
@@ -3 +3 @@
-void ADroneControllerBase::OnShout(APlayerCharacter* ShoutingPlayer) {
+void ADroneControllerBase::OnShout(APlayerCharacter* Player) {
@@ -9 +9 @@ void ADroneControllerBase::OnSecondaryLaserPointer(const FLaserPointerTarget& Hi
-void ADroneControllerBase::OnSalute(APlayerCharacter* aCharacater) {
+void ADroneControllerBase::OnSalute(APlayerCharacter* Player) {
@@ -14,0 +15,6 @@ void ADroneControllerBase::OnPrimaryLaserpointer(const FLaserPointerTarget& HitI
+void ADroneControllerBase::OnPlayerLeave(AFSDPlayerState* State) {
+}
+
+void ADroneControllerBase::OnPlayerJoin(APlayerCharacter* Player) {
+}
+
@@ -16 +21,0 @@ ADroneControllerBase::ADroneControllerBase() {
-    this->ControlledDrone = NULL;
diff --git a/Source/FSD/Private/DroneDefendSatate.cpp b/Source/FSD/Private/DroneDefendSatate.cpp
deleted file mode 100644
index 574dba4a..00000000
--- a/Source/FSD/Private/DroneDefendSatate.cpp
+++ /dev/null
@@ -1,5 +0,0 @@
-#include "DroneDefendSatate.h"
-
-UDroneDefendSatate::UDroneDefendSatate() {
-}
-
diff --git a/Source/FSD/Private/DroneLightSetting.cpp b/Source/FSD/Private/DroneLightSetting.cpp
new file mode 100644
index 00000000..35980121
--- /dev/null
+++ b/Source/FSD/Private/DroneLightSetting.cpp
@@ -0,0 +1,7 @@
+#include "DroneLightSetting.h"
+
+FDroneLightSetting::FDroneLightSetting() {
+    this->Intensity = 0.00f;
+    this->Radius = 0.00f;
+}
+
diff --git a/Source/FSD/Private/DroneMiningState.cpp b/Source/FSD/Private/DroneMiningState.cpp
index 88f8b4ef..0467a766 100644
--- a/Source/FSD/Private/DroneMiningState.cpp
+++ b/Source/FSD/Private/DroneMiningState.cpp
@@ -3,0 +4,8 @@ UDroneMiningState::UDroneMiningState() {
+    this->DroneMiningTool = NULL;
+    this->HeartStoneMateiral = NULL;
+    this->StartMiningRange = 0.00f;
+    this->MiningRange = 0.00f;
+    this->SameHitRadius = 0.00f;
+    this->MineRadius = 0.00f;
+    this->MiningStrength = 1;
+    this->EmbeddedSearchRadius = 0.00f;
diff --git a/Source/FSD/Private/DroneReviveState.cpp b/Source/FSD/Private/DroneReviveState.cpp
deleted file mode 100644
index d89cd584..00000000
--- a/Source/FSD/Private/DroneReviveState.cpp
+++ /dev/null
@@ -1,5 +0,0 @@
-#include "DroneReviveState.h"
-
-UDroneReviveState::UDroneReviveState() {
-}
-
diff --git a/Source/FSD/Private/DroneStream.cpp b/Source/FSD/Private/DroneStream.cpp
index f515a127..f8689fce 100644
--- a/Source/FSD/Private/DroneStream.cpp
+++ b/Source/FSD/Private/DroneStream.cpp
@@ -4,0 +5 @@
+
@@ -10,0 +12,4 @@ void ADroneStream::OnBeginOverlap(UPrimitiveComponent* OverlappedComponent, AAct
+ABosco* ADroneStream::GetBosco() const {
+    return NULL;
+}
+
diff --git a/Source/FSD/Private/DroneUseAbillityState.cpp b/Source/FSD/Private/DroneUseAbillityState.cpp
deleted file mode 100644
index 45594f17..00000000
--- a/Source/FSD/Private/DroneUseAbillityState.cpp
+++ /dev/null
@@ -1,5 +0,0 @@
-#include "DroneUseAbillityState.h"
-
-UDroneUseAbillityState::UDroneUseAbillityState() {
-}
-
diff --git a/Source/FSD/Private/DropSpikeTrackingSubsystem.cpp b/Source/FSD/Private/DropSpikeTrackingSubsystem.cpp
new file mode 100644
index 00000000..31c4843c
--- /dev/null
+++ b/Source/FSD/Private/DropSpikeTrackingSubsystem.cpp
@@ -0,0 +1,12 @@
+#include "DropSpikeTrackingSubsystem.h"
+
+void UDropSpikeTrackingSubsystem::IncrementSpikeCount() {
+}
+
+int32 UDropSpikeTrackingSubsystem::GetSpikeCount() const {
+    return 0;
+}
+
+UDropSpikeTrackingSubsystem::UDropSpikeTrackingSubsystem() {
+}
+
diff --git a/Source/FSD/Private/EmitterConnection.cpp b/Source/FSD/Private/EmitterConnection.cpp
new file mode 100644
index 00000000..f48340f5
--- /dev/null
+++ b/Source/FSD/Private/EmitterConnection.cpp
@@ -0,0 +1,5 @@
+#include "EmitterConnection.h"
+
+FEmitterConnection::FEmitterConnection() {
+}
+
diff --git a/Source/FSD/Private/EnemyDescriptor.cpp b/Source/FSD/Private/EnemyDescriptor.cpp
index 334f64a6..b6154e4f 100644
--- a/Source/FSD/Private/EnemyDescriptor.cpp
+++ b/Source/FSD/Private/EnemyDescriptor.cpp
@@ -23 +22,0 @@ UEnemyDescriptor::UEnemyDescriptor() {
-    this->PlacementCategories = 0;
diff --git a/Source/FSD/Private/FSDCheatManager.cpp b/Source/FSD/Private/FSDCheatManager.cpp
index 3ca6f3f6..4fa7fb7f 100644
--- a/Source/FSD/Private/FSDCheatManager.cpp
+++ b/Source/FSD/Private/FSDCheatManager.cpp
@@ -41 +41 @@ void UFSDCheatManager::SetFastMovement(bool fast) {
-void UFSDCheatManager::Server_Refresh_Daily_Special_Implementation() {
+void UFSDCheatManager::Server_Refresh_Daily_Special_Implementation(int32 Index) {
@@ -474 +474 @@ void UFSDCheatManager::C_RefreshDailyDeal(int32 Seed) {
-void UFSDCheatManager::C_Refresh_Daily_Special() {
+void UFSDCheatManager::C_Refresh_Daily_Special(int32 Index) {
@@ -545,0 +546,3 @@ void UFSDCheatManager::C_JumpToNextRoom() {
+void UFSDCheatManager::C_JetBoots_Enable() {
+}
+
@@ -554,0 +558,3 @@ void UFSDCheatManager::C_IncrementAllMissionStats(int32 Amount) {
+void UFSDCheatManager::C_IncreasePlagueInfection(float Increment) {
+}
+
diff --git a/Source/FSD/Private/FSDEventManager.cpp b/Source/FSD/Private/FSDEventManager.cpp
index 6e116314..e8691e62 100644
--- a/Source/FSD/Private/FSDEventManager.cpp
+++ b/Source/FSD/Private/FSDEventManager.cpp
@@ -2,0 +3,3 @@
+void UFSDEventManager::TryGetJettyBootSettings(bool& OutHasSettings, FJettyBootEventSettings& OutSettings) {
+}
+
diff --git a/Source/FSD/Private/FSDGameInstance.cpp b/Source/FSD/Private/FSDGameInstance.cpp
index 845e4d13..2ae39819 100644
--- a/Source/FSD/Private/FSDGameInstance.cpp
+++ b/Source/FSD/Private/FSDGameInstance.cpp
@@ -96 +96 @@ void UFSDGameInstance::ResetAlwaysLoadedWorldsAndGameData() {
-void UFSDGameInstance::RemoveRemporaryBuff() {
+void UFSDGameInstance::RemoveBosco() {
@@ -99 +99 @@ void UFSDGameInstance::RemoveRemporaryBuff() {
-void UFSDGameInstance::RemoveBosco() {
+void UFSDGameInstance::RemoveAllTemporaryBuff(APlayerController* PlayerController) {
@@ -104,0 +105,3 @@ void UFSDGameInstance::RefreshIsGameModded() {
+void UFSDGameInstance::PreClientTravelCleanup(APlayerController* PlayerController) {
+}
+
@@ -159,0 +163,4 @@ bool UFSDGameInstance::HasSignedIn() {
+bool UFSDGameInstance::HasRandomBeerBuff() const {
+    return false;
+}
+
@@ -189,0 +197,4 @@ TArray<FBlueprintSessionResult> UFSDGameInstance::GetServersFriendsArePlaying(TA
+FString UFSDGameInstance::GetSeedString(UObject* WorldContextObject) {
+    return TEXT("");
+}
+
@@ -335 +345,0 @@ UFSDGameInstance::UFSDGameInstance() {
-    this->TemporaryBuff = NULL;
diff --git a/Source/FSD/Private/FSDGameState.cpp b/Source/FSD/Private/FSDGameState.cpp
index 22e869bf..4be0b664 100644
--- a/Source/FSD/Private/FSDGameState.cpp
+++ b/Source/FSD/Private/FSDGameState.cpp
@@ -156 +156 @@ TArray<FCreditsReward> AFSDGameState::GetMissionRewardCredits() const {
-bool AFSDGameState::GetMissionCompletedCreditReward(bool primary, int32& OutReward) const {
+bool AFSDGameState::GetMissionCompletedCreditReward(bool Primary, int32& OutReward) const {
diff --git a/Source/FSD/Private/FSDGameUserSettings.cpp b/Source/FSD/Private/FSDGameUserSettings.cpp
index 3cdb825c..9dc313f4 100644
--- a/Source/FSD/Private/FSDGameUserSettings.cpp
+++ b/Source/FSD/Private/FSDGameUserSettings.cpp
@@ -154,0 +155,6 @@ void UFSDGameUserSettings::SetInputSource(EFSDInputSource NewSource) {
+void UFSDGameUserSettings::SetHoldToFire(bool HoldToFire) {
+}
+
+void UFSDGameUserSettings::SetHoldToBreakImmobilization(bool holdToBreak) {
+}
+
@@ -470,0 +477,8 @@ EFSDInputSource UFSDGameUserSettings::GetInputSource() {
+bool UFSDGameUserSettings::GetHoldToFire() const {
+    return false;
+}
+
+bool UFSDGameUserSettings::GetHoldToBreakImmobilization() const {
+    return false;
+}
+
@@ -652 +666 @@ UFSDGameUserSettings::UFSDGameUserSettings() {
-    this->bJukeboxStreamerMode = true;
+    this->bJukeboxStreamerMode = false;
@@ -654,8 +668,8 @@ UFSDGameUserSettings::UFSDGameUserSettings() {
-    this->ServerSearchRegion = 3;
-    this->ServerSearchPasswordRequired = true;
-    this->volumeCharacterVoice = 56.99f;
-    this->volumeMissionControl = 58.84f;
-    this->volumeMaster = 27.47f;
-    this->volumeSFX = 67.60f;
-    this->volumeMusic = 58.38f;
-    this->CurrentAudioOutputDeviceId = TEXT("{0.0.0.00000000}.{e5f88e95-6344-4763-bd61-70b04ceb23f9}");
+    this->ServerSearchRegion = 1;
+    this->ServerSearchPasswordRequired = false;
+    this->volumeCharacterVoice = 100.00f;
+    this->volumeMissionControl = 100.00f;
+    this->volumeMaster = 100.00f;
+    this->volumeSFX = 100.00f;
+    this->volumeMusic = 100.00f;
+    this->CurrentAudioOutputDeviceId = TEXT("{0.0.0.00000000}.{7abcb3e6-fc80-41cb-b8c8-59b74bd2543f}");
@@ -664 +678 @@ UFSDGameUserSettings::UFSDGameUserSettings() {
-    this->AntiAliasingType = 2;
+    this->AntiAliasingType = 1;
@@ -666 +680 @@ UFSDGameUserSettings::UFSDGameUserSettings() {
-    this->volumeVoice = 99.74f;
+    this->volumeVoice = 100.00f;
@@ -668 +682 @@ UFSDGameUserSettings::UFSDGameUserSettings() {
-    this->AmdFsrMode = 0;
+    this->AmdFsrMode = 1;
@@ -670 +684 @@ UFSDGameUserSettings::UFSDGameUserSettings() {
-    this->AmdFsrSharpness = 0.22f;
+    this->AmdFsrSharpness = 0.20f;
@@ -684 +698 @@ UFSDGameUserSettings::UFSDGameUserSettings() {
-    this->bUseVoiceChat = false;
+    this->bUseVoiceChat = true;
@@ -688 +702 @@ UFSDGameUserSettings::UFSDGameUserSettings() {
-    this->MouseXSensitivity = 900.92f;
+    this->MouseXSensitivity = 600.00f;
@@ -695,3 +709,3 @@ UFSDGameUserSettings::UFSDGameUserSettings() {
-    this->FOV = 100.89f;
-    this->HeadbobbingScale = 0.00f;
-    this->CameraShakeScale = 25.00f;
+    this->FOV = 100.00f;
+    this->HeadbobbingScale = 100.00f;
+    this->CameraShakeScale = 100.00f;
@@ -703 +717 @@ UFSDGameUserSettings::UFSDGameUserSettings() {
-    this->UseProfanityFilter = false;
+    this->UseProfanityFilter = true;
@@ -707 +721 @@ UFSDGameUserSettings::UFSDGameUserSettings() {
-    this->HDRColorGamma = 1.21f;
+    this->HDRColorGamma = 1.20f;
@@ -713 +727 @@ UFSDGameUserSettings::UFSDGameUserSettings() {
-    this->UIDPIScale = 80.63f;
+    this->UIDPIScale = 90.00f;
@@ -725 +739 @@ UFSDGameUserSettings::UFSDGameUserSettings() {
-    this->LastNiagaraShaderVerions = 63118;
+    this->LastNiagaraShaderVerions = 0;
@@ -730 +744 @@ UFSDGameUserSettings::UFSDGameUserSettings() {
-    this->bTutorialHintsEnabled = false;
+    this->bTutorialHintsEnabled = true;
@@ -732 +746 @@ UFSDGameUserSettings::UFSDGameUserSettings() {
-    this->bShowFPS = false;
+    this->bShowFPS = true;
@@ -737,2 +751,2 @@ UFSDGameUserSettings::UFSDGameUserSettings() {
-    this->SelectedDifficultyLevels.AddDefaulted(10);
-    this->DifficultyLevelsAddedByDefault.AddDefaulted(10);
+    this->SelectedDifficultyLevels.AddDefaulted(9);
+    this->DifficultyLevelsAddedByDefault.AddDefaulted(9);
diff --git a/Source/FSD/Private/FSDGameplayStatics.cpp b/Source/FSD/Private/FSDGameplayStatics.cpp
index 5f7be9a3..4044274b 100644
--- a/Source/FSD/Private/FSDGameplayStatics.cpp
+++ b/Source/FSD/Private/FSDGameplayStatics.cpp
@@ -7 +7 @@ UFXSystemComponent* UFSDGameplayStatics::SpawnScaledEmitterAtLocation(UObject* W
-UDecalComponent* UFSDGameplayStatics::SpawnDecalData(const UObject* WorldContextObject, const FVector& Location, const FVector& upVector, const FDecalData& DecalData, bool randomRollRotation) {
+UDecalComponent* UFSDGameplayStatics::SpawnDecalData(const UObject* WorldContextObject, const FVector& Location, const FVector& UpVector, const FDecalData& DecalData, bool randomRollRotation) {
@@ -15 +15 @@ UDecalComponent* UFSDGameplayStatics::SpawnDecalAtActor(AActor* Actor, UMaterial
-UDecalComponent* UFSDGameplayStatics::SpawnDecal(const UObject* WorldContextObject, UMaterialInterface* DecalMaterial, const FVector& Location, const FVector& upVector, float Size, float Duration, float FadeDuration) {
+UDecalComponent* UFSDGameplayStatics::SpawnDecal(const UObject* WorldContextObject, UMaterialInterface* DecalMaterial, const FVector& Location, const FVector& UpVector, float Size, float Duration, float FadeDuration) {
diff --git a/Source/FSD/Private/FSDOnlineSystemUtils.cpp b/Source/FSD/Private/FSDOnlineSystemUtils.cpp
index 6823024a..701d495b 100644
--- a/Source/FSD/Private/FSDOnlineSystemUtils.cpp
+++ b/Source/FSD/Private/FSDOnlineSystemUtils.cpp
@@ -30,0 +31,3 @@ void UFSDOnlineSystemUtils::GetOnlinePlayBlockReasons(TArray<EBlueprintablePrivi
+void UFSDOnlineSystemUtils::GetIsUpdatePending(const FOnGetIsUpdatePendingBP& Delegate) {
+}
+
diff --git a/Source/FSD/Private/FSDPlayerController.cpp b/Source/FSD/Private/FSDPlayerController.cpp
index d1c561e0..a2150949 100644
--- a/Source/FSD/Private/FSDPlayerController.cpp
+++ b/Source/FSD/Private/FSDPlayerController.cpp
@@ -31,0 +32,3 @@ void AFSDPlayerController::Server_TravelDone_Implementation() {
+void AFSDPlayerController::Server_TakeDamageFrom_Implementation(UDamageComponent* Damage, FVector Location) {
+}
+
@@ -53 +56 @@ void AFSDPlayerController::Server_ResetHUD_Implementation() {
-void AFSDPlayerController::Server_NewMessage_Implementation(const FString& Sender, const FString& Text, EChatSenderType SenderType) {
+void AFSDPlayerController::Server_Relay_SetArmorIndexDestroyed_Implementation(USimpleArmorDamageComponent* ArmorComponent, int32 Index, EArmorDamageType DamageType) {
@@ -56 +59 @@ void AFSDPlayerController::Server_NewMessage_Implementation(const FString& Sende
-void AFSDPlayerController::Server_DrawProjectileDebugPath_Implementation(bool bDraw) {
+void AFSDPlayerController::Server_NewMessage_Implementation(const FString& Sender, const FString& Text, EChatSenderType SenderType) {
@@ -59 +62 @@ void AFSDPlayerController::Server_DrawProjectileDebugPath_Implementation(bool bD
-void AFSDPlayerController::Server_ActivateTemporaryBuff_Implementation(UTemporaryBuff* buff) {
+void AFSDPlayerController::Server_DrawProjectileDebugPath_Implementation(bool bDraw) {
diff --git a/Source/FSD/Private/FSDSaveGame.cpp b/Source/FSD/Private/FSDSaveGame.cpp
index 0df675e2..5949d452 100644
--- a/Source/FSD/Private/FSDSaveGame.cpp
+++ b/Source/FSD/Private/FSDSaveGame.cpp
@@ -45,0 +46,3 @@ void UFSDSaveGame::SetIndexAndName(int32 NewIndex, const FString& NewName) {
+void UFSDSaveGame::SetIgnoreRandomLoadout(bool inIgnoreRandomLoadout) {
+}
+
@@ -350,0 +354 @@ UFSDSaveGame::UFSDSaveGame() {
+    this->bIgnoreRandomLoadout = false;
diff --git a/Source/FSD/Private/FSDWidgetBlueprintLibrary.cpp b/Source/FSD/Private/FSDWidgetBlueprintLibrary.cpp
index 0b47c024..0a231b9a 100644
--- a/Source/FSD/Private/FSDWidgetBlueprintLibrary.cpp
+++ b/Source/FSD/Private/FSDWidgetBlueprintLibrary.cpp
@@ -191,0 +192,4 @@ void UFSDWidgetBlueprintLibrary::Box(FPaintContext& Context, FVector2D Position,
+bool UFSDWidgetBlueprintLibrary::AreWidgetsIntersecting(const UWidget* InWidget1, const UWidget* InWidget2) {
+    return false;
+}
+
diff --git a/Source/FSD/Private/FacilityObjective.cpp b/Source/FSD/Private/FacilityObjective.cpp
index 8209afdf..7091f154 100644
--- a/Source/FSD/Private/FacilityObjective.cpp
+++ b/Source/FSD/Private/FacilityObjective.cpp
@@ -5 +5 @@
-void UFacilityObjective::SpawnFacilityEncounters(AProceduralSetup* setup, UEncounterManager* Encounters, UDebrisPositioning* Positioning) {
+void UFacilityObjective::SpawnFacilityEncounters(AProceduralSetup* Setup, UEncounterManager* Encounters, UDebrisPositioning* Positioning) {
@@ -8 +8 @@ void UFacilityObjective::SpawnFacilityEncounters(AProceduralSetup* setup, UEncou
-TArray<FTransform> UFacilityObjective::SpawnEndBattleTurrets(int32 amountOfTurrets, AProceduralSetup* setup, UDebrisPositioning* DebrisPositioning, TSubclassOf<AActor> terrainPlacement, const TArray<AActor*>& existingTurrets, bool& success) {
+TArray<FTransform> UFacilityObjective::SpawnEndBattleTurrets(int32 amountOfTurrets, AProceduralSetup* Setup, UDebrisPositioning* DebrisPositioning, TSubclassOf<AActor> terrainPlacement, const TArray<AActor*>& existingTurrets, bool& success) {
@@ -25 +25 @@ void UFacilityObjective::ProgressCurrentObjective() {
-AActor* UFacilityObjective::PlaceObjectInRoom(AProceduralSetup* setup, const FRoomNode& RoomNode, UDebrisPositioning* Positioning, TSubclassOf<AActor> placementActor, FRandomStream RandomStream, const bool checkImportantLocations) {
+AActor* UFacilityObjective::PlaceObjectInRoom(AProceduralSetup* Setup, const FRoomNode& RoomNode, UDebrisPositioning* Positioning, TSubclassOf<AActor> placementActor, FRandomStream RandomStream, const bool checkImportantLocations) {
@@ -49 +49 @@ void UFacilityObjective::InitGeneratorCount(int32 generators) {
-FTransform UFacilityObjective::GetTurretGoal(AProceduralSetup* setup, const FVector& Origin, float idealRange, UDebrisPositioning* DebrisPositioning, TSubclassOf<AActor> terrainPlacement, bool& success) {
+FTransform UFacilityObjective::GetTurretGoal(AProceduralSetup* Setup, const FVector& Origin, float idealRange, UDebrisPositioning* DebrisPositioning, TSubclassOf<AActor> terrainPlacement, bool& success) {
@@ -61 +61 @@ int32 UFacilityObjective::GetShieldGeneratorCount() const {
-void UFacilityObjective::GetObjectTransformInRoom(FTransform& Transform, AProceduralSetup* setup, const FRoomNode& RoomNode, UDebrisPositioning* Positioning, TSubclassOf<AActor> placementActor, FRandomStream RandomStream, const bool checkImportantLocations) {
+void UFacilityObjective::GetObjectTransformInRoom(FTransform& Transform, AProceduralSetup* Setup, const FRoomNode& RoomNode, UDebrisPositioning* Positioning, TSubclassOf<AActor> placementActor, FRandomStream RandomStream, const bool checkImportantLocations) {
@@ -82 +82 @@ void UFacilityObjective::FirstGeneratorEncounterSpawn(APawn* spawned) {
-void UFacilityObjective::DropOverCharger(AProceduralSetup* setup, int32 roomIndex, const FVector& facilityLocation, float idealRange, float idealZDistance, UDebrisPositioning* DebrisPositioning, TSubclassOf<ARessuplyPod> NewGeneratorClass) {
+void UFacilityObjective::DropOverCharger(AProceduralSetup* Setup, int32 roomIndex, const FVector& facilityLocation, float idealRange, float idealZDistance, UDebrisPositioning* DebrisPositioning, TSubclassOf<ARessuplyPod> NewGeneratorClass) {
diff --git a/Source/FSD/Private/FacilityTurret.cpp b/Source/FSD/Private/FacilityTurret.cpp
index b9209b26..5a936b35 100644
--- a/Source/FSD/Private/FacilityTurret.cpp
+++ b/Source/FSD/Private/FacilityTurret.cpp
@@ -5,0 +6,3 @@
+void AFacilityTurret::TurnOffMesh() {
+}
+
diff --git a/Source/FSD/Private/FoamPuddle.cpp b/Source/FSD/Private/FoamPuddle.cpp
index ebf10e5a..f5d2caf9 100644
--- a/Source/FSD/Private/FoamPuddle.cpp
+++ b/Source/FSD/Private/FoamPuddle.cpp
@@ -5,0 +6,3 @@
+void AFoamPuddle::SetState(EVacuumState NewState) {
+}
+
@@ -39 +42 @@ AFoamPuddle::AFoamPuddle() {
-    this->State = EVacuumState::EPuddle;
+    this->State = EVacuumState::EFalling;
@@ -41,0 +45 @@ AFoamPuddle::AFoamPuddle() {
+    this->UsesLocalSpace = false;
diff --git a/Source/FSD/Private/FoamPuddle_WalkingPlagueheart.cpp b/Source/FSD/Private/FoamPuddle_WalkingPlagueheart.cpp
new file mode 100644
index 00000000..f057bc93
--- /dev/null
+++ b/Source/FSD/Private/FoamPuddle_WalkingPlagueheart.cpp
@@ -0,0 +1,6 @@
+#include "FoamPuddle_WalkingPlagueheart.h"
+
+AFoamPuddle_WalkingPlagueheart::AFoamPuddle_WalkingPlagueheart() {
+    this->FoamCleanRadius = 100.00f;
+}
+
diff --git a/Source/FSD/Private/FrozenStateComponent.cpp b/Source/FSD/Private/FrozenStateComponent.cpp
index b1c24b71..129cc753 100644
--- a/Source/FSD/Private/FrozenStateComponent.cpp
+++ b/Source/FSD/Private/FrozenStateComponent.cpp
@@ -11,0 +12 @@ UFrozenStateComponent::UFrozenStateComponent() {
+    this->HoldToBreakTime = 0.25f;
diff --git a/Source/FSD/Private/GDMissionStats.cpp b/Source/FSD/Private/GDMissionStats.cpp
index 10db6478..642b62b5 100644
--- a/Source/FSD/Private/GDMissionStats.cpp
+++ b/Source/FSD/Private/GDMissionStats.cpp
@@ -35,0 +36 @@ FGDMissionStats::FGDMissionStats() {
+    this->JettyBootCreditsSpent = NULL;
diff --git a/Source/FSD/Private/GDStats.cpp b/Source/FSD/Private/GDStats.cpp
index 79e84b2e..4a9c5c1a 100644
--- a/Source/FSD/Private/GDStats.cpp
+++ b/Source/FSD/Private/GDStats.cpp
@@ -41,0 +42,2 @@ FGDStats::FGDStats() {
+    this->CritChance = NULL;
+    this->CritDamageBonus = NULL;
diff --git a/Source/FSD/Private/GameEvent.cpp b/Source/FSD/Private/GameEvent.cpp
index f63c3a52..48dd17c1 100644
--- a/Source/FSD/Private/GameEvent.cpp
+++ b/Source/FSD/Private/GameEvent.cpp
@@ -111 +111 @@ void AGameEvent::EndShout() {
-FTransform AGameEvent::DebreePositionPoint(AProceduralSetup* setup, const FVector& fromLocation, float MinDistance, float desiredDistance, UDebrisPositioning* DebrisPositioning, TSubclassOf<AActor> terrainPlacement, float maxPathLength) {
+FTransform AGameEvent::DebreePositionPoint(AProceduralSetup* Setup, const FVector& fromLocation, float MinDistance, float desiredDistance, UDebrisPositioning* DebrisPositioning, TSubclassOf<AActor> terrainPlacement, float maxPathLength) {
diff --git a/Source/FSD/Private/GeneratedMission.cpp b/Source/FSD/Private/GeneratedMission.cpp
index f3da518a..9468198c 100644
--- a/Source/FSD/Private/GeneratedMission.cpp
+++ b/Source/FSD/Private/GeneratedMission.cpp
@@ -60,0 +61 @@ UGeneratedMission::UGeneratedMission() {
+    this->CanHaveMutators = false;
diff --git a/Source/FSD/Private/GuntowerActivationPlatform.cpp b/Source/FSD/Private/GuntowerActivationPlatform.cpp
index c6cef908..2e31d041 100644
--- a/Source/FSD/Private/GuntowerActivationPlatform.cpp
+++ b/Source/FSD/Private/GuntowerActivationPlatform.cpp
@@ -4 +4 @@
-#include "Components/SkeletalMeshComponent.h"
+#include "Components/StaticMeshComponent.h"
@@ -45,0 +46,4 @@ void AGuntowerActivationPlatform::ModuleDestroyed(UHealthComponentBase* Health)
+int32 AGuntowerActivationPlatform::GetPlayerCount() const {
+    return 0;
+}
+
@@ -71 +75 @@ AGuntowerActivationPlatform::AGuntowerActivationPlatform() {
-    this->SKMesh = CreateDefaultSubobject<USkeletalMeshComponent>(TEXT("SKMesh"));
+    this->STMesh = CreateDefaultSubobject<UStaticMeshComponent>(TEXT("STMesh"));
diff --git a/Source/FSD/Private/HackableBuildingObjective.cpp b/Source/FSD/Private/HackableBuildingObjective.cpp
index cb1a10f5..f6863d09 100644
--- a/Source/FSD/Private/HackableBuildingObjective.cpp
+++ b/Source/FSD/Private/HackableBuildingObjective.cpp
@@ -4 +4 @@
-void UHackableBuildingObjective::DropOverCharger(AProceduralSetup* setup, const FVector& buildingLocation, float idealRange, float idealZDistance, UDebrisPositioning* DebrisPositioning, TSubclassOf<ARessuplyPod> generatorClass) {
+void UHackableBuildingObjective::DropOverCharger(AProceduralSetup* Setup, const FVector& buildingLocation, float idealRange, float idealZDistance, UDebrisPositioning* DebrisPositioning, TSubclassOf<ARessuplyPod> generatorClass) {
diff --git a/Source/FSD/Private/HackingToolItem.cpp b/Source/FSD/Private/HackingToolItem.cpp
index b6360aaa..0f28fdf4 100644
--- a/Source/FSD/Private/HackingToolItem.cpp
+++ b/Source/FSD/Private/HackingToolItem.cpp
@@ -8,0 +9,2 @@ void AHackingToolItem::Server_HackingCompleted_Implementation(UHackingUsableComp
+
+
diff --git a/Source/FSD/Private/HackingToolWidget.cpp b/Source/FSD/Private/HackingToolWidget.cpp
index c2afc6bc..f8d6c16c 100644
--- a/Source/FSD/Private/HackingToolWidget.cpp
+++ b/Source/FSD/Private/HackingToolWidget.cpp
@@ -11,0 +12,2 @@ void UHackingToolWidget::RequestUnequipHackingTool() {
+
+
diff --git a/Source/FSD/Private/HealthComponent.cpp b/Source/FSD/Private/HealthComponent.cpp
index dfbeb405..b5d2fea3 100644
--- a/Source/FSD/Private/HealthComponent.cpp
+++ b/Source/FSD/Private/HealthComponent.cpp
@@ -6,0 +7,4 @@ void UHealthComponent::ToggleCanTakeDamage_Implementation() {
+float UHealthComponent::TakePercentDamage(float PercentOfMax, const FDamageData& DamageData) {
+    return 0.0f;
+}
+
diff --git a/Source/FSD/Private/HeatMaterialComponent.cpp b/Source/FSD/Private/HeatMaterialComponent.cpp
index 470fe8c0..be96c070 100644
--- a/Source/FSD/Private/HeatMaterialComponent.cpp
+++ b/Source/FSD/Private/HeatMaterialComponent.cpp
@@ -3 +3 @@
-void UHeatMaterialComponent::OnTemperatureChanged(float Temperature, bool Overheated) {
+void UHeatMaterialComponent::OnTemperatureChanged(float Temperature, bool overHeated) {
diff --git a/Source/FSD/Private/HitReactionComponent.cpp b/Source/FSD/Private/HitReactionComponent.cpp
index 0d183daa..e4ad36e0 100644
--- a/Source/FSD/Private/HitReactionComponent.cpp
+++ b/Source/FSD/Private/HitReactionComponent.cpp
@@ -11,0 +12 @@ UHitReactionComponent::UHitReactionComponent() {
+    this->AllowHitReactions = true;
diff --git a/Source/FSD/Private/HitscanBaseComponent.cpp b/Source/FSD/Private/HitscanBaseComponent.cpp
index b38f4253..5d0ed267 100644
--- a/Source/FSD/Private/HitscanBaseComponent.cpp
+++ b/Source/FSD/Private/HitscanBaseComponent.cpp
@@ -22 +22 @@ UHitscanBaseComponent::UHitscanBaseComponent() {
-    this->ArmorDamageMultiplier = 1.00f;
+    this->armorDamageMultiplier = 1.00f;
diff --git a/Source/FSD/Private/HookData.cpp b/Source/FSD/Private/HookData.cpp
new file mode 100644
index 00000000..ab36ad6b
--- /dev/null
+++ b/Source/FSD/Private/HookData.cpp
@@ -0,0 +1,6 @@
+#include "HookData.h"
+
+FHookData::FHookData() {
+    this->IsExtending = false;
+}
+
diff --git a/Source/FSD/Private/InfectedStateComponent.cpp b/Source/FSD/Private/InfectedStateComponent.cpp
index abeaa2d7..08988758 100644
--- a/Source/FSD/Private/InfectedStateComponent.cpp
+++ b/Source/FSD/Private/InfectedStateComponent.cpp
@@ -14,0 +15 @@ UInfectedStateComponent::UInfectedStateComponent() {
+    this->HoldToBreakTime = 0.25f;
diff --git a/Source/FSD/Private/InfectionPoint.cpp b/Source/FSD/Private/InfectionPoint.cpp
new file mode 100644
index 00000000..d17a8b3c
--- /dev/null
+++ b/Source/FSD/Private/InfectionPoint.cpp
@@ -0,0 +1,7 @@
+#include "InfectionPoint.h"
+
+FInfectionPoint::FInfectionPoint() {
+    this->IsInfected = false;
+    this->IsVacuumed = false;
+}
+
diff --git a/Source/FSD/Private/InfectionPointCleaningComponent.cpp b/Source/FSD/Private/InfectionPointCleaningComponent.cpp
new file mode 100644
index 00000000..e669f4d8
--- /dev/null
+++ b/Source/FSD/Private/InfectionPointCleaningComponent.cpp
@@ -0,0 +1,38 @@
+#include "InfectionPointCleaningComponent.h"
+#include "Net/UnrealNetwork.h"
+
+void UInfectionPointCleaningComponent::Reset() {
+}
+
+void UInfectionPointCleaningComponent::OnRep_InfectionPoints(TArray<TEnumAsByte<ECleanedStatus>> oldInfectionPoints) {
+}
+
+void UInfectionPointCleaningComponent::InitInfectionPoints(const TArray<UMeshComponent*>& outerMeshes, const TArray<UMeshComponent*>& innerMeshes) {
+}
+
+int32 UInfectionPointCleaningComponent::GetRequiredCleanCount() const {
+    return 0;
+}
+
+int32 UInfectionPointCleaningComponent::GetRemainingInfectedPoints() const {
+    return 0;
+}
+
+int32 UInfectionPointCleaningComponent::GetNumberOfInfectedPoints() const {
+    return 0;
+}
+
+void UInfectionPointCleaningComponent::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
+    Super::GetLifetimeReplicatedProps(OutLifetimeProps);
+    
+    DOREPLIFETIME(UInfectionPointCleaningComponent, InfectionPoints);
+}
+
+UInfectionPointCleaningComponent::UInfectionPointCleaningComponent() {
+    this->bIsInitialized = false;
+    this->bHasBeenReplicated = false;
+    this->CleanedParticles = NULL;
+    this->particleScale = 1.00f;
+    this->outerLayerCleaned = false;
+}
+
diff --git a/Source/FSD/Private/InputFunctionLibrary.cpp b/Source/FSD/Private/InputFunctionLibrary.cpp
index 219810f9..add443d6 100644
--- a/Source/FSD/Private/InputFunctionLibrary.cpp
+++ b/Source/FSD/Private/InputFunctionLibrary.cpp
@@ -29,0 +30,4 @@ bool UInputFunctionLibrary::IsAxisMappedToDirectional(FName InActionName, FKey K
+bool UInputFunctionLibrary::IsAnyInputActionDown(const APlayerController* InPlayerController, const TArray<FName>& InActionNames) {
+    return false;
+}
+
diff --git a/Source/FSD/Private/InterpolatedFirstPersonStaticMeshComponent.cpp b/Source/FSD/Private/InterpolatedFirstPersonStaticMeshComponent.cpp
new file mode 100644
index 00000000..c09ef06a
--- /dev/null
+++ b/Source/FSD/Private/InterpolatedFirstPersonStaticMeshComponent.cpp
@@ -0,0 +1,5 @@
+#include "InterpolatedFirstPersonStaticMeshComponent.h"
+
+UInterpolatedFirstPersonStaticMeshComponent::UInterpolatedFirstPersonStaticMeshComponent() {
+}
+
diff --git a/Source/FSD/Private/InventoryComponent.cpp b/Source/FSD/Private/InventoryComponent.cpp
index e4d7d7d7..0cc41459 100644
--- a/Source/FSD/Private/InventoryComponent.cpp
+++ b/Source/FSD/Private/InventoryComponent.cpp
@@ -52,0 +53,4 @@ ARecallableSentryGunItem* UInventoryComponent::GetRecallableSentryGunItem() cons
+AItem* UInventoryComponent::GetOrCreateUnlistedItem(TSubclassOf<AItem> ItemType) {
+    return NULL;
+}
+
diff --git a/Source/FSD/Private/Item.cpp b/Source/FSD/Private/Item.cpp
index e43b6da2..94283d6c 100644
--- a/Source/FSD/Private/Item.cpp
+++ b/Source/FSD/Private/Item.cpp
@@ -102 +102 @@ void AItem::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimePro
-    DOREPLIFETIME(AItem, Overheated);
+    DOREPLIFETIME(AItem, overHeated);
@@ -124 +124 @@ AItem::AItem() {
-    this->Overheated = false;
+    this->overHeated = false;
diff --git a/Source/FSD/Private/JetBootsBox.cpp b/Source/FSD/Private/JetBootsBox.cpp
new file mode 100644
index 00000000..157192c1
--- /dev/null
+++ b/Source/FSD/Private/JetBootsBox.cpp
@@ -0,0 +1,8 @@
+#include "JetBootsBox.h"
+#include "TerrainPlacementComponent.h"
+
+AJetBootsBox::AJetBootsBox() {
+    this->terrainPlacement = CreateDefaultSubobject<UTerrainPlacementComponent>(TEXT("terrainPlacement"));
+    this->SpecialEvent = NULL;
+}
+
diff --git a/Source/FSD/Private/JetBootsBoxSpawner.cpp b/Source/FSD/Private/JetBootsBoxSpawner.cpp
new file mode 100644
index 00000000..494dffb2
--- /dev/null
+++ b/Source/FSD/Private/JetBootsBoxSpawner.cpp
@@ -0,0 +1,10 @@
+#include "JetBootsBoxSpawner.h"
+
+AJetBootsBoxSpawner::AJetBootsBoxSpawner() {
+    this->MaxSpawnLocationTries = 10;
+    this->DebrisPositioning = NULL;
+    this->terrainPlacement = NULL;
+    this->JetBootsBoxInstance = NULL;
+    this->JetBootsBoxClassLoaded = NULL;
+}
+
diff --git a/Source/FSD/Private/JetBootsMovementComponent.cpp b/Source/FSD/Private/JetBootsMovementComponent.cpp
new file mode 100644
index 00000000..b2ffe2cb
--- /dev/null
+++ b/Source/FSD/Private/JetBootsMovementComponent.cpp
@@ -0,0 +1,90 @@
+#include "JetBootsMovementComponent.h"
+#include "Net/UnrealNetwork.h"
+
+void UJetBootsMovementComponent::Server_SetOverheated_Implementation(bool Current) {
+}
+
+void UJetBootsMovementComponent::Server_SetIsUsing_Implementation(bool Current, bool last, bool NewIsFromTakeOff) {
+}
+
+void UJetBootsMovementComponent::Server_SetCurrentJetFuel_Implementation(float Current) {
+}
+
+void UJetBootsMovementComponent::RemoveJetBoots() {
+}
+
+
+
+
+
+
+
+
+void UJetBootsMovementComponent::OnStateChanged(ECharacterState State) {
+}
+
+void UJetBootsMovementComponent::OnRep_OverHeated(bool lastOverheated) {
+}
+
+void UJetBootsMovementComponent::OnRep_IsUsing(bool lastUsing) {
+}
+
+void UJetBootsMovementComponent::OnRep_CurrentJetFuel() {
+}
+
+void UJetBootsMovementComponent::OnPlayerCharacterHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit) {
+}
+
+void UJetBootsMovementComponent::OnJumpReleased() {
+}
+
+void UJetBootsMovementComponent::OnJumpPressed() {
+}
+
+void UJetBootsMovementComponent::OnCameraModeChanged(ECharacterCameraMode NewCameraMode, ECharacterCameraMode OldCameraMode) {
+}
+
+void UJetBootsMovementComponent::Client_SetIsUsing_Implementation(bool NewIsUsing) {
+}
+
+void UJetBootsMovementComponent::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
+    Super::GetLifetimeReplicatedProps(OutLifetimeProps);
+    
+    DOREPLIFETIME(UJetBootsMovementComponent, CurrentJetFuel);
+    DOREPLIFETIME(UJetBootsMovementComponent, IsUsing);
+    DOREPLIFETIME(UJetBootsMovementComponent, isFromTakeOff);
+    DOREPLIFETIME(UJetBootsMovementComponent, overHeated);
+}
+
+UJetBootsMovementComponent::UJetBootsMovementComponent() {
+    this->Settings = NULL;
+    this->UseSound = NULL;
+    this->DeactivatedSound = NULL;
+    this->OverHeatSound = NULL;
+    this->UseAudioComponent = NULL;
+    this->OverHeatAudioComponent = NULL;
+    this->DeactivatedAudioComponent = NULL;
+    this->TP_UseAudioComponent = NULL;
+    this->TP_OverHeatAudioComponent = NULL;
+    this->TP_DeactivatedAudioComponent = NULL;
+    this->FootParticles = NULL;
+    this->FootParticlesFP = NULL;
+    this->FootSocketNameLeft = TEXT("Dwarf_LegLHeelSocket");
+    this->FootSocketNameRight = TEXT("Dwarf_LegRHeelSocket");
+    this->FootAttachMesh = NULL;
+    this->LFootAttachMeshComponent = NULL;
+    this->RFootAttachMeshComponent = NULL;
+    this->LeftFootParticles = NULL;
+    this->RightFootParticles = NULL;
+    this->FPFootParticles = NULL;
+    this->Character = NULL;
+    this->FromJumpDelay = 0.35f;
+    this->FromTerrainStartDelay = 0.20f;
+    this->OverHeatAtPercent = 0.98f;
+    this->AddPlayerAirVelocityToThrowFactor = 1.00f;
+    this->CurrentJetFuel = 0.00f;
+    this->IsUsing = false;
+    this->isFromTakeOff = false;
+    this->overHeated = false;
+}
+
diff --git a/Source/FSD/Private/JetBootsSettings.cpp b/Source/FSD/Private/JetBootsSettings.cpp
new file mode 100644
index 00000000..02403a8f
--- /dev/null
+++ b/Source/FSD/Private/JetBootsSettings.cpp
@@ -0,0 +1,14 @@
+#include "JetBootsSettings.h"
+
+UJetBootsSettings::UJetBootsSettings() {
+    this->JetForce = 1750.00f;
+    this->AirControlSpeed = 0.15f;
+    this->MaxAirSpeed = 10.00f;
+    this->MaxJetFuel = 50.00f;
+    this->JetFuelCost = 20.00f;
+    this->JetFuelRechargeRate = 30.00f;
+    this->JetFuelRechargeDelay = 0.25f;
+    this->OutOfFuelRechargeDelay = 1.00f;
+    this->DisableGravityWhenUsing = true;
+}
+
diff --git a/Source/FSD/Private/JettyBootEventSettings.cpp b/Source/FSD/Private/JettyBootEventSettings.cpp
new file mode 100644
index 00000000..a9df2f64
--- /dev/null
+++ b/Source/FSD/Private/JettyBootEventSettings.cpp
@@ -0,0 +1,5 @@
+#include "JettyBootEventSettings.h"
+
+FJettyBootEventSettings::FJettyBootEventSettings() {
+}
+
diff --git a/Source/FSD/Private/JettyBootNPC.cpp b/Source/FSD/Private/JettyBootNPC.cpp
new file mode 100644
index 00000000..bd0910f7
--- /dev/null
+++ b/Source/FSD/Private/JettyBootNPC.cpp
@@ -0,0 +1,6 @@
+#include "JettyBootNPC.h"
+
+FJettyBootNPC::FJettyBootNPC() {
+    this->HasPlayedChance = 0.00f;
+}
+
diff --git a/Source/FSD/Private/JettyBootSetting.cpp b/Source/FSD/Private/JettyBootSetting.cpp
new file mode 100644
index 00000000..6816907a
--- /dev/null
+++ b/Source/FSD/Private/JettyBootSetting.cpp
@@ -0,0 +1,5 @@
+#include "JettyBootSetting.h"
+
+FJettyBootSetting::FJettyBootSetting() {
+}
+
diff --git a/Source/FSD/Private/JettyBootSettings.cpp b/Source/FSD/Private/JettyBootSettings.cpp
new file mode 100644
index 00000000..4412232f
--- /dev/null
+++ b/Source/FSD/Private/JettyBootSettings.cpp
@@ -0,0 +1,10 @@
+#include "JettyBootSettings.h"
+
+FJettyBootSetting UJettyBootSettings::GetLevelSetting(int32 InLevel) const {
+    return FJettyBootSetting{};
+}
+
+UJettyBootSettings::UJettyBootSettings() {
+    this->LevelSettings.AddDefaulted(1);
+}
+
diff --git a/Source/FSD/Private/JettyBootUsableComponent.cpp b/Source/FSD/Private/JettyBootUsableComponent.cpp
new file mode 100644
index 00000000..337fdbf5
--- /dev/null
+++ b/Source/FSD/Private/JettyBootUsableComponent.cpp
@@ -0,0 +1,10 @@
+#include "JettyBootUsableComponent.h"
+
+bool UJettyBootUsableComponent::DeductCredits(APlayerCharacter* User, UMissionStat* InCreditCounter) {
+    return false;
+}
+
+UJettyBootUsableComponent::UJettyBootUsableComponent() {
+    this->CreditPrice = 5;
+}
+
diff --git a/Source/FSD/Private/JettyBootsArcadeActor.cpp b/Source/FSD/Private/JettyBootsArcadeActor.cpp
new file mode 100644
index 00000000..b3659cae
--- /dev/null
+++ b/Source/FSD/Private/JettyBootsArcadeActor.cpp
@@ -0,0 +1,69 @@
+#include "JettyBootsArcadeActor.h"
+#include "JettyBootUsableComponent.h"
+#include "Net/UnrealNetwork.h"
+
+void AJettyBootsArcadeActor::SetActivePlayer(APlayerCharacter* InPlayer) {
+}
+
+void AJettyBootsArcadeActor::Server_ReplayPackage_Implementation(const FJettyBootsReplay& InPackage) {
+}
+
+
+
+
+void AJettyBootsArcadeActor::OnRep_Save() {
+}
+
+void AJettyBootsArcadeActor::OnRep_Player(const FJettyBootsPlayer& OldPlayer) {
+}
+
+void AJettyBootsArcadeActor::OnPlayerCharacterDestroyed(AActor* InActor) {
+}
+
+void AJettyBootsArcadeActor::OnCharacterMoved(float DeltaSeconds, FVector OldLocation, FVector OldVelocity) {
+}
+
+void AJettyBootsArcadeActor::OnCharacterMontageEnded(UAnimMontage* InMontage, bool InInterrupted) {
+}
+
+bool AJettyBootsArcadeActor::IsPlayerWithinDistance() {
+    return false;
+}
+
+int32 AJettyBootsArcadeActor::GetLastHighScoreIndex() const {
+    return 0;
+}
+
+TArray<FJettyBootsScore> AJettyBootsArcadeActor::GetHighScores() const {
+    return TArray<FJettyBootsScore>();
+}
+
+APlayerCharacter* AJettyBootsArcadeActor::GetActivePlayer() const {
+    return NULL;
+}
+
+void AJettyBootsArcadeActor::ClearHighScores() {
+}
+
+void AJettyBootsArcadeActor::All_ReplayPackage_Implementation(const FJettyBootsReplay& InPackage) {
+}
+
+void AJettyBootsArcadeActor::AddHighScoreServer(const FJettyBootsScore& InScore) {
+}
+
+void AJettyBootsArcadeActor::AddHighScoreClient(const FJettyBootsScore& InScore) {
+}
+
+void AJettyBootsArcadeActor::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
+    Super::GetLifetimeReplicatedProps(OutLifetimeProps);
+    
+    DOREPLIFETIME(AJettyBootsArcadeActor, Player);
+    DOREPLIFETIME(AJettyBootsArcadeActor, JettyBootsSave);
+}
+
+AJettyBootsArcadeActor::AJettyBootsArcadeActor() {
+    this->StartGameUsable = CreateDefaultSubobject<UJettyBootUsableComponent>(TEXT("StartGameUsable"));
+    this->MaxDistanceToPlay = 200;
+    this->MaxDistanceComponent = NULL;
+}
+
diff --git a/Source/FSD/Private/JettyBootsArcadeWidget.cpp b/Source/FSD/Private/JettyBootsArcadeWidget.cpp
new file mode 100644
index 00000000..100d5af8
--- /dev/null
+++ b/Source/FSD/Private/JettyBootsArcadeWidget.cpp
@@ -0,0 +1,5 @@
+#include "JettyBootsArcadeWidget.h"
+
+UJettyBootsArcadeWidget::UJettyBootsArcadeWidget() : UUserWidget(FObjectInitializer::Get()) {
+}
+
diff --git a/Source/FSD/Private/JettyBootsPlayer.cpp b/Source/FSD/Private/JettyBootsPlayer.cpp
new file mode 100644
index 00000000..7146eb85
--- /dev/null
+++ b/Source/FSD/Private/JettyBootsPlayer.cpp
@@ -0,0 +1,6 @@
+#include "JettyBootsPlayer.h"
+
+FJettyBootsPlayer::FJettyBootsPlayer() {
+    this->bIsPlaying = false;
+}
+
diff --git a/Source/FSD/Private/JettyBootsReplay.cpp b/Source/FSD/Private/JettyBootsReplay.cpp
new file mode 100644
index 00000000..93ef13f2
--- /dev/null
+++ b/Source/FSD/Private/JettyBootsReplay.cpp
@@ -0,0 +1,10 @@
+#include "JettyBootsReplay.h"
+
+FJettyBootsReplay::FJettyBootsReplay() {
+    this->Seed = 0;
+    this->State = 0;
+    this->Level = 0;
+    this->Score = 0;
+    this->Lives = 0;
+}
+
diff --git a/Source/FSD/Private/JettyBootsSave.cpp b/Source/FSD/Private/JettyBootsSave.cpp
new file mode 100644
index 00000000..520ca52e
--- /dev/null
+++ b/Source/FSD/Private/JettyBootsSave.cpp
@@ -0,0 +1,7 @@
+#include "JettyBootsSave.h"
+
+FJettyBootsSave::FJettyBootsSave() {
+    this->bInitializeNPCs = false;
+    this->LastHighScoreIndex = 0;
+}
+
diff --git a/Source/FSD/Private/JettyBootsScore.cpp b/Source/FSD/Private/JettyBootsScore.cpp
new file mode 100644
index 00000000..8a85c5ab
--- /dev/null
+++ b/Source/FSD/Private/JettyBootsScore.cpp
@@ -0,0 +1,6 @@
+#include "JettyBootsScore.h"
+
+FJettyBootsScore::FJettyBootsScore() {
+    this->Score = 0;
+}
+
diff --git a/Source/FSD/Private/KnockbackDamageBonus.cpp b/Source/FSD/Private/KnockbackDamageBonus.cpp
index 5e09ce2c..b7bd8b16 100644
--- a/Source/FSD/Private/KnockbackDamageBonus.cpp
+++ b/Source/FSD/Private/KnockbackDamageBonus.cpp
@@ -5,0 +6,9 @@ UKnockbackDamageBonus::UKnockbackDamageBonus() {
+    this->VerticalScaleMultiplier = 1.00f;
+    this->HorizontalScaleMultiplier = 1.00f;
+    this->MinVerticalPower = 0.00f;
+    this->MinHorizontalPower = 0.00f;
+    this->OptimalDistance = -1.00f;
+    this->AllowForIncapacitadedPlayes = true;
+    this->KnockThowardsInstigator = false;
+    this->ScalePowerToInstigatorDistance = false;
+    this->AbsoluteKnockBack = false;
diff --git a/Source/FSD/Private/LineSpikeAttack.cpp b/Source/FSD/Private/LineSpikeAttack.cpp
new file mode 100644
index 00000000..308aab7f
--- /dev/null
+++ b/Source/FSD/Private/LineSpikeAttack.cpp
@@ -0,0 +1,38 @@
+#include "LineSpikeAttack.h"
+#include "Net/UnrealNetwork.h"
+
+void ULineSpikeAttack::OnRep_TentaclesBurried() {
+}
+
+void ULineSpikeAttack::All_PlayEffects_Implementation() {
+}
+
+void ULineSpikeAttack::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
+    Super::GetLifetimeReplicatedProps(OutLifetimeProps);
+    
+    DOREPLIFETIME(ULineSpikeAttack, TentaclesBurried);
+}
+
+ULineSpikeAttack::ULineSpikeAttack() {
+    this->TentacleMaterial = NULL;
+    this->ActiveMaterial = NULL;
+    this->TentacleImpactParticles = NULL;
+    this->StartWaveParticles = NULL;
+    this->TentacleImpactSound = NULL;
+    this->TentacleExitSound = NULL;
+    this->StartWaveSound = NULL;
+    this->Tentacles = NULL;
+    this->SequenceLoops = 1;
+    this->SpikeClass = NULL;
+    this->TentaclesBurried = false;
+    this->MaxStepUpheight = 300.00f;
+    this->MaxDistanceToGround = 0.00f;
+    this->DistanceBetweenSpikes = 0.00f;
+    this->TimeBetweenSpikes = 0.00f;
+    this->TentacleStretchPower = 4000.00f;
+    this->TentacleSearchDistance = 500.00f;
+    this->TentacleInGroundOffset = 10.00f;
+    this->MinSpikeCount = 10;
+    this->MaxFails = 3;
+}
+
diff --git a/Source/FSD/Private/LineSpikeTaskBase.cpp b/Source/FSD/Private/LineSpikeTaskBase.cpp
new file mode 100644
index 00000000..96c7e5b5
--- /dev/null
+++ b/Source/FSD/Private/LineSpikeTaskBase.cpp
@@ -0,0 +1,5 @@
+#include "LineSpikeTaskBase.h"
+
+ULineSpikeTaskBase::ULineSpikeTaskBase() {
+}
+
diff --git a/Source/FSD/Private/LoadoutCopy.cpp b/Source/FSD/Private/LoadoutCopy.cpp
new file mode 100644
index 00000000..263812f8
--- /dev/null
+++ b/Source/FSD/Private/LoadoutCopy.cpp
@@ -0,0 +1,5 @@
+#include "LoadoutCopy.h"
+
+FLoadoutCopy::FLoadoutCopy() {
+}
+
diff --git a/Source/FSD/Private/LoadoutFunctionLibrary.cpp b/Source/FSD/Private/LoadoutFunctionLibrary.cpp
new file mode 100644
index 00000000..fb49d70f
--- /dev/null
+++ b/Source/FSD/Private/LoadoutFunctionLibrary.cpp
@@ -0,0 +1,21 @@
+#include "LoadoutFunctionLibrary.h"
+
+void ULoadoutFunctionLibrary::SetCurrLoadout(UObject* WorldContextObject, UPlayerCharacterID* PlayerId, FLoadoutCopy newLoadout) {
+}
+
+void ULoadoutFunctionLibrary::RandomizeWeaponLoadout(UObject* WorldContextObject, UPlayerCharacterID* PlayerId, int32 loadoutIndex) {
+}
+
+void ULoadoutFunctionLibrary::RandomizeAllRandomWeaponLoadout(APlayerCharacter* Player) {
+}
+
+FLoadoutCopy ULoadoutFunctionLibrary::GetCurrentLoadout(UObject* WorldContextObject, UPlayerCharacterID* PlayerId) {
+    return FLoadoutCopy{};
+}
+
+void ULoadoutFunctionLibrary::CopyPasteWeaponLoadout(UObject* WorldContextObject, UPlayerCharacterID* PlayerId, int32 fromIndex, int32 toIndex) {
+}
+
+ULoadoutFunctionLibrary::ULoadoutFunctionLibrary() {
+}
+
diff --git a/Source/FSD/Private/MeleeAttackComponent.cpp b/Source/FSD/Private/MeleeAttackComponent.cpp
index ab04ebf5..f7b8947c 100644
--- a/Source/FSD/Private/MeleeAttackComponent.cpp
+++ b/Source/FSD/Private/MeleeAttackComponent.cpp
@@ -13,0 +14 @@ UMeleeAttackComponent::UMeleeAttackComponent() {
+    this->HitValidator = NULL;
diff --git a/Source/FSD/Private/Objective.cpp b/Source/FSD/Private/Objective.cpp
index 47aca9c3..90ae23cd 100644
--- a/Source/FSD/Private/Objective.cpp
+++ b/Source/FSD/Private/Objective.cpp
@@ -104,0 +105 @@ UObjective::UObjective() {
+    this->ShowObjectiveInHUD = true;
diff --git a/Source/FSD/Private/PlagueControlActor.cpp b/Source/FSD/Private/PlagueControlActor.cpp
index 965f1193..5a5ea999 100644
--- a/Source/FSD/Private/PlagueControlActor.cpp
+++ b/Source/FSD/Private/PlagueControlActor.cpp
@@ -18 +18 @@ void APlagueControlActor::EquipPlaguePod(APlayerCharacter* Player) {
-bool APlagueControlActor::CanDropWeaponPod(float& timeLeft) {
+bool APlagueControlActor::CanDropWeaponPod(float& TimeLeft) {
diff --git a/Source/FSD/Private/PlagueMeteor.cpp b/Source/FSD/Private/PlagueMeteor.cpp
index a48bdca0..2e898d04 100644
--- a/Source/FSD/Private/PlagueMeteor.cpp
+++ b/Source/FSD/Private/PlagueMeteor.cpp
@@ -55 +55 @@ int32 APlagueMeteor::GetNumActivePods() const {
-void APlagueMeteor::DropRockCrackerPods(int32 Amount, float MinRadius, float maRadius, AProceduralSetup* setup) {
+void APlagueMeteor::DropRockCrackerPods(int32 Amount, float MinRadius, float maRadius, AProceduralSetup* Setup) {
diff --git a/Source/FSD/Private/PlaguePuddle.cpp b/Source/FSD/Private/PlaguePuddle.cpp
new file mode 100644
index 00000000..08c6fbba
--- /dev/null
+++ b/Source/FSD/Private/PlaguePuddle.cpp
@@ -0,0 +1,6 @@
+#include "PlaguePuddle.h"
+
+
+APlaguePuddle::APlaguePuddle() {
+}
+
diff --git a/Source/FSD/Private/PlayEffectsTask.cpp b/Source/FSD/Private/PlayEffectsTask.cpp
new file mode 100644
index 00000000..4a791392
--- /dev/null
+++ b/Source/FSD/Private/PlayEffectsTask.cpp
@@ -0,0 +1,5 @@
+#include "PlayEffectsTask.h"
+
+UPlayEffectsTask::UPlayEffectsTask() {
+}
+
diff --git a/Source/FSD/Private/PlayerAnimInstance.cpp b/Source/FSD/Private/PlayerAnimInstance.cpp
index 4e5d9173..cef67889 100644
--- a/Source/FSD/Private/PlayerAnimInstance.cpp
+++ b/Source/FSD/Private/PlayerAnimInstance.cpp
@@ -60,0 +61 @@ UPlayerAnimInstance::UPlayerAnimInstance() {
+    this->IsUsingJetBoots = false;
diff --git a/Source/FSD/Private/PlayerCharacter.cpp b/Source/FSD/Private/PlayerCharacter.cpp
index 35f2136c..32fa9496 100644
--- a/Source/FSD/Private/PlayerCharacter.cpp
+++ b/Source/FSD/Private/PlayerCharacter.cpp
@@ -165,0 +166,3 @@ void APlayerCharacter::Server_CheatKillAll_Implementation() {
+void APlayerCharacter::Server_CheatJetBoots_Implementation() {
+}
+
@@ -189,0 +193,3 @@ void APlayerCharacter::Server_AddImpulse_Implementation(const FVector_NetQuantiz
+void APlayerCharacter::Server_ActivateTemporaryBuff_Implementation(UTemporaryBuff* buff) {
+}
+
@@ -266,0 +273,8 @@ bool APlayerCharacter::IsWalking() const {
+bool APlayerCharacter::IsUsingPressed() const {
+    return false;
+}
+
+bool APlayerCharacter::IsUsingItemPressed() const {
+    return false;
+}
+
@@ -474,0 +489,3 @@ void APlayerCharacter::Client_AddImpulse_Implementation(const FVector_NetQuantiz
+void APlayerCharacter::Client_ActivateTemporaryBuff_Implementation(UTemporaryBuff* buff) {
+}
+
@@ -538,0 +556 @@ APlayerCharacter::APlayerCharacter() {
+    this->JetBootsComponentSpawnable = NULL;
@@ -598,0 +617 @@ APlayerCharacter::APlayerCharacter() {
+    this->PlayerVelocityToThrowFactor = 0.00f;
@@ -629,0 +649 @@ APlayerCharacter::APlayerCharacter() {
+    this->CanSalute = true;
diff --git a/Source/FSD/Private/PluckFromZiplineBonus.cpp b/Source/FSD/Private/PluckFromZiplineBonus.cpp
new file mode 100644
index 00000000..1a8708eb
--- /dev/null
+++ b/Source/FSD/Private/PluckFromZiplineBonus.cpp
@@ -0,0 +1,5 @@
+#include "PluckFromZiplineBonus.h"
+
+UPluckFromZiplineBonus::UPluckFromZiplineBonus() {
+}
+
diff --git a/Source/FSD/Private/ProceduralResources.cpp b/Source/FSD/Private/ProceduralResources.cpp
index 69fd2f86..4db83b55 100644
--- a/Source/FSD/Private/ProceduralResources.cpp
+++ b/Source/FSD/Private/ProceduralResources.cpp
@@ -6 +6 @@ void UProceduralResources::GenerateResources() {
-void UProceduralResources::GenerateMissingCarvedResources_Async(AProceduralSetup*& setup, FLatentActionInfo LatentInfo) {
+void UProceduralResources::GenerateMissingCarvedResources_Async(AProceduralSetup*& Setup, FLatentActionInfo LatentInfo) {
@@ -12 +12 @@ void UProceduralResources::GenerateMissingCarvedResources() {
-void UProceduralResources::GenerateCarvedResources_Async(AProceduralSetup*& setup, FLatentActionInfo LatentInfo) {
+void UProceduralResources::GenerateCarvedResources_Async(AProceduralSetup*& Setup, FLatentActionInfo LatentInfo) {
diff --git a/Source/FSD/Private/ProceduralSetup.cpp b/Source/FSD/Private/ProceduralSetup.cpp
index 2e7137de..7062c6f2 100644
--- a/Source/FSD/Private/ProceduralSetup.cpp
+++ b/Source/FSD/Private/ProceduralSetup.cpp
@@ -20 +20 @@ void AProceduralSetup::SpawnObjectiveCriticalItems(const ECriticalItemPass& pass
-void AProceduralSetup::SpawnItems_Async(AProceduralSetup* setup, FLatentActionInfo LatentInfo) {
+void AProceduralSetup::SpawnItems_Async(AProceduralSetup* Setup, FLatentActionInfo LatentInfo) {
@@ -29 +29 @@ void AProceduralSetup::SpawnEncounters() {
-void AProceduralSetup::SpawnDebrisItems_Async(AProceduralSetup* setup, FLatentActionInfo LatentInfo, EDebrisItemPass pass, int32 Depth) {
+void AProceduralSetup::SpawnDebrisItems_Async(AProceduralSetup* Setup, FLatentActionInfo LatentInfo, EDebrisItemPass pass, int32 Depth) {
@@ -72 +72 @@ TMap<FString, float> AProceduralSetup::GetCollectablesResourceAmounts() const {
-void AProceduralSetup::GenerateRoomsFromGraph_Async(AProceduralSetup* setup, FLatentActionInfo LatentInfo, int32 CarvePass) {
+void AProceduralSetup::GenerateRoomsFromGraph_Async(AProceduralSetup* Setup, FLatentActionInfo LatentInfo, int32 CarvePass) {
@@ -87 +87 @@ void AProceduralSetup::FindEntrancesForAllConnections() {
-void AProceduralSetup::FillTunnels_Async(AProceduralSetup* setup, FLatentActionInfo LatentInfo) {
+void AProceduralSetup::FillTunnels_Async(AProceduralSetup* Setup, FLatentActionInfo LatentInfo) {
diff --git a/Source/FSD/Private/ProceduralVeinsComponent.cpp b/Source/FSD/Private/ProceduralVeinsComponent.cpp
index 3a91c7d9..654c3ace 100644
--- a/Source/FSD/Private/ProceduralVeinsComponent.cpp
+++ b/Source/FSD/Private/ProceduralVeinsComponent.cpp
@@ -3 +3 @@
-void UProceduralVeinsComponent::GenerateResourceVeins_Async(AProceduralSetup*& setup, FLatentActionInfo LatentInfo) {
+void UProceduralVeinsComponent::GenerateResourceVeins_Async(AProceduralSetup*& Setup, FLatentActionInfo LatentInfo) {
@@ -9 +9 @@ void UProceduralVeinsComponent::GenerateResourceVeins() {
-void UProceduralVeinsComponent::GenerateMissingResourceVeins_Async(AProceduralSetup*& setup, FLatentActionInfo LatentInfo) {
+void UProceduralVeinsComponent::GenerateMissingResourceVeins_Async(AProceduralSetup*& Setup, FLatentActionInfo LatentInfo) {
@@ -15 +15 @@ void UProceduralVeinsComponent::GenerateMissingResourceVeins() {
-void UProceduralVeinsComponent::GenerateDebrisVeins_Async(AProceduralSetup*& setup, EDebrisCarvedType CarverType, FLatentActionInfo LatentInfo) {
+void UProceduralVeinsComponent::GenerateDebrisVeins_Async(AProceduralSetup*& Setup, EDebrisCarvedType CarverType, FLatentActionInfo LatentInfo) {
diff --git a/Source/FSD/Private/ProjectileImpact.cpp b/Source/FSD/Private/ProjectileImpact.cpp
index cd820653..fb1d7119 100644
--- a/Source/FSD/Private/ProjectileImpact.cpp
+++ b/Source/FSD/Private/ProjectileImpact.cpp
@@ -5,0 +6 @@ FProjectileImpact::FProjectileImpact() {
+    this->bBlockingHit = false;
diff --git a/Source/FSD/Private/PuddleTrackerComponent.cpp b/Source/FSD/Private/PuddleTrackerComponent.cpp
new file mode 100644
index 00000000..aeca7612
--- /dev/null
+++ b/Source/FSD/Private/PuddleTrackerComponent.cpp
@@ -0,0 +1,14 @@
+#include "PuddleTrackerComponent.h"
+
+void UPuddleTrackerComponent::OnPuddleDestroyed(AActor* DestroyedActor) {
+}
+
+void UPuddleTrackerComponent::GetPuddleLocations(TArray<FVector>& Locations) {
+}
+
+void UPuddleTrackerComponent::AddPuddle(AActor* puddle) {
+}
+
+UPuddleTrackerComponent::UPuddleTrackerComponent() {
+}
+
diff --git a/Source/FSD/Private/PushSatusEffectDamageBonusUpgrade.cpp b/Source/FSD/Private/PushSatusEffectDamageBonusUpgrade.cpp
index 4322188b..73c1fb10 100644
--- a/Source/FSD/Private/PushSatusEffectDamageBonusUpgrade.cpp
+++ b/Source/FSD/Private/PushSatusEffectDamageBonusUpgrade.cpp
@@ -11,0 +12 @@ UPushSatusEffectDamageBonusUpgrade::UPushSatusEffectDamageBonusUpgrade() {
+    this->Condition = NULL;
diff --git a/Source/FSD/Private/RandomLoadoutBuff.cpp b/Source/FSD/Private/RandomLoadoutBuff.cpp
new file mode 100644
index 00000000..c678ad51
--- /dev/null
+++ b/Source/FSD/Private/RandomLoadoutBuff.cpp
@@ -0,0 +1,5 @@
+#include "RandomLoadoutBuff.h"
+
+URandomLoadoutBuff::URandomLoadoutBuff() {
+}
+
diff --git a/Source/FSD/Private/RefineryObjective.cpp b/Source/FSD/Private/RefineryObjective.cpp
index c31ebbe2..2a400bdd 100644
--- a/Source/FSD/Private/RefineryObjective.cpp
+++ b/Source/FSD/Private/RefineryObjective.cpp
@@ -5 +5 @@
-void URefineryObjective::SpawnWells(AProceduralSetup* setup, const FVector& rigLocation, float minDistanceBetween, const TArray<FVector2D>& minMaxDistancesToRig) {
+void URefineryObjective::SpawnWells(AProceduralSetup* Setup, const FVector& rigLocation, float minDistanceBetween, const TArray<FVector2D>& minMaxDistancesToRig) {
diff --git a/Source/FSD/Private/RequiredMissionItem.cpp b/Source/FSD/Private/RequiredMissionItem.cpp
index 967337e0..4cc05cf0 100644
--- a/Source/FSD/Private/RequiredMissionItem.cpp
+++ b/Source/FSD/Private/RequiredMissionItem.cpp
@@ -6,0 +7 @@ FRequiredMissionItem::FRequiredMissionItem() {
+    this->CanHaveMutators = false;
diff --git a/Source/FSD/Private/RoomBurner.cpp b/Source/FSD/Private/RoomBurner.cpp
index 0adcd006..20cccc48 100644
--- a/Source/FSD/Private/RoomBurner.cpp
+++ b/Source/FSD/Private/RoomBurner.cpp
@@ -3 +3 @@
-void ARoomBurner::SpawnEncounter(AProceduralSetup* setup) {
+void ARoomBurner::SpawnEncounter(AProceduralSetup* Setup) {
diff --git a/Source/FSD/Private/RotatingSceneComponent.cpp b/Source/FSD/Private/RotatingSceneComponent.cpp
new file mode 100644
index 00000000..f5715adc
--- /dev/null
+++ b/Source/FSD/Private/RotatingSceneComponent.cpp
@@ -0,0 +1,10 @@
+#include "RotatingSceneComponent.h"
+
+URotatingSceneComponent::URotatingSceneComponent() {
+    this->BobbingSpeed = 0.00f;
+    this->BobbingSize = 0.00f;
+    this->Sweep = false;
+    this->ForceParentUp = false;
+    this->TeleportMode = ETeleportType::None;
+}
+
diff --git a/Source/FSD/Private/SalvageObjective.cpp b/Source/FSD/Private/SalvageObjective.cpp
index 3522178b..a878d191 100644
--- a/Source/FSD/Private/SalvageObjective.cpp
+++ b/Source/FSD/Private/SalvageObjective.cpp
@@ -20 +20 @@ void USalvageObjective::OnActorRepaired(URepairableComponent* repairable) {
-FTransform USalvageObjective::FindRepairPointLocation(AProceduralSetup* setup, const FVector& podLocation, float Radius, float maxVerticalDistance, UDebrisPositioning* DebrisPositioning, TSubclassOf<AActor> terrainPlacement, const TArray<FVector>& locationsToAvoid, UCurveFloat* AvoidCostCurve) {
+FTransform USalvageObjective::FindRepairPointLocation(AProceduralSetup* Setup, const FVector& podLocation, float Radius, float maxVerticalDistance, UDebrisPositioning* DebrisPositioning, TSubclassOf<AActor> terrainPlacement, const TArray<FVector>& locationsToAvoid, UCurveFloat* AvoidCostCurve) {
diff --git a/Source/FSD/Private/Season.cpp b/Source/FSD/Private/Season.cpp
index 85b17cb6..c5526beb 100644
--- a/Source/FSD/Private/Season.cpp
+++ b/Source/FSD/Private/Season.cpp
@@ -13,0 +14 @@ USeason::USeason() {
+    this->SeasonWaveInMissionChance = 0.00f;
diff --git a/Source/FSD/Private/SeasonLevelWidget.cpp b/Source/FSD/Private/SeasonLevelWidget.cpp
index 34bfafc1..2a7e42b8 100644
--- a/Source/FSD/Private/SeasonLevelWidget.cpp
+++ b/Source/FSD/Private/SeasonLevelWidget.cpp
@@ -7 +7 @@ bool USeasonLevelWidget::TryClaimReward(bool isNormalReward) {
-void USeasonLevelWidget::SetData(int32 inLevel, bool inLastInRow) {
+void USeasonLevelWidget::SetData(int32 InLevel, bool inLastInRow) {
diff --git a/Source/FSD/Private/SeasonSaveEntry.cpp b/Source/FSD/Private/SeasonSaveEntry.cpp
index b4b91e29..9ec960cc 100644
--- a/Source/FSD/Private/SeasonSaveEntry.cpp
+++ b/Source/FSD/Private/SeasonSaveEntry.cpp
@@ -9 +9 @@ FSeasonSaveEntry::FSeasonSaveEntry() {
-    this->PlagueHeartsdUsed = 0;
+    this->PlagueHeartsUsed = 0;
diff --git a/Source/FSD/Private/SeasonalEventEntryChance.cpp b/Source/FSD/Private/SeasonalEventEntryChance.cpp
new file mode 100644
index 00000000..3dd496fa
--- /dev/null
+++ b/Source/FSD/Private/SeasonalEventEntryChance.cpp
@@ -0,0 +1,7 @@
+#include "SeasonalEventEntryChance.h"
+
+FSeasonalEventEntryChance::FSeasonalEventEntryChance() {
+    this->SpecialEvent = NULL;
+    this->SpawnChance = 0.00f;
+}
+
diff --git a/Source/FSD/Private/SharkEnemy.cpp b/Source/FSD/Private/SharkEnemy.cpp
index f21c563f..201da920 100644
--- a/Source/FSD/Private/SharkEnemy.cpp
+++ b/Source/FSD/Private/SharkEnemy.cpp
@@ -37 +36,0 @@ void ASharkEnemy::OnNearTarget(UPrimitiveComponent* OverlappedComponent, AActor*
-
@@ -86 +84,0 @@ ASharkEnemy::ASharkEnemy() {
-    this->RagdollSpeedFactor = 0.20f;
@@ -92 +90 @@ ASharkEnemy::ASharkEnemy() {
-    this->StopSpeedThreshold = 10.00f;
+    this->RagdollSpeedFactor = 0.20f;
@@ -94,2 +91,0 @@ ASharkEnemy::ASharkEnemy() {
-    this->RaiseSpeed = 0.00f;
-    this->TiltInSpeed = 1.00f;
@@ -100 +95,0 @@ ASharkEnemy::ASharkEnemy() {
-    this->HitLaunchPower = 0.50f;
@@ -107 +102,2 @@ ASharkEnemy::ASharkEnemy() {
-    this->TimeBeforeGroundCheck = 0.00f;
+    this->NormalHeight = -60.00f;
+    this->DiveHeight = -200.00f;
@@ -114 +110 @@ ASharkEnemy::ASharkEnemy() {
-    this->VounerableSettings = NULL;
+    this->VulnerableSettings = NULL;
diff --git a/Source/FSD/Private/ShootTask.cpp b/Source/FSD/Private/ShootTask.cpp
new file mode 100644
index 00000000..43bf2bdd
--- /dev/null
+++ b/Source/FSD/Private/ShootTask.cpp
@@ -0,0 +1,6 @@
+#include "ShootTask.h"
+
+UShootTask::UShootTask() {
+    this->HasToFinish = true;
+}
+
diff --git a/Source/FSD/Private/SimpleArmorDamageComponent.cpp b/Source/FSD/Private/SimpleArmorDamageComponent.cpp
index 689ea202..d09be3b0 100644
--- a/Source/FSD/Private/SimpleArmorDamageComponent.cpp
+++ b/Source/FSD/Private/SimpleArmorDamageComponent.cpp
@@ -4,3 +3,0 @@
-void USimpleArmorDamageComponent::Server_SetArmorIndexDestroyed_Implementation(int32 Index, EArmorDamageType DamageType) {
-}
-
diff --git a/Source/FSD/Private/SkinEffect.cpp b/Source/FSD/Private/SkinEffect.cpp
index 3469b7ef..a56e3251 100644
--- a/Source/FSD/Private/SkinEffect.cpp
+++ b/Source/FSD/Private/SkinEffect.cpp
@@ -5,0 +6,4 @@ void USkinEffect::Receive_AddToItem(UMeshComponent* Mesh, AActor* Skinnable, boo
+EItemSkinType USkinEffect::GetSkinType() const {
+    return EItemSkinType::PaintJob;
+}
+
diff --git a/Source/FSD/Private/SoapVacuumItem.cpp b/Source/FSD/Private/SoapVacuumItem.cpp
index 8972b6ce..66ce2c8f 100644
--- a/Source/FSD/Private/SoapVacuumItem.cpp
+++ b/Source/FSD/Private/SoapVacuumItem.cpp
@@ -5 +5 @@
-void ASoapVacuumItem::Server_StartVacuumingPuddle_Implementation(AFoamPuddle* puddle) {
+void ASoapVacuumItem::Server_StartVacuumingPuddle_Implementation(AActor* Target) {
diff --git a/Source/FSD/Private/SpawnActorWithDebrisPosComponent.cpp b/Source/FSD/Private/SpawnActorWithDebrisPosComponent.cpp
index 8d3ddb83..83211d45 100644
--- a/Source/FSD/Private/SpawnActorWithDebrisPosComponent.cpp
+++ b/Source/FSD/Private/SpawnActorWithDebrisPosComponent.cpp
@@ -4 +4 @@
-bool USpawnActorWithDebrisPosComponent::PlaceActorsWithCallback(int32 NumToSpawn, int32 NumToSpawnMin, int32 NumAllowedChecks, TSubclassOf<AActor> SpawnedActorClass, AProceduralSetup* setup, float Radius, UDebrisPositioning* DebrisPositioning, const TArray<FVector>& locationsToAvoid, UCurveFloat* AvoidCostCurve, FSpawnActorDelegate OnSpawned, FVector CustomLocation) {
+bool USpawnActorWithDebrisPosComponent::PlaceActorsWithCallback(int32 NumToSpawn, int32 NumToSpawnMin, int32 NumAllowedChecks, TSubclassOf<AActor> SpawnedActorClass, AProceduralSetup* Setup, float Radius, UDebrisPositioning* DebrisPositioning, const TArray<FVector>& locationsToAvoid, UCurveFloat* AvoidCostCurve, FSpawnActorDelegate OnSpawned, FVector CustomLocation) {
@@ -8 +8 @@ bool USpawnActorWithDebrisPosComponent::PlaceActorsWithCallback(int32 NumToSpawn
-bool USpawnActorWithDebrisPosComponent::PlaceActors(int32 NumToSpawn, int32 NumToSpawnMin, int32 NumAllowedChecks, TSubclassOf<AActor> SpawnedActorClass, AProceduralSetup* setup, float Radius, UDebrisPositioning* DebrisPositioning, const TArray<FVector>& locationsToAvoid, UCurveFloat* AvoidCostCurve, TArray<AActor*>& OutSpawnedActors, FVector CustomLocation) {
+bool USpawnActorWithDebrisPosComponent::PlaceActors(int32 NumToSpawn, int32 NumToSpawnMin, int32 NumAllowedChecks, TSubclassOf<AActor> SpawnedActorClass, AProceduralSetup* Setup, float Radius, UDebrisPositioning* DebrisPositioning, const TArray<FVector>& locationsToAvoid, UCurveFloat* AvoidCostCurve, TArray<AActor*>& OutSpawnedActors, FVector CustomLocation) {
@@ -12 +12 @@ bool USpawnActorWithDebrisPosComponent::PlaceActors(int32 NumToSpawn, int32 NumT
-void USpawnActorWithDebrisPosComponent::AddTerrainPlacement(AActor* Actor, AProceduralSetup* setup) {
+void USpawnActorWithDebrisPosComponent::AddTerrainPlacement(AActor* Actor, AProceduralSetup* Setup) {
diff --git a/Source/FSD/Private/SpecialChanceEventItem.cpp b/Source/FSD/Private/SpecialChanceEventItem.cpp
new file mode 100644
index 00000000..1611e14a
--- /dev/null
+++ b/Source/FSD/Private/SpecialChanceEventItem.cpp
@@ -0,0 +1,8 @@
+#include "SpecialChanceEventItem.h"
+
+FSpecialChanceEventItem::FSpecialChanceEventItem() {
+    this->Event = NULL;
+    this->BaseChance = 0.00f;
+    this->CanSpawnInDeepDive = false;
+}
+
diff --git a/Source/FSD/Private/SpiderLobberAnimInstance.cpp b/Source/FSD/Private/SpiderLobberAnimInstance.cpp
new file mode 100644
index 00000000..25ab14de
--- /dev/null
+++ b/Source/FSD/Private/SpiderLobberAnimInstance.cpp
@@ -0,0 +1,14 @@
+#include "SpiderLobberAnimInstance.h"
+
+void USpiderLobberAnimInstance::ResetLiquidInBum() {
+}
+
+void USpiderLobberAnimInstance::OnDeath(UHealthComponentBase* InHealthComponent) {
+}
+
+USpiderLobberAnimInstance::USpiderLobberAnimInstance() {
+    this->LiquidInBumEaseInExp = 2.00f;
+    this->LiquidInBumTimeToMax = 5.00f;
+    this->LiquidInBumTimeToMaxShort = 0.70f;
+}
+
diff --git a/Source/FSD/Private/SplineHookAttack.cpp b/Source/FSD/Private/SplineHookAttack.cpp
new file mode 100644
index 00000000..6ee7c08c
--- /dev/null
+++ b/Source/FSD/Private/SplineHookAttack.cpp
@@ -0,0 +1,57 @@
+#include "SplineHookAttack.h"
+#include "Net/UnrealNetwork.h"
+
+void USplineHookAttack::Server_DamageTarget_Implementation(AActor* Target) {
+}
+
+void USplineHookAttack::OnRep_Using() {
+}
+
+FVector USplineHookAttack::GetTargetLocation() const {
+    return FVector{};
+}
+
+FVector USplineHookAttack::GetTargetDirection() const {
+    return FVector{};
+}
+
+bool USplineHookAttack::GetHasAquiredTarget() const {
+    return false;
+}
+
+void USplineHookAttack::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const {
+    Super::GetLifetimeReplicatedProps(OutLifetimeProps);
+    
+    DOREPLIFETIME(USplineHookAttack, SyncedTarget);
+    DOREPLIFETIME(USplineHookAttack, Using);
+}
+
+USplineHookAttack::USplineHookAttack() {
+    this->Spline = NULL;
+    this->HeadMesh = NULL;
+    this->TailMesh = NULL;
+    this->HitReacts = NULL;
+    this->HeadAnimation = NULL;
+    this->TailAnimation = NULL;
+    this->Damage = NULL;
+    this->KnockBackHorizontalForce = 0.00f;
+    this->HorizontalScaleMultiplier = 0.00f;
+    this->KnockBackVerticalForce = 0.00f;
+    this->OptimalDistance = 0.00f;
+    this->VerticalScaleMultiplier = 0.00f;
+    this->MinHorizontalPower = 0.00f;
+    this->MinVerticalPower = 0.00f;
+    this->HeightDiffPower = 1.00f;
+    this->AbsoluteKnockBack = false;
+    this->ScaleByHeightDiff = true;
+    this->AttackDuration = 1.00f;
+    this->MaxAngle = 60.00f;
+    this->AttackOnProgress = 0.50f;
+    this->AttackDelay = 0.30f;
+    this->LeadMultiplier = 1.00f;
+    this->AquireLocationTime = 0.00f;
+    this->ShowGrabArea = false;
+    this->Lead = false;
+    this->Using = false;
+}
+
diff --git a/Source/FSD/Private/SpriteRect.cpp b/Source/FSD/Private/SpriteRect.cpp
new file mode 100644
index 00000000..f161f12d
--- /dev/null
+++ b/Source/FSD/Private/SpriteRect.cpp
@@ -0,0 +1,9 @@
+#include "SpriteRect.h"
+
+FSpriteRect::FSpriteRect() {
+    this->Left = 0.00f;
+    this->Top = 0.00f;
+    this->Right = 0.00f;
+    this->Bottom = 0.00f;
+}
+
diff --git a/Source/FSD/Private/SpriteRectLibrary.cpp b/Source/FSD/Private/SpriteRectLibrary.cpp
new file mode 100644
index 00000000..a2bc1c4e
--- /dev/null
+++ b/Source/FSD/Private/SpriteRectLibrary.cpp
@@ -0,0 +1,39 @@
+#include "SpriteRectLibrary.h"
+
+FSpriteRect USpriteRectLibrary::TranslateSpriteRect(FSpriteRect Rect, FVector2D Offset) {
+    return FSpriteRect{};
+}
+
+bool USpriteRectLibrary::SpriteRectIntersectsAny(FSpriteRect A, TArray<FSpriteRect> Others) {
+    return false;
+}
+
+bool USpriteRectLibrary::SpriteRectIntersects(FSpriteRect A, FSpriteRect B) {
+    return false;
+}
+
+void USpriteRectLibrary::MoveSpriteRect(FSpriteRect& Rect, FVector2D Offset) {
+}
+
+FSpriteRect USpriteRectLibrary::MakeSpriteRectFromPoints(FVector2D Start, FVector2D End) {
+    return FSpriteRect{};
+}
+
+FSpriteRect USpriteRectLibrary::MakeSpriteRectFromCenter(FVector2D Center, FVector2D Size) {
+    return FSpriteRect{};
+}
+
+void USpriteRectLibrary::MakeGateSpriteRects(int32 CanvasHeight, int32 GateWidth, FVector OpeningPos, float OpeningHeight, FSpriteRect& OutTopRect, FSpriteRect& OutBottomRect) {
+}
+
+FVector2D USpriteRectLibrary::GetSpriteRectSize(FSpriteRect Rect) {
+    return FVector2D{};
+}
+
+FVector2D USpriteRectLibrary::GetSpriteRectCenter(FSpriteRect Rect) {
+    return FVector2D{};
+}
+
+USpriteRectLibrary::USpriteRectLibrary() {
+}
+
diff --git a/Source/FSD/Private/SpriteRectWidget.cpp b/Source/FSD/Private/SpriteRectWidget.cpp
new file mode 100644
index 00000000..ccc5b75b
--- /dev/null
+++ b/Source/FSD/Private/SpriteRectWidget.cpp
@@ -0,0 +1,21 @@
+#include "SpriteRectWidget.h"
+
+void USpriteRectWidget::SetSize(FVector2D InSize) {
+}
+
+void USpriteRectWidget::SetPositionAndSize(FVector2D InPosition, FVector2D InSize) {
+}
+
+void USpriteRectWidget::SetPosition(FVector2D InPosition) {
+}
+
+void USpriteRectWidget::Move(FVector2D InOffset) {
+}
+
+FSpriteRect USpriteRectWidget::GetSpriteRect() const {
+    return FSpriteRect{};
+}
+
+USpriteRectWidget::USpriteRectWidget() : UUserWidget(FObjectInitializer::Get()) {
+}
+
diff --git a/Source/FSD/Private/StateDrivenBosco.cpp b/Source/FSD/Private/StateDrivenBosco.cpp
deleted file mode 100644
index 88785145..00000000
--- a/Source/FSD/Private/StateDrivenBosco.cpp
+++ /dev/null
@@ -1,20 +0,0 @@
-#include "StateDrivenBosco.h"
-#include "Components/AudioComponent.h"
-#include "Particles/ParticleSystemComponent.h"
-#include "Components/PointLightComponent.h"
-#include "DroneCombatState.h"
-#include "DroneFollowState.h"
-#include "DroneMiningState.h"
-#include "DroneReviveState.h"
-
-AStateDrivenBosco::AStateDrivenBosco() {
-    this->PointLight = CreateDefaultSubobject<UPointLightComponent>(TEXT("PointLight"));
-    this->ThrusterSound = CreateDefaultSubobject<UAudioComponent>(TEXT("ThrusterSound"));
-    this->L_ThrusterParticle = CreateDefaultSubobject<UParticleSystemComponent>(TEXT("L_ThrusterParticles"));
-    this->R_ThrusterParticle = CreateDefaultSubobject<UParticleSystemComponent>(TEXT("R_ThrusterParticles"));
-    this->FollowState = CreateDefaultSubobject<UDroneFollowState>(TEXT("FollowState"));
-    this->CombatState = CreateDefaultSubobject<UDroneCombatState>(TEXT("CombatState"));
-    this->MiningState = CreateDefaultSubobject<UDroneMiningState>(TEXT("MiningState"));
-    this->ReviveState = CreateDefaultSubobject<UDroneReviveState>(TEXT("ReviveState"));
-}
-
diff --git a/Source/FSD/Private/StateDrivenBoscoController.cpp b/Source/FSD/Private/StateDrivenBoscoController.cpp
deleted file mode 100644
index 811ed673..00000000
--- a/Source/FSD/Private/StateDrivenBoscoController.cpp
+++ /dev/null
@@ -1,5 +0,0 @@
-#include "StateDrivenBoscoController.h"
-
-AStateDrivenBoscoController::AStateDrivenBoscoController() {
-}
-
diff --git a/Source/FSD/Private/StateDrivenDroneController.cpp b/Source/FSD/Private/StateDrivenDroneController.cpp
new file mode 100644
index 00000000..b9050813
--- /dev/null
+++ b/Source/FSD/Private/StateDrivenDroneController.cpp
@@ -0,0 +1,5 @@
+#include "StateDrivenDroneController.h"
+
+AStateDrivenDroneController::AStateDrivenDroneController() {
+}
+
diff --git a/Source/FSD/Private/StatusEffectsComponent.cpp b/Source/FSD/Private/StatusEffectsComponent.cpp
index c8c89645..bfcdb6d6 100644
--- a/Source/FSD/Private/StatusEffectsComponent.cpp
+++ b/Source/FSD/Private/StatusEffectsComponent.cpp
@@ -40,0 +41,8 @@ bool UStatusEffectsComponent::HasActiveEffect(TSubclassOf<UStatusEffect> StatusE
+int32 UStatusEffectsComponent::GetStackAmount(TSubclassOf<UStatusEffect> StatusEffect, AActor* Owner) const {
+    return 0;
+}
+
+int32 UStatusEffectsComponent::GetFullStackAmount(TSubclassOf<UStatusEffect> StatusEffect) const {
+    return 0;
+}
+
diff --git a/Source/FSD/Private/StingerIdleAudioComponent.cpp b/Source/FSD/Private/StingerIdleAudioComponent.cpp
new file mode 100644
index 00000000..ff2840ea
--- /dev/null
+++ b/Source/FSD/Private/StingerIdleAudioComponent.cpp
@@ -0,0 +1,7 @@
+#include "StingerIdleAudioComponent.h"
+
+UStingerIdleAudioComponent::UStingerIdleAudioComponent() {
+    this->FadeInTime = 0.20f;
+    this->FadeOutTime = 0.50f;
+}
+
diff --git a/Source/FSD/Private/TemporaryBuff.cpp b/Source/FSD/Private/TemporaryBuff.cpp
index 1d2260f6..d9e91f3c 100644
--- a/Source/FSD/Private/TemporaryBuff.cpp
+++ b/Source/FSD/Private/TemporaryBuff.cpp
@@ -3 +3,2 @@
-void UTemporaryBuff::DeActivateBuff(AFSDPlayerController* Player) const {
+bool UTemporaryBuff::GetActivateOnlyWhenDrinking() const {
+    return false;
@@ -6 +7 @@ void UTemporaryBuff::DeActivateBuff(AFSDPlayerController* Player) const {
-void UTemporaryBuff::ActivateBuffOnPlayer(APlayerCharacter* Player) const {
+void UTemporaryBuff::DeActivateBuff(APlayerCharacter* Player) const {
@@ -9 +10 @@ void UTemporaryBuff::ActivateBuffOnPlayer(APlayerCharacter* Player) const {
-void UTemporaryBuff::ActivateBuffOnController(AFSDPlayerController* Player) const {
+void UTemporaryBuff::ActivateBuff(APlayerCharacter* Player) const {
@@ -12,0 +14,2 @@ UTemporaryBuff::UTemporaryBuff() {
+    this->ActivatesOnlyOnceWhenDrinking = false;
+    this->IsTodaysSpecialBuff = true;
diff --git a/Source/FSD/Private/TentacleManagerComponent.cpp b/Source/FSD/Private/TentacleManagerComponent.cpp
new file mode 100644
index 00000000..ececf2d9
--- /dev/null
+++ b/Source/FSD/Private/TentacleManagerComponent.cpp
@@ -0,0 +1,5 @@
+#include "TentacleManagerComponent.h"
+
+UTentacleManagerComponent::UTentacleManagerComponent() {
+}
+
diff --git a/Source/FSD/Private/TerrainFunctionLibrary.cpp b/Source/FSD/Private/TerrainFunctionLibrary.cpp
index da5c84ed..a34d23b9 100644
--- a/Source/FSD/Private/TerrainFunctionLibrary.cpp
+++ b/Source/FSD/Private/TerrainFunctionLibrary.cpp
@@ -7 +7,5 @@ bool UTerrainFunctionLibrary::GetDebrisTransformsInSphere(UObject* WorldContextO
-TArray<FVector> UTerrainFunctionLibrary::GetAllNavPointsInSphere(UObject* WorldContextObject, FVector Origin, float Radius, DeepPathFinderSize pfSize) {
+TArray<FVector> UTerrainFunctionLibrary::GetAllNavPointsInSphere(UObject* WorldContextObject, FVector Origin, float Radius, DeepPathFinderSize pfSize, const FVector searchNormal, float maxDegreesToSearchNormal) {
+    return TArray<FVector>();
+}
+
+TArray<FVector> UTerrainFunctionLibrary::FindPath(UObject* WorldContextObject, FVector Origin, FVector Destination, DeepPathFinderSize pfSize) {
diff --git a/Source/FSD/Private/TreasureBox.cpp b/Source/FSD/Private/TreasureBox.cpp
index 15fa67db..c02537e9 100644
--- a/Source/FSD/Private/TreasureBox.cpp
+++ b/Source/FSD/Private/TreasureBox.cpp
@@ -10 +10 @@
-void ATreasureBox::PlaceResources(AProceduralSetup* setup, float Radius, UDebrisPositioning* DebrisPositioning, const TArray<FVector>& locationsToAvoid, UCurveFloat* AvoidCostCurve) {
+void ATreasureBox::PlaceResources(AProceduralSetup* Setup, float Radius, UDebrisPositioning* DebrisPositioning, const TArray<FVector>& locationsToAvoid, UCurveFloat* AvoidCostCurve) {
diff --git a/Source/FSD/Private/UpgradableGearComponent.cpp b/Source/FSD/Private/UpgradableGearComponent.cpp
index 3e56b212..81bf88ad 100644
--- a/Source/FSD/Private/UpgradableGearComponent.cpp
+++ b/Source/FSD/Private/UpgradableGearComponent.cpp
@@ -26 +26 @@ bool UUpgradableGearComponent::IsUpgradeEquipped(TSubclassOf<AActor> itemClass,
-bool UUpgradableGearComponent::IsTierUnLocked(TSubclassOf<AActor> itemClass, int32 tierIndex, AFSDPlayerState* Player, UPlayerCharacterID* characterID) {
+bool UUpgradableGearComponent::IsTierUnLocked(UObject* WorldContextObject, TSubclassOf<AActor> itemClass, int32 tierIndex, UPlayerCharacterID* characterID) {
@@ -30 +30 @@ bool UUpgradableGearComponent::IsTierUnLocked(TSubclassOf<AActor> itemClass, int
-bool UUpgradableGearComponent::IsOverclockingEnabled(UObject* WorldContextObject, AFSDPlayerState* Player, UPlayerCharacterID* characterID, TSubclassOf<AActor> itemClass) {
+bool UUpgradableGearComponent::IsOverclockingEnabled(UObject* WorldContextObject, UPlayerCharacterID* characterID, TSubclassOf<AActor> itemClass) {
diff --git a/Source/FSD/Private/UseConditionOwnerIsAlive.cpp b/Source/FSD/Private/UseConditionOwnerIsAlive.cpp
new file mode 100644
index 00000000..70d35f00
--- /dev/null
+++ b/Source/FSD/Private/UseConditionOwnerIsAlive.cpp
@@ -0,0 +1,6 @@
+#include "UseConditionOwnerIsAlive.h"
+
+UUseConditionOwnerIsAlive::UUseConditionOwnerIsAlive() {
+    this->Invert = false;
+}
+
diff --git a/Source/FSD/Private/VanityFunctionLibrary.cpp b/Source/FSD/Private/VanityFunctionLibrary.cpp
new file mode 100644
index 00000000..51f7f27d
--- /dev/null
+++ b/Source/FSD/Private/VanityFunctionLibrary.cpp
@@ -0,0 +1,14 @@
+#include "VanityFunctionLibrary.h"
+
+void UVanityFunctionLibrary::RandomizeVanityLoadout(UObject* WorldContextObject, APlayerCharacter* Character) {
+}
+
+void UVanityFunctionLibrary::RandomizeAllRandomVanityLoadout(APlayerCharacter* currentCharacter) {
+}
+
+void UVanityFunctionLibrary::CopyPasteVanityLoadout(UObject* WorldContextObject, UPlayerCharacterID* PlayerId, int32 fromIndex, int32 toIndex) {
+}
+
+UVanityFunctionLibrary::UVanityFunctionLibrary() {
+}
+
diff --git a/Source/FSD/Private/VanityItem.cpp b/Source/FSD/Private/VanityItem.cpp
index 1cea4dc4..f74573fa 100644
--- a/Source/FSD/Private/VanityItem.cpp
+++ b/Source/FSD/Private/VanityItem.cpp
@@ -70,0 +71,3 @@ void UVanityItem::CraftItem(UObject* WorldContextObject, UPlayerCharacterID* cha
+void UVanityItem::ChangeToItem(UCharacterVanityComponent* Gear) const {
+}
+
@@ -86 +88,0 @@ UVanityItem::UVanityItem() {
-    this->IsPartOfRandomization = true;
diff --git a/Source/FSD/Private/WaitTask.cpp b/Source/FSD/Private/WaitTask.cpp
new file mode 100644
index 00000000..aea8dc52
--- /dev/null
+++ b/Source/FSD/Private/WaitTask.cpp
@@ -0,0 +1,8 @@
+#include "WaitTask.h"
+
+UWaitTask::UWaitTask() {
+    this->WaitTime = 0.00f;
+    this->SkipIfLast = false;
+    this->OnlyOnce = false;
+}
+
diff --git a/Source/FSD/Private/WeakpointGlowComponent.cpp b/Source/FSD/Private/WeakpointGlowComponent.cpp
index 2f9b06bc..96d22207 100644
--- a/Source/FSD/Private/WeakpointGlowComponent.cpp
+++ b/Source/FSD/Private/WeakpointGlowComponent.cpp
@@ -31,0 +32 @@ UWeakpointGlowComponent::UWeakpointGlowComponent() {
+    this->Mode = EWeakpointGlowMode::Set;
diff --git a/Source/FSD/Public/ActorTrackingCheatInterface.h b/Source/FSD/Public/ActorTrackingCheatInterface.h
new file mode 100644
index 00000000..d1a31170
--- /dev/null
+++ b/Source/FSD/Public/ActorTrackingCheatInterface.h
@@ -0,0 +1,15 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UObject/Interface.h"
+#include "ActorTrackingCheatInterface.generated.h"
+
+UINTERFACE()
+class UActorTrackingCheatInterface : public UInterface {
+    GENERATED_BODY()
+};
+
+class IActorTrackingCheatInterface : public IInterface {
+    GENERATED_BODY()
+public:
+};
+
diff --git a/Source/FSD/Public/AddComponentStatusEffectItem.h b/Source/FSD/Public/AddComponentStatusEffectItem.h
new file mode 100644
index 00000000..1d39bd7d
--- /dev/null
+++ b/Source/FSD/Public/AddComponentStatusEffectItem.h
@@ -0,0 +1,23 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "StatusEffectItem.h"
+#include "Templates/SubclassOf.h"
+#include "AddComponentStatusEffectItem.generated.h"
+
+class UActorComponent;
+
+UCLASS(Blueprintable, EditInlineNew)
+class UAddComponentStatusEffectItem : public UStatusEffectItem {
+    GENERATED_BODY()
+public:
+protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TSubclassOf<UActorComponent> ComponentClass;
+    
+    UPROPERTY(EditAnywhere, Export, Transient, meta=(AllowPrivateAccess=true))
+    TWeakObjectPtr<UActorComponent> AddedComponent;
+    
+public:
+    UAddComponentStatusEffectItem();
+};
+
diff --git a/Source/FSD/Public/AmmoDrivenWeapon.h b/Source/FSD/Public/AmmoDrivenWeapon.h
index 9c0278ca..cf0cddef 100644
--- a/Source/FSD/Public/AmmoDrivenWeapon.h
+++ b/Source/FSD/Public/AmmoDrivenWeapon.h
@@ -195,0 +196,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float FireInputBufferTime;
+    
@@ -219,0 +223,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float HoldToFirePercentOfFireRatePenalty;
+    
@@ -222,0 +229,6 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool ApplyRecoilAtEndOfBurst;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float EndOfBurstRecoilMultiplier;
+    
@@ -239,0 +252,3 @@ protected:
+    UFUNCTION(BlueprintCallable)
+    void UpdateHoldToFire();
+    
diff --git a/Source/FSD/Public/AmmoDrivenWeaponAnimInstance.h b/Source/FSD/Public/AmmoDrivenWeaponAnimInstance.h
index bb126163..1c6af35e 100644
--- a/Source/FSD/Public/AmmoDrivenWeaponAnimInstance.h
+++ b/Source/FSD/Public/AmmoDrivenWeaponAnimInstance.h
@@ -23 +23 @@ protected:
-    bool Overheated;
+    bool overHeated;
diff --git a/Source/FSD/Public/AquireTargetTask.h b/Source/FSD/Public/AquireTargetTask.h
new file mode 100644
index 00000000..eadc6db1
--- /dev/null
+++ b/Source/FSD/Public/AquireTargetTask.h
@@ -0,0 +1,15 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "LineSpikeTaskBase.h"
+#include "AquireTargetTask.generated.h"
+
+UCLASS(Blueprintable, DefaultToInstanced, EditInlineNew)
+class UAquireTargetTask : public ULineSpikeTaskBase {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool ForceNewTarget;
+    
+    UAquireTargetTask();
+};
+
diff --git a/Source/FSD/Public/ArmorHealthDamageComponent.h b/Source/FSD/Public/ArmorHealthDamageComponent.h
index ffbf2f4b..bc2863e5 100644
--- a/Source/FSD/Public/ArmorHealthDamageComponent.h
+++ b/Source/FSD/Public/ArmorHealthDamageComponent.h
@@ -7,0 +8 @@
+#include "EArmorDamageType.h"
@@ -9,0 +11,2 @@
+class UPrimitiveComponent;
+
@@ -48,0 +52,3 @@ public:
+    UFUNCTION(BlueprintCallable)
+    bool SetArmorDamageEnabledOnItem(FName BoneName, bool Enabled);
+    
@@ -58,0 +65,4 @@ protected:
+public:
+    UFUNCTION(BlueprintCallable)
+    void DealSocketArmorDamage(float Damage, float armorDamageMultiplier, UPrimitiveComponent* collider, bool shatter, EArmorDamageType DamageType);
+    
diff --git a/Source/FSD/Public/ArmorVanityItem.h b/Source/FSD/Public/ArmorVanityItem.h
index 75e53959..dd5a4ab3 100644
--- a/Source/FSD/Public/ArmorVanityItem.h
+++ b/Source/FSD/Public/ArmorVanityItem.h
@@ -2,0 +3 @@
+#include "EArmorMeshType.h"
@@ -9,0 +11 @@ class UArmorMaterialVanityItem;
+class UCharacterVanityComponent;
@@ -19 +21 @@ protected:
-    TSoftObjectPtr<USkeletalMesh> Mesh;
+    TMap<EArmorMeshType, TSoftObjectPtr<USkeletalMesh>> TPArmorMesh;
@@ -22 +24 @@ protected:
-    TSoftObjectPtr<USkeletalMesh> BeardCompatibleMesh;
+    TMap<EArmorMeshType, TSoftObjectPtr<USkeletalMesh>> FPArmorMesh;
@@ -25 +27 @@ protected:
-    TSoftObjectPtr<USkeletalMesh> FPMesh;
+    bool AllowSleevelessUse;
@@ -49,0 +52,5 @@ public:
+protected:
+    UFUNCTION(BlueprintCallable)
+    void SetNewArmorType(UCharacterVanityComponent* Gear);
+    
+public:
@@ -52,0 +60,6 @@ public:
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    bool HasSleevelessArmorType() const;
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    EArmorMeshType GetFPMeshType() const;
+    
diff --git a/Source/FSD/Public/AttachMeshesAfflictionItem.h b/Source/FSD/Public/AttachMeshesAfflictionItem.h
index 8c9e75ef..c056513a 100644
--- a/Source/FSD/Public/AttachMeshesAfflictionItem.h
+++ b/Source/FSD/Public/AttachMeshesAfflictionItem.h
@@ -2,0 +3,2 @@
+#include "UObject/NoExportTypes.h"
+#include "EMeshAttachType.h"
@@ -4,0 +7,2 @@
+class UAnimSequence;
+class USkeletalMesh;
@@ -12 +16,10 @@ public:
-    FName BoneName;
+    FVector Offset;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    USkeletalMesh* SkeletalMesh;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    UStaticMesh* StaticMesh;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    UAnimSequence* Animation;
@@ -18 +31,16 @@ public:
-    UStaticMesh* Mesh;
+    FName BoneName;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TEnumAsByte<EMeshAttachType> AttachType;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool LoopAnimation;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool RandomRotaiton;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool RandomScale;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool CastShadows;
diff --git a/Source/FSD/Public/BTDecorator_IsUnderCeiling.h b/Source/FSD/Public/BTDecorator_IsUnderCeiling.h
new file mode 100644
index 00000000..9fc7fc3d
--- /dev/null
+++ b/Source/FSD/Public/BTDecorator_IsUnderCeiling.h
@@ -0,0 +1,31 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "BehaviorTree/BTDecorator.h"
+#include "BehaviorTree/BehaviorTreeTypes.h"
+#include "BTDecorator_IsUnderCeiling.generated.h"
+
+UCLASS(Blueprintable)
+class UBTDecorator_IsUnderCeiling : public UBTDecorator {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float Height;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float Angle;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool TryCalcFromSocket;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FName SocketName;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool DrawDebug;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FBlackboardKeySelector TargetKey;
+    
+    UBTDecorator_IsUnderCeiling();
+};
+
diff --git a/Source/FSD/Public/BasicPistol.h b/Source/FSD/Public/BasicPistol.h
index 174f3422..ca0ec5c2 100644
--- a/Source/FSD/Public/BasicPistol.h
+++ b/Source/FSD/Public/BasicPistol.h
@@ -2,0 +3 @@
+#include "Engine/EngineTypes.h"
@@ -5,0 +7 @@
+class UDamageComponent;
@@ -14,0 +17,6 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
+    UDamageComponent* DamageComponent;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float BurstArmorDamageMultiplier;
+    
@@ -26,0 +35,3 @@ protected:
+    UFUNCTION(BlueprintCallable)
+    void OnHit(const FHitResult& HitResult, bool isAlwaysPenetrated);
+    
diff --git a/Source/FSD/Public/BodyRotationManagerComponent.h b/Source/FSD/Public/BodyRotationManagerComponent.h
new file mode 100644
index 00000000..52cd833e
--- /dev/null
+++ b/Source/FSD/Public/BodyRotationManagerComponent.h
@@ -0,0 +1,30 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UObject/NoExportTypes.h"
+#include "Components/ActorComponent.h"
+#include "Curves/CurveFloat.h"
+#include "BodyRotationManagerComponent.generated.h"
+
+class USceneComponent;
+
+UCLASS(Blueprintable, ClassGroup=Custom, meta=(BlueprintSpawnableComponent))
+class UBodyRotationManagerComponent : public UActorComponent {
+    GENERATED_BODY()
+public:
+protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FRuntimeFloatCurve KnockBackCurve;
+    
+    UPROPERTY(EditAnywhere, Export, meta=(AllowPrivateAccess=true))
+    TWeakObjectPtr<USceneComponent> RotationComponent;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float LerpSpeed;
+    
+public:
+    UBodyRotationManagerComponent();
+    UFUNCTION(BlueprintCallable)
+    void ApplyKnockBack(float force, float Duration, const FVector& Direction);
+    
+};
+
diff --git a/Source/FSD/Public/Bomber.h b/Source/FSD/Public/Bomber.h
index 57e0b87e..94dfe8b7 100644
--- a/Source/FSD/Public/Bomber.h
+++ b/Source/FSD/Public/Bomber.h
@@ -11,0 +12 @@ class UAudioComponent;
+class UFXSystemAsset;
@@ -35 +36 @@ protected:
-    UParticleSystem* deathParticles;
+    UFXSystemAsset* deathParticles;
@@ -96,0 +98,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool NoDeathSpiral;
+    
diff --git a/Source/FSD/Public/BoscoController.h b/Source/FSD/Public/BoscoController.h
index b8c8bb26..87cc49c6 100644
--- a/Source/FSD/Public/BoscoController.h
+++ b/Source/FSD/Public/BoscoController.h
@@ -18 +17,0 @@ class UHealthComponentBase;
-class UMissionWarning;
@@ -44,3 +42,0 @@ protected:
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
-    UMissionWarning* PlagueWarning;
-    
@@ -89,0 +86,3 @@ protected:
+    FGameplayTagQuery VacuumTagQuery;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
diff --git a/Source/FSD/Public/ChangeVacuumStateDelegateDelegate.h b/Source/FSD/Public/ChangeVacuumStateDelegateDelegate.h
new file mode 100644
index 00000000..a230d9aa
--- /dev/null
+++ b/Source/FSD/Public/ChangeVacuumStateDelegateDelegate.h
@@ -0,0 +1,7 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "EVacuumState.h"
+#include "ChangeVacuumStateDelegateDelegate.generated.h"
+
+UDELEGATE(BlueprintCallable) DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FChangeVacuumStateDelegate, EVacuumState, State);
+
diff --git a/Source/FSD/Public/CharacterOptions.h b/Source/FSD/Public/CharacterOptions.h
index ff2585ea..b53cf281 100644
--- a/Source/FSD/Public/CharacterOptions.h
+++ b/Source/FSD/Public/CharacterOptions.h
@@ -14,0 +15,6 @@ public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool HoldToBreakImmobilization;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool HoldToFire;
+    
diff --git a/Source/FSD/Public/CharacterSave.h b/Source/FSD/Public/CharacterSave.h
index 711d635a..f52acc8d 100644
--- a/Source/FSD/Public/CharacterSave.h
+++ b/Source/FSD/Public/CharacterSave.h
@@ -49,0 +50,3 @@ private:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FItemLoadout RandomWeaponLoadout;
+    
diff --git a/Source/FSD/Public/CharacterVanityComponent.h b/Source/FSD/Public/CharacterVanityComponent.h
index b60cc5a3..1fef1433 100644
--- a/Source/FSD/Public/CharacterVanityComponent.h
+++ b/Source/FSD/Public/CharacterVanityComponent.h
@@ -60,0 +61,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, ReplicatedUsing=OnRep_DesireSleeveless, meta=(AllowPrivateAccess=true))
+    bool DesireSleevelessArmor;
+    
@@ -78,0 +82,3 @@ public:
+    UFUNCTION(BlueprintCallable, meta=(WorldContext="WorldContextObject"))
+    static void SetDesireSleevelessArmor(UObject* WorldContextObject, UPlayerCharacterID* Character, bool inDesireSleeveless);
+    
@@ -83,0 +90,3 @@ public:
+    UFUNCTION(BlueprintCallable, Reliable, Server)
+    void Server_SetDesireSleevelessArmor(bool useSleeveless);
+    
@@ -89,0 +99,3 @@ public:
+    UFUNCTION(BlueprintCallable, BlueprintPure, meta=(WorldContext="WorldContextObject"))
+    static bool Receive_GetDesireSleevelessArmor(UObject* WorldContextObject, UPlayerCharacterID* Character);
+    
@@ -93,0 +106,3 @@ protected:
+    UFUNCTION(BlueprintCallable)
+    void OnRep_DesireSleeveless();
+    
@@ -100,0 +116,3 @@ public:
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    bool GetDesireSleevelessArmor() const;
+    
diff --git a/Source/FSD/Public/CharacterVanityLoadout.h b/Source/FSD/Public/CharacterVanityLoadout.h
index 3126d088..83093fba 100644
--- a/Source/FSD/Public/CharacterVanityLoadout.h
+++ b/Source/FSD/Public/CharacterVanityLoadout.h
@@ -36,0 +37,3 @@ public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool UsingSleevelessArmor;
+    
diff --git a/Source/FSD/Public/CharacterVanitySave.h b/Source/FSD/Public/CharacterVanitySave.h
index eef0f84a..2525be88 100644
--- a/Source/FSD/Public/CharacterVanitySave.h
+++ b/Source/FSD/Public/CharacterVanitySave.h
@@ -17,0 +18,3 @@ private:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FCharacterVanityLoadout RandomVanityLoadout;
+    
diff --git a/Source/FSD/Public/ClaimableRewardEntry.h b/Source/FSD/Public/ClaimableRewardEntry.h
index 054a07d9..a8e6da10 100644
--- a/Source/FSD/Public/ClaimableRewardEntry.h
+++ b/Source/FSD/Public/ClaimableRewardEntry.h
@@ -3 +2,0 @@
-#include "UObject/NoExportTypes.h"
@@ -29,3 +27,0 @@ public:
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
-    FGuid SavegameID;
-    
diff --git a/Source/FSD/Public/CleanupPodItem.h b/Source/FSD/Public/CleanupPodItem.h
index 8add9c9f..75c0e0fc 100644
--- a/Source/FSD/Public/CleanupPodItem.h
+++ b/Source/FSD/Public/CleanupPodItem.h
@@ -3,0 +4 @@
+#include "CleaningPodLaunchedDelegate.h"
@@ -15,0 +17,3 @@ public:
+    UPROPERTY(BlueprintAssignable, BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FCleaningPodLaunched OnCleaningPodLaunched;
+    
@@ -24 +28 @@ protected:
-    void UpdateWidget(EPlaceableObstructionType reason, float timeLeft);
+    void UpdateWidget(EPlaceableObstructionType reason, float TimeLeft);
diff --git a/Source/FSD/Public/CrossbowProjectileRecallable.h b/Source/FSD/Public/CrossbowProjectileRecallable.h
index 1240d07f..d23f4a02 100644
--- a/Source/FSD/Public/CrossbowProjectileRecallable.h
+++ b/Source/FSD/Public/CrossbowProjectileRecallable.h
@@ -8,0 +9 @@ class UInstantUsable;
+class UInterpolatedFirstPersonStaticMeshComponent;
@@ -29,0 +31,3 @@ private:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    UInterpolatedFirstPersonStaticMeshComponent* FPMeshComponent;
+    
diff --git a/Source/FSD/Public/DamageComponent.h b/Source/FSD/Public/DamageComponent.h
index 721741ec..8cc38387 100644
--- a/Source/FSD/Public/DamageComponent.h
+++ b/Source/FSD/Public/DamageComponent.h
@@ -56 +56 @@ protected:
-    float ArmorDamageMultiplier;
+    float armorDamageMultiplier;
diff --git a/Source/FSD/Public/DeepPathfinderMovement.h b/Source/FSD/Public/DeepPathfinderMovement.h
index 14cb3306..d28aa78e 100644
--- a/Source/FSD/Public/DeepPathfinderMovement.h
+++ b/Source/FSD/Public/DeepPathfinderMovement.h
@@ -337,0 +338,3 @@ public:
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    float GetApproximatePathLength(FVector Start, FVector End) const;
+    
diff --git a/Source/FSD/Public/DisplayCase.h b/Source/FSD/Public/DisplayCase.h
index 2342b4d5..077e766f 100644
--- a/Source/FSD/Public/DisplayCase.h
+++ b/Source/FSD/Public/DisplayCase.h
@@ -76,0 +77,3 @@ protected:
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    bool IsSpecialContent() const;
+    
diff --git a/Source/FSD/Public/DoubleDrillItem.h b/Source/FSD/Public/DoubleDrillItem.h
index a0a1d3e2..f93e1753 100644
--- a/Source/FSD/Public/DoubleDrillItem.h
+++ b/Source/FSD/Public/DoubleDrillItem.h
@@ -124 +124 @@ public:
-    float ArmorDamageMultiplier;
+    float armorDamageMultiplier;
diff --git a/Source/FSD/Public/DrinkEffectComponent.h b/Source/FSD/Public/DrinkEffectComponent.h
index c48c06e2..6cc30e99 100644
--- a/Source/FSD/Public/DrinkEffectComponent.h
+++ b/Source/FSD/Public/DrinkEffectComponent.h
@@ -21,0 +22,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool ActivatesOnlyOnceWhenDrinking;
+    
@@ -36,0 +40,4 @@ protected:
+public:
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    bool GetActivateOnlyWhenDrinking() const;
+    
diff --git a/Source/FSD/Public/DrinkableDataAsset.h b/Source/FSD/Public/DrinkableDataAsset.h
index 567d8ccd..32435ca3 100644
--- a/Source/FSD/Public/DrinkableDataAsset.h
+++ b/Source/FSD/Public/DrinkableDataAsset.h
@@ -32,0 +33,3 @@ public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool IsSpecialBeer;
+    
diff --git a/Source/FSD/Public/DroneBase.h b/Source/FSD/Public/DroneBase.h
index bc7b3833..31d755fb 100644
--- a/Source/FSD/Public/DroneBase.h
+++ b/Source/FSD/Public/DroneBase.h
@@ -7,0 +8 @@ class UDroneStateComponentBase;
+class UPointLightComponent;
@@ -12,0 +14,3 @@ public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
+    UPointLightComponent* StateLight;
+    
diff --git a/Source/FSD/Public/DroneCarryComponent.h b/Source/FSD/Public/DroneCarryComponent.h
deleted file mode 100644
index b40605a0..00000000
--- a/Source/FSD/Public/DroneCarryComponent.h
+++ /dev/null
@@ -1,28 +0,0 @@
-#pragma once
-#include "CoreMinimal.h"
-#include "Components/ActorComponent.h"
-#include "EInputKeys.h"
-#include "DroneCarryComponent.generated.h"
-
-class ACarriableItem;
-class APlayerCharacter;
-
-UCLASS(Blueprintable, ClassGroup=Custom, meta=(BlueprintSpawnableComponent))
-class UDroneCarryComponent : public UActorComponent {
-    GENERATED_BODY()
-public:
-protected:
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
-    ACarriableItem* CurrentCarried;
-    
-public:
-    UDroneCarryComponent();
-protected:
-    UFUNCTION(BlueprintCallable)
-    void OnCarriedUsed(APlayerCharacter* User, EInputKeys Key);
-    
-    UFUNCTION(BlueprintCallable)
-    void OnCarriedDropped();
-    
-};
-
diff --git a/Source/FSD/Public/DroneCombatState.h b/Source/FSD/Public/DroneCombatState.h
index ee52640a..869fd017 100644
--- a/Source/FSD/Public/DroneCombatState.h
+++ b/Source/FSD/Public/DroneCombatState.h
@@ -2,0 +3 @@
+#include "GameplayTagContainer.h"
@@ -8,0 +10,8 @@ class UDroneCombatState : public UDroneStateComponentBase {
+public:
+protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FGameplayTagQuery AttackOnOrderQuery;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FGameplayTagQuery AttackOnSightQuery;
+    
diff --git a/Source/FSD/Public/DroneControllerBase.h b/Source/FSD/Public/DroneControllerBase.h
index b43331b1..011b62d3 100644
--- a/Source/FSD/Public/DroneControllerBase.h
+++ b/Source/FSD/Public/DroneControllerBase.h
@@ -7 +7 @@
-class ADroneBase;
+class AFSDPlayerState;
@@ -14,5 +14,3 @@ public:
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
-    TArray<APlayerCharacter*> ControllingPlayers;
-    
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
-    ADroneBase* ControlledDrone;
+protected:
+    UPROPERTY(EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
+    TArray<TWeakObjectPtr<APlayerCharacter>> ControllingPlayers;
@@ -19,0 +18 @@ public:
+public:
@@ -22 +21 @@ public:
-    void OnShout(APlayerCharacter* ShoutingPlayer);
+    void OnShout(APlayerCharacter* Player);
@@ -28 +27 @@ public:
-    void OnSalute(APlayerCharacter* aCharacater);
+    void OnSalute(APlayerCharacter* Player);
@@ -32,0 +32,6 @@ public:
+    UFUNCTION(BlueprintCallable)
+    void OnPlayerLeave(AFSDPlayerState* State);
+    
+    UFUNCTION(BlueprintCallable)
+    void OnPlayerJoin(APlayerCharacter* Player);
+    
diff --git a/Source/FSD/Public/DroneDefendSatate.h b/Source/FSD/Public/DroneDefendSatate.h
deleted file mode 100644
index a83ed254..00000000
--- a/Source/FSD/Public/DroneDefendSatate.h
+++ /dev/null
@@ -1,12 +0,0 @@
-#pragma once
-#include "CoreMinimal.h"
-#include "DroneStateComponentBase.h"
-#include "DroneDefendSatate.generated.h"
-
-UCLASS(Blueprintable, ClassGroup=Custom, meta=(BlueprintSpawnableComponent))
-class UDroneDefendSatate : public UDroneStateComponentBase {
-    GENERATED_BODY()
-public:
-    UDroneDefendSatate();
-};
-
diff --git a/Source/FSD/Public/DroneLightSetting.h b/Source/FSD/Public/DroneLightSetting.h
new file mode 100644
index 00000000..8fb5ce1c
--- /dev/null
+++ b/Source/FSD/Public/DroneLightSetting.h
@@ -0,0 +1,21 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UObject/NoExportTypes.h"
+#include "DroneLightSetting.generated.h"
+
+USTRUCT(BlueprintType)
+struct FDroneLightSetting {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FColor Color;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float Intensity;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float Radius;
+    
+    FSD_API FDroneLightSetting();
+};
+
diff --git a/Source/FSD/Public/DroneMiningState.h b/Source/FSD/Public/DroneMiningState.h
index 0d28d7f4..538c0fa0 100644
--- a/Source/FSD/Public/DroneMiningState.h
+++ b/Source/FSD/Public/DroneMiningState.h
@@ -5,0 +6,3 @@
+class UDroneMiningToolBase;
+class UTerrainMaterial;
+
@@ -8,0 +12,26 @@ class UDroneMiningState : public UDroneStateComponentBase {
+public:
+protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    UDroneMiningToolBase* DroneMiningTool;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    UTerrainMaterial* HeartStoneMateiral;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float StartMiningRange;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float MiningRange;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float SameHitRadius;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float MineRadius;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    int32 MiningStrength;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float EmbeddedSearchRadius;
+    
diff --git a/Source/FSD/Public/DroneReviveState.h b/Source/FSD/Public/DroneReviveState.h
deleted file mode 100644
index 422de273..00000000
--- a/Source/FSD/Public/DroneReviveState.h
+++ /dev/null
@@ -1,12 +0,0 @@
-#pragma once
-#include "CoreMinimal.h"
-#include "DroneStateComponentBase.h"
-#include "DroneReviveState.generated.h"
-
-UCLASS(Blueprintable, ClassGroup=Custom, meta=(BlueprintSpawnableComponent))
-class UDroneReviveState : public UDroneStateComponentBase {
-    GENERATED_BODY()
-public:
-    UDroneReviveState();
-};
-
diff --git a/Source/FSD/Public/DroneStream.h b/Source/FSD/Public/DroneStream.h
index 9b6af13f..914ca8eb 100644
--- a/Source/FSD/Public/DroneStream.h
+++ b/Source/FSD/Public/DroneStream.h
@@ -6,0 +7 @@
+class ABosco;
@@ -30,0 +32,3 @@ protected:
+    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
+    void Receive_OnAbilityDataSet();
+    
@@ -36,0 +41,3 @@ protected:
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    ABosco* GetBosco() const;
+    
diff --git a/Source/FSD/Public/DroneUseAbillityState.h b/Source/FSD/Public/DroneUseAbillityState.h
deleted file mode 100644
index 03b29c88..00000000
--- a/Source/FSD/Public/DroneUseAbillityState.h
+++ /dev/null
@@ -1,12 +0,0 @@
-#pragma once
-#include "CoreMinimal.h"
-#include "DroneStateComponentBase.h"
-#include "DroneUseAbillityState.generated.h"
-
-UCLASS(Blueprintable, ClassGroup=Custom, meta=(BlueprintSpawnableComponent))
-class UDroneUseAbillityState : public UDroneStateComponentBase {
-    GENERATED_BODY()
-public:
-    UDroneUseAbillityState();
-};
-
diff --git a/Source/FSD/Public/DropSpikeTrackingSubsystem.h b/Source/FSD/Public/DropSpikeTrackingSubsystem.h
new file mode 100644
index 00000000..dacbc475
--- /dev/null
+++ b/Source/FSD/Public/DropSpikeTrackingSubsystem.h
@@ -0,0 +1,18 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "Subsystems/WorldSubsystem.h"
+#include "DropSpikeTrackingSubsystem.generated.h"
+
+UCLASS(Blueprintable)
+class UDropSpikeTrackingSubsystem : public UWorldSubsystem {
+    GENERATED_BODY()
+public:
+    UDropSpikeTrackingSubsystem();
+    UFUNCTION(BlueprintCallable)
+    void IncrementSpikeCount();
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    int32 GetSpikeCount() const;
+    
+};
+
diff --git a/Source/FSD/Public/EArmorMeshType.h b/Source/FSD/Public/EArmorMeshType.h
new file mode 100644
index 00000000..328a96fb
--- /dev/null
+++ b/Source/FSD/Public/EArmorMeshType.h
@@ -0,0 +1,13 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "EArmorMeshType.generated.h"
+
+UENUM(BlueprintType)
+enum class EArmorMeshType : uint8 {
+    None,
+    Default,
+    DefaultBeardCompatible,
+    Sleeveless = 0x4,
+    SleevelessBeardCompatible = 0x8,
+};
+
diff --git a/Source/FSD/Public/ECleanedStatus.h b/Source/FSD/Public/ECleanedStatus.h
new file mode 100644
index 00000000..02952c1e
--- /dev/null
+++ b/Source/FSD/Public/ECleanedStatus.h
@@ -0,0 +1,10 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "ECleanedStatus.generated.h"
+
+UENUM(BlueprintType)
+enum ECleanedStatus {
+    EInfected,
+    EVacuumed,
+};
+
diff --git a/Source/FSD/Public/EDroneState.h b/Source/FSD/Public/EDroneState.h
index 9e9e3b2b..b8470122 100644
--- a/Source/FSD/Public/EDroneState.h
+++ b/Source/FSD/Public/EDroneState.h
@@ -8 +7,0 @@ enum class EDroneState : uint8 {
-    ECombat,
@@ -10 +9,2 @@ enum class EDroneState : uint8 {
-    EReviving,
+    ELight,
+    EMax,
diff --git a/Source/FSD/Public/EEnemyPlacementMask.h b/Source/FSD/Public/EEnemyPlacementMask.h
deleted file mode 100644
index 5153b998..00000000
--- a/Source/FSD/Public/EEnemyPlacementMask.h
+++ /dev/null
@@ -1,11 +0,0 @@
-#pragma once
-#include "CoreMinimal.h"
-#include "EEnemyPlacementMask.generated.h"
-
-UENUM(BlueprintType)
-enum class EEnemyPlacementMask : uint8 {
-    Ground,
-    Spawner,
-    Cieling,
-};
-
diff --git a/Source/FSD/Public/EHUDVisibilityGroups.h b/Source/FSD/Public/EHUDVisibilityGroups.h
index da12c213..3768c0d3 100644
--- a/Source/FSD/Public/EHUDVisibilityGroups.h
+++ b/Source/FSD/Public/EHUDVisibilityGroups.h
@@ -21,0 +22 @@ enum class EHUDVisibilityGroups : uint8 {
+    VersionNumber,
diff --git a/Source/FSD/Public/EMeshAttachType.h b/Source/FSD/Public/EMeshAttachType.h
new file mode 100644
index 00000000..57088681
--- /dev/null
+++ b/Source/FSD/Public/EMeshAttachType.h
@@ -0,0 +1,10 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "EMeshAttachType.generated.h"
+
+UENUM(BlueprintType)
+enum EMeshAttachType {
+    ECharacterMesh,
+    ECamera,
+};
+
diff --git a/Source/FSD/Public/EMovementCustomMode.h b/Source/FSD/Public/EMovementCustomMode.h
index 29be0f3b..b505c67b 100644
--- a/Source/FSD/Public/EMovementCustomMode.h
+++ b/Source/FSD/Public/EMovementCustomMode.h
@@ -10,0 +11 @@ enum EMovementCustomMode {
+    MOVE_Custom_JetBoots,
diff --git a/Source/FSD/Public/EWeakpointGlowMode.h b/Source/FSD/Public/EWeakpointGlowMode.h
new file mode 100644
index 00000000..75099765
--- /dev/null
+++ b/Source/FSD/Public/EWeakpointGlowMode.h
@@ -0,0 +1,10 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "EWeakpointGlowMode.generated.h"
+
+UENUM(BlueprintType)
+enum class EWeakpointGlowMode : uint8 {
+    Set,
+    Additive,
+};
+
diff --git a/Source/FSD/Public/EmitterConnection.h b/Source/FSD/Public/EmitterConnection.h
new file mode 100644
index 00000000..b7800a54
--- /dev/null
+++ b/Source/FSD/Public/EmitterConnection.h
@@ -0,0 +1,17 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "EmitterConnection.generated.h"
+
+USTRUCT(BlueprintType)
+struct FEmitterConnection {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FName EmitterName;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FName VariableName;
+    
+    FSD_API FEmitterConnection();
+};
+
diff --git a/Source/FSD/Public/EncountersSpawnedDelegateDelegate.h b/Source/FSD/Public/EncountersSpawnedDelegateDelegate.h
index 9de4dc05..045d40dc 100644
--- a/Source/FSD/Public/EncountersSpawnedDelegateDelegate.h
+++ b/Source/FSD/Public/EncountersSpawnedDelegateDelegate.h
@@ -7 +7 @@ class AProceduralSetup;
-UDELEGATE(BlueprintCallable) DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FEncountersSpawnedDelegate, AProceduralSetup*, setup);
+UDELEGATE(BlueprintCallable) DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FEncountersSpawnedDelegate, AProceduralSetup*, Setup);
diff --git a/Source/FSD/Public/EnemyDescriptor.h b/Source/FSD/Public/EnemyDescriptor.h
index 1e62a728..43ce4789 100644
--- a/Source/FSD/Public/EnemyDescriptor.h
+++ b/Source/FSD/Public/EnemyDescriptor.h
@@ -66,3 +65,0 @@ protected:
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
-    int32 PlacementCategories;
-    
diff --git a/Source/FSD/Public/FSDCheatManager.h b/Source/FSD/Public/FSDCheatManager.h
index 89dd9e40..bdf768d7 100644
--- a/Source/FSD/Public/FSDCheatManager.h
+++ b/Source/FSD/Public/FSDCheatManager.h
@@ -86 +86 @@ public:
-    void Server_Refresh_Daily_Special();
+    void Server_Refresh_Daily_Special(int32 Index);
@@ -517 +517 @@ public:
-    void C_Refresh_Daily_Special();
+    void C_Refresh_Daily_Special(int32 Index);
@@ -587,0 +588,3 @@ public:
+    UFUNCTION(BlueprintCallable, Exec)
+    void C_JetBoots_Enable();
+    
@@ -596,0 +600,3 @@ public:
+    UFUNCTION(BlueprintCallable, Exec)
+    void C_IncreasePlagueInfection(float Increment);
+    
diff --git a/Source/FSD/Public/FSDEvent.h b/Source/FSD/Public/FSDEvent.h
index 43160389..3b860517 100644
--- a/Source/FSD/Public/FSDEvent.h
+++ b/Source/FSD/Public/FSDEvent.h
@@ -9,0 +10 @@
+#include "JettyBootEventSettings.h"
@@ -94,0 +96,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FJettyBootEventSettings JettyBootSettings;
+    
diff --git a/Source/FSD/Public/FSDEventManager.h b/Source/FSD/Public/FSDEventManager.h
index 666fc144..ca84afaa 100644
--- a/Source/FSD/Public/FSDEventManager.h
+++ b/Source/FSD/Public/FSDEventManager.h
@@ -7,0 +8 @@
+#include "JettyBootEventSettings.h"
@@ -53,0 +55,3 @@ public:
+    UFUNCTION(BlueprintCallable)
+    void TryGetJettyBootSettings(bool& OutHasSettings, FJettyBootEventSettings& OutSettings);
+    
diff --git a/Source/FSD/Public/FSDGameInstance.h b/Source/FSD/Public/FSDGameInstance.h
index 5a4cef74..4f5151f1 100644
--- a/Source/FSD/Public/FSDGameInstance.h
+++ b/Source/FSD/Public/FSDGameInstance.h
@@ -52,0 +53 @@ class APlayerCharacter;
+class APlayerController;
@@ -98 +99 @@ public:
-    FTemporaryBuffChanged OnTemporaryBuffChanged;
+    FTemporaryBuffChanged OnTemporaryBuffAdded;
@@ -444 +445 @@ protected:
-    UTemporaryBuff* TemporaryBuff;
+    TArray<UTemporaryBuff*> TemporaryBuffs;
@@ -557 +558 @@ public:
-    void RemoveRemporaryBuff();
+    void RemoveBosco();
@@ -560 +561 @@ public:
-    void RemoveBosco();
+    void RemoveAllTemporaryBuff(APlayerController* PlayerController);
@@ -564,0 +566,3 @@ public:
+    UFUNCTION(BlueprintCallable)
+    void PreClientTravelCleanup(APlayerController* PlayerController);
+    
@@ -617,0 +622,3 @@ public:
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    bool HasRandomBeerBuff() const;
+    
@@ -641,0 +649,3 @@ public:
+    UFUNCTION(BlueprintCallable, meta=(WorldContext="WorldContextObject"))
+    static FString GetSeedString(UObject* WorldContextObject);
+    
diff --git a/Source/FSD/Public/FSDGameState.h b/Source/FSD/Public/FSDGameState.h
index 37377859..1ad769b9 100644
--- a/Source/FSD/Public/FSDGameState.h
+++ b/Source/FSD/Public/FSDGameState.h
@@ -436 +436 @@ public:
-    bool GetMissionCompletedCreditReward(bool primary, int32& OutReward) const;
+    bool GetMissionCompletedCreditReward(bool Primary, int32& OutReward) const;
diff --git a/Source/FSD/Public/FSDGameUserSettings.h b/Source/FSD/Public/FSDGameUserSettings.h
index cae3c2f5..9f596fce 100644
--- a/Source/FSD/Public/FSDGameUserSettings.h
+++ b/Source/FSD/Public/FSDGameUserSettings.h
@@ -16,0 +17 @@
+#include "DelegateDelegate.h"
@@ -43,0 +45,3 @@ public:
+    UPROPERTY(BlueprintAssignable, BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FDelegate OnSettingsChanged;
+    
@@ -546,0 +551,6 @@ public:
+    UFUNCTION(BlueprintCallable)
+    void SetHoldToFire(bool HoldToFire);
+    
+    UFUNCTION(BlueprintCallable)
+    void SetHoldToBreakImmobilization(bool holdToBreak);
+    
@@ -818,0 +829,6 @@ public:
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    bool GetHoldToFire() const;
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    bool GetHoldToBreakImmobilization() const;
+    
diff --git a/Source/FSD/Public/FSDGameplayStatics.h b/Source/FSD/Public/FSDGameplayStatics.h
index a78ba92c..61302315 100644
--- a/Source/FSD/Public/FSDGameplayStatics.h
+++ b/Source/FSD/Public/FSDGameplayStatics.h
@@ -26 +26 @@ public:
-    static UDecalComponent* SpawnDecalData(const UObject* WorldContextObject, const FVector& Location, const FVector& upVector, const FDecalData& DecalData, bool randomRollRotation);
+    static UDecalComponent* SpawnDecalData(const UObject* WorldContextObject, const FVector& Location, const FVector& UpVector, const FDecalData& DecalData, bool randomRollRotation);
@@ -32 +32 @@ public:
-    static UDecalComponent* SpawnDecal(const UObject* WorldContextObject, UMaterialInterface* DecalMaterial, const FVector& Location, const FVector& upVector, float Size, float Duration, float FadeDuration);
+    static UDecalComponent* SpawnDecal(const UObject* WorldContextObject, UMaterialInterface* DecalMaterial, const FVector& Location, const FVector& UpVector, float Size, float Duration, float FadeDuration);
diff --git a/Source/FSD/Public/FSDLevelLoadingPersistentWidget.h b/Source/FSD/Public/FSDLevelLoadingPersistentWidget.h
index a58b2c36..8608f5ed 100644
--- a/Source/FSD/Public/FSDLevelLoadingPersistentWidget.h
+++ b/Source/FSD/Public/FSDLevelLoadingPersistentWidget.h
@@ -14 +14 @@ public:
-    void SetFadeProgress(float Fade, bool ToSpaceRig, UTexture* LoadingImage);
+    void SetFadeProgress(float fade, bool ToSpaceRig, UTexture* LoadingImage);
diff --git a/Source/FSD/Public/FSDOnlineSystemUtils.h b/Source/FSD/Public/FSDOnlineSystemUtils.h
index d6199fb3..b0044851 100644
--- a/Source/FSD/Public/FSDOnlineSystemUtils.h
+++ b/Source/FSD/Public/FSDOnlineSystemUtils.h
@@ -6,0 +7 @@
+#include "OnGetIsUpdatePendingBPDelegate.h"
@@ -47,0 +49,3 @@ public:
+    UFUNCTION(BlueprintCallable)
+    static void GetIsUpdatePending(const FOnGetIsUpdatePendingBP& Delegate);
+    
diff --git a/Source/FSD/Public/FSDPlayerController.h b/Source/FSD/Public/FSDPlayerController.h
index d57e6445..b8e9c33f 100644
--- a/Source/FSD/Public/FSDPlayerController.h
+++ b/Source/FSD/Public/FSDPlayerController.h
@@ -2,0 +3 @@
+#include "UObject/NoExportTypes.h"
@@ -3,0 +5 @@
+#include "EArmorDamageType.h"
@@ -14,0 +17 @@ class APlayerCharacter;
+class UDamageComponent;
@@ -21,0 +25 @@ class UPlayerCharacterID;
+class USimpleArmorDamageComponent;
@@ -24 +27,0 @@ class USoundMix;
-class UTemporaryBuff;
@@ -130,0 +134,3 @@ public:
+    UFUNCTION(BlueprintCallable, Reliable, Server)
+    void Server_TakeDamageFrom(UDamageComponent* Damage, FVector Location);
+    
@@ -151,0 +158,3 @@ public:
+    UFUNCTION(BlueprintCallable, Reliable, Server)
+    void Server_Relay_SetArmorIndexDestroyed(USimpleArmorDamageComponent* ArmorComponent, int32 Index, EArmorDamageType DamageType);
+    
@@ -159,5 +167,0 @@ protected:
-public:
-    UFUNCTION(BlueprintCallable, Reliable, Server)
-    void Server_ActivateTemporaryBuff(UTemporaryBuff* buff);
-    
-protected:
diff --git a/Source/FSD/Public/FSDSaveGame.h b/Source/FSD/Public/FSDSaveGame.h
index 177f274e..33eb642c 100644
--- a/Source/FSD/Public/FSDSaveGame.h
+++ b/Source/FSD/Public/FSDSaveGame.h
@@ -26,0 +27 @@
+#include "JettyBootsSave.h"
@@ -150,0 +152,3 @@ public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FCharacterPerksSave RandomEquippedPerkLoadout;
+    
@@ -156,0 +161,3 @@ public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FJettyBootsSave JettyBootsSave;
+    
@@ -223,0 +231,6 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FUpgradeLoadout RandomItemUpgradeLoadouts;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
+    bool bIgnoreRandomLoadout;
+    
@@ -414,0 +428,3 @@ public:
+    UFUNCTION(BlueprintCallable)
+    void SetIgnoreRandomLoadout(bool inIgnoreRandomLoadout);
+    
diff --git a/Source/FSD/Public/FSDWidgetBlueprintLibrary.h b/Source/FSD/Public/FSDWidgetBlueprintLibrary.h
index a48b19d8..047fc9c4 100644
--- a/Source/FSD/Public/FSDWidgetBlueprintLibrary.h
+++ b/Source/FSD/Public/FSDWidgetBlueprintLibrary.h
@@ -208,0 +209,3 @@ public:
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    static bool AreWidgetsIntersecting(const UWidget* InWidget1, const UWidget* InWidget2);
+    
diff --git a/Source/FSD/Public/FacilityObjective.h b/Source/FSD/Public/FacilityObjective.h
index 46e14126..92b29e47 100644
--- a/Source/FSD/Public/FacilityObjective.h
+++ b/Source/FSD/Public/FacilityObjective.h
@@ -114 +114 @@ public:
-    void SpawnFacilityEncounters(AProceduralSetup* setup, UEncounterManager* Encounters, UDebrisPositioning* Positioning);
+    void SpawnFacilityEncounters(AProceduralSetup* Setup, UEncounterManager* Encounters, UDebrisPositioning* Positioning);
@@ -117 +117 @@ public:
-    TArray<FTransform> SpawnEndBattleTurrets(int32 amountOfTurrets, AProceduralSetup* setup, UDebrisPositioning* DebrisPositioning, TSubclassOf<AActor> terrainPlacement, const TArray<AActor*>& existingTurrets, bool& success);
+    TArray<FTransform> SpawnEndBattleTurrets(int32 amountOfTurrets, AProceduralSetup* Setup, UDebrisPositioning* DebrisPositioning, TSubclassOf<AActor> terrainPlacement, const TArray<AActor*>& existingTurrets, bool& success);
@@ -133 +133 @@ public:
-    void Receive_AddEnemies(AProceduralSetup* setup);
+    void Receive_AddEnemies(AProceduralSetup* Setup);
@@ -139 +139 @@ public:
-    AActor* PlaceObjectInRoom(AProceduralSetup* setup, const FRoomNode& RoomNode, UDebrisPositioning* Positioning, TSubclassOf<AActor> placementActor, FRandomStream RandomStream, const bool checkImportantLocations);
+    AActor* PlaceObjectInRoom(AProceduralSetup* Setup, const FRoomNode& RoomNode, UDebrisPositioning* Positioning, TSubclassOf<AActor> placementActor, FRandomStream RandomStream, const bool checkImportantLocations);
@@ -165 +165 @@ public:
-    FTransform GetTurretGoal(AProceduralSetup* setup, const FVector& Origin, float idealRange, UDebrisPositioning* DebrisPositioning, TSubclassOf<AActor> terrainPlacement, bool& success);
+    FTransform GetTurretGoal(AProceduralSetup* Setup, const FVector& Origin, float idealRange, UDebrisPositioning* DebrisPositioning, TSubclassOf<AActor> terrainPlacement, bool& success);
@@ -174 +174 @@ public:
-    void GetObjectTransformInRoom(FTransform& Transform, AProceduralSetup* setup, const FRoomNode& RoomNode, UDebrisPositioning* Positioning, TSubclassOf<AActor> placementActor, FRandomStream RandomStream, const bool checkImportantLocations);
+    void GetObjectTransformInRoom(FTransform& Transform, AProceduralSetup* Setup, const FRoomNode& RoomNode, UDebrisPositioning* Positioning, TSubclassOf<AActor> placementActor, FRandomStream RandomStream, const bool checkImportantLocations);
@@ -194 +194 @@ public:
-    void DropOverCharger(AProceduralSetup* setup, int32 roomIndex, const FVector& facilityLocation, float idealRange, float idealZDistance, UDebrisPositioning* DebrisPositioning, TSubclassOf<ARessuplyPod> NewGeneratorClass);
+    void DropOverCharger(AProceduralSetup* Setup, int32 roomIndex, const FVector& facilityLocation, float idealRange, float idealZDistance, UDebrisPositioning* DebrisPositioning, TSubclassOf<ARessuplyPod> NewGeneratorClass);
diff --git a/Source/FSD/Public/FacilityTurret.h b/Source/FSD/Public/FacilityTurret.h
index 4e971360..c41b5f9e 100644
--- a/Source/FSD/Public/FacilityTurret.h
+++ b/Source/FSD/Public/FacilityTurret.h
@@ -14 +14 @@ UCLASS(Blueprintable)
-class FSD_API AFacilityTurret : public AEnemyPawn {
+class AFacilityTurret : public AEnemyPawn {
@@ -61,0 +62,3 @@ protected:
+    UFUNCTION(BlueprintCallable)
+    void TurnOffMesh();
+    
diff --git a/Source/FSD/Public/FoamPuddle.h b/Source/FSD/Public/FoamPuddle.h
index 633920b4..fc14c6bf 100644
--- a/Source/FSD/Public/FoamPuddle.h
+++ b/Source/FSD/Public/FoamPuddle.h
@@ -6,0 +7 @@
+#include "ChangeVacuumStateDelegateDelegate.h"
@@ -32,0 +34,3 @@ protected:
+    UPROPERTY(BlueprintAssignable, BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FChangeVacuumStateDelegate OnChangeVacuumStateDelegate;
+    
@@ -36 +39,0 @@ protected:
-private:
@@ -87,0 +91,3 @@ private:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool UsesLocalSpace;
+    
@@ -91,0 +98,5 @@ public:
+protected:
+    UFUNCTION(BlueprintCallable)
+    void SetState(EVacuumState NewState);
+    
+public:
@@ -98 +109 @@ public:
-private:
+protected:
diff --git a/Source/FSD/Public/FoamPuddle_WalkingPlagueheart.h b/Source/FSD/Public/FoamPuddle_WalkingPlagueheart.h
new file mode 100644
index 00000000..36c66bee
--- /dev/null
+++ b/Source/FSD/Public/FoamPuddle_WalkingPlagueheart.h
@@ -0,0 +1,15 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "FoamPuddle.h"
+#include "FoamPuddle_WalkingPlagueheart.generated.h"
+
+UCLASS(Blueprintable)
+class AFoamPuddle_WalkingPlagueheart : public AFoamPuddle {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float FoamCleanRadius;
+    
+    AFoamPuddle_WalkingPlagueheart();
+};
+
diff --git a/Source/FSD/Public/FrozenStateComponent.h b/Source/FSD/Public/FrozenStateComponent.h
index 38e2d743..6233d9c0 100644
--- a/Source/FSD/Public/FrozenStateComponent.h
+++ b/Source/FSD/Public/FrozenStateComponent.h
@@ -29,0 +30,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float HoldToBreakTime;
+    
diff --git a/Source/FSD/Public/GDMissionStats.h b/Source/FSD/Public/GDMissionStats.h
index 7950192c..8f5fed06 100644
--- a/Source/FSD/Public/GDMissionStats.h
+++ b/Source/FSD/Public/GDMissionStats.h
@@ -107,0 +108,3 @@ public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    UMissionStat* JettyBootCreditsSpent;
+    
diff --git a/Source/FSD/Public/GDStats.h b/Source/FSD/Public/GDStats.h
index 75414098..d689f813 100644
--- a/Source/FSD/Public/GDStats.h
+++ b/Source/FSD/Public/GDStats.h
@@ -124,0 +125,6 @@ public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    UPawnStat* CritChance;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    UPawnStat* CritDamageBonus;
+    
diff --git a/Source/FSD/Public/GameEvent.h b/Source/FSD/Public/GameEvent.h
index a3c30659..8deefad5 100644
--- a/Source/FSD/Public/GameEvent.h
+++ b/Source/FSD/Public/GameEvent.h
@@ -249 +249 @@ public:
-    FTransform DebreePositionPoint(AProceduralSetup* setup, const FVector& fromLocation, float MinDistance, float desiredDistance, UDebrisPositioning* DebrisPositioning, TSubclassOf<AActor> terrainPlacement, float maxPathLength);
+    FTransform DebreePositionPoint(AProceduralSetup* Setup, const FVector& fromLocation, float MinDistance, float desiredDistance, UDebrisPositioning* DebrisPositioning, TSubclassOf<AActor> terrainPlacement, float maxPathLength);
diff --git a/Source/FSD/Public/GeneratedMission.h b/Source/FSD/Public/GeneratedMission.h
index b8344c00..f11fc390 100644
--- a/Source/FSD/Public/GeneratedMission.h
+++ b/Source/FSD/Public/GeneratedMission.h
@@ -73,0 +74,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool CanHaveMutators;
+    
diff --git a/Source/FSD/Public/GuntowerActivationPlatform.h b/Source/FSD/Public/GuntowerActivationPlatform.h
index e37ebc76..05d2b9be 100644
--- a/Source/FSD/Public/GuntowerActivationPlatform.h
+++ b/Source/FSD/Public/GuntowerActivationPlatform.h
@@ -16 +16 @@ class USceneComponent;
-class USkeletalMeshComponent;
+class UStaticMeshComponent;
@@ -19 +19 @@ UCLASS(Blueprintable)
-class FSD_API AGuntowerActivationPlatform : public AActor {
+class AGuntowerActivationPlatform : public AActor {
@@ -26 +26 @@ public:
-    USkeletalMeshComponent* SKMesh;
+    UStaticMeshComponent* STMesh;
@@ -117,0 +118,3 @@ public:
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    int32 GetPlayerCount() const;
+    
diff --git a/Source/FSD/Public/HackableBuildingObjective.h b/Source/FSD/Public/HackableBuildingObjective.h
index c2d0dbcf..1f69f630 100644
--- a/Source/FSD/Public/HackableBuildingObjective.h
+++ b/Source/FSD/Public/HackableBuildingObjective.h
@@ -18 +18 @@ public:
-    static void DropOverCharger(AProceduralSetup* setup, const FVector& buildingLocation, float idealRange, float idealZDistance, UDebrisPositioning* DebrisPositioning, TSubclassOf<ARessuplyPod> generatorClass);
+    static void DropOverCharger(AProceduralSetup* Setup, const FVector& buildingLocation, float idealRange, float idealZDistance, UDebrisPositioning* DebrisPositioning, TSubclassOf<ARessuplyPod> generatorClass);
diff --git a/Source/FSD/Public/HackingToolItem.h b/Source/FSD/Public/HackingToolItem.h
index 2b9a8b10..5e92973b 100644
--- a/Source/FSD/Public/HackingToolItem.h
+++ b/Source/FSD/Public/HackingToolItem.h
@@ -28 +28,7 @@ protected:
-    void ReceiveClick();
+    void ReceivedActionReleased();
+    
+    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
+    void ReceivedActionPressed();
+    
+    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
+    void ReceiveActionClick();
diff --git a/Source/FSD/Public/HackingToolWidget.h b/Source/FSD/Public/HackingToolWidget.h
index 47edd1a4..64a8d051 100644
--- a/Source/FSD/Public/HackingToolWidget.h
+++ b/Source/FSD/Public/HackingToolWidget.h
@@ -55 +55,7 @@ protected:
-    void ReceiveClick();
+    void ReceiveActionReleased();
+    
+    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
+    void ReceiveActionPressed();
+    
+    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
+    void ReceiveActionClick();
diff --git a/Source/FSD/Public/HackingUsableComponent.h b/Source/FSD/Public/HackingUsableComponent.h
index f435c095..8138946a 100644
--- a/Source/FSD/Public/HackingUsableComponent.h
+++ b/Source/FSD/Public/HackingUsableComponent.h
@@ -4,0 +5 @@
+#include "ItemDelegateDelegate.h"
@@ -19,0 +21,3 @@ public:
+    UPROPERTY(BlueprintAssignable, BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FItemDelegate BeingHackedUpdated;
+    
diff --git a/Source/FSD/Public/HealthComponent.h b/Source/FSD/Public/HealthComponent.h
index 3e340b03..a4957f04 100644
--- a/Source/FSD/Public/HealthComponent.h
+++ b/Source/FSD/Public/HealthComponent.h
@@ -80,0 +81,3 @@ public:
+    UFUNCTION(BlueprintCallable)
+    float TakePercentDamage(float PercentOfMax, const FDamageData& DamageData);
+    
@@ -95 +98 @@ public:
-    UFUNCTION(BlueprintCallable, BlueprintPure)
+	UFUNCTION(BlueprintCallable)
@@ -98 +101 @@ public:
-	//UFUNCTION(BlueprintCallable)
+    //UFUNCTION(BlueprintCallable, BlueprintPure)
diff --git a/Source/FSD/Public/HeatMaterialComponent.h b/Source/FSD/Public/HeatMaterialComponent.h
index b39f8f29..74b3ef23 100644
--- a/Source/FSD/Public/HeatMaterialComponent.h
+++ b/Source/FSD/Public/HeatMaterialComponent.h
@@ -26 +26 @@ protected:
-    void OnTemperatureChanged(float Temperature, bool Overheated);
+    void OnTemperatureChanged(float Temperature, bool overHeated);
diff --git a/Source/FSD/Public/HitReactionComponent.h b/Source/FSD/Public/HitReactionComponent.h
index 83de5692..3652b37a 100644
--- a/Source/FSD/Public/HitReactionComponent.h
+++ b/Source/FSD/Public/HitReactionComponent.h
@@ -21,0 +22,3 @@ public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool AllowHitReactions;
+    
diff --git a/Source/FSD/Public/HitscanBaseComponent.h b/Source/FSD/Public/HitscanBaseComponent.h
index 7f40994a..3d541a1b 100644
--- a/Source/FSD/Public/HitscanBaseComponent.h
+++ b/Source/FSD/Public/HitscanBaseComponent.h
@@ -39 +39 @@ protected:
-    float ArmorDamageMultiplier;
+    float armorDamageMultiplier;
diff --git a/Source/FSD/Public/HookData.h b/Source/FSD/Public/HookData.h
new file mode 100644
index 00000000..7867216e
--- /dev/null
+++ b/Source/FSD/Public/HookData.h
@@ -0,0 +1,18 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "Engine/NetSerialization.h"
+#include "HookData.generated.h"
+
+USTRUCT(BlueprintType)
+struct FHookData {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FVector_NetQuantize TargetLocation;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool IsExtending;
+    
+    FSD_API FHookData();
+};
+
diff --git a/Source/FSD/Public/InfectedStateComponent.h b/Source/FSD/Public/InfectedStateComponent.h
index 3678df2b..bdb75029 100644
--- a/Source/FSD/Public/InfectedStateComponent.h
+++ b/Source/FSD/Public/InfectedStateComponent.h
@@ -40,0 +41,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float HoldToBreakTime;
+    
diff --git a/Source/FSD/Public/InfectionPoint.h b/Source/FSD/Public/InfectionPoint.h
new file mode 100644
index 00000000..bdca598d
--- /dev/null
+++ b/Source/FSD/Public/InfectionPoint.h
@@ -0,0 +1,17 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "InfectionPoint.generated.h"
+
+USTRUCT(BlueprintType)
+struct FInfectionPoint {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
+    bool IsInfected;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
+    bool IsVacuumed;
+    
+    FSD_API FInfectionPoint();
+};
+
diff --git a/Source/FSD/Public/InfectionPointCleaningComponent.h b/Source/FSD/Public/InfectionPointCleaningComponent.h
new file mode 100644
index 00000000..0dc960bd
--- /dev/null
+++ b/Source/FSD/Public/InfectionPointCleaningComponent.h
@@ -0,0 +1,75 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "Components/ActorComponent.h"
+#include "DelegateDelegate.h"
+#include "ECleanedStatus.h"
+#include "InfectionPointCleaningComponent.generated.h"
+
+class UDifficultySetting;
+class UMeshComponent;
+class UNiagaraSystem;
+
+UCLASS(Blueprintable, ClassGroup=Custom, meta=(BlueprintSpawnableComponent))
+class UInfectionPointCleaningComponent : public UActorComponent {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintAssignable, BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FDelegate OnPointVacuumed;
+    
+    UPROPERTY(BlueprintAssignable, BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FDelegate OnPointFoamed;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool bIsInitialized;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool bHasBeenReplicated;
+    
+protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TMap<UDifficultySetting*, int32> DifficultyModifiers;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    UNiagaraSystem* CleanedParticles;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float particleScale;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool outerLayerCleaned;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, ReplicatedUsing=OnRep_InfectionPoints, meta=(AllowPrivateAccess=true))
+    TArray<TEnumAsByte<ECleanedStatus>> InfectionPoints;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
+    TArray<UMeshComponent*> OuterLayerMeshes;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
+    TArray<UMeshComponent*> InnerLayerMeshes;
+    
+public:
+    UInfectionPointCleaningComponent();
+    virtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;
+    
+    UFUNCTION(BlueprintAuthorityOnly, BlueprintCallable)
+    void Reset();
+    
+protected:
+    UFUNCTION(BlueprintCallable)
+    void OnRep_InfectionPoints(TArray<TEnumAsByte<ECleanedStatus>> oldInfectionPoints);
+    
+public:
+    UFUNCTION(BlueprintCallable)
+    void InitInfectionPoints(const TArray<UMeshComponent*>& outerMeshes, const TArray<UMeshComponent*>& innerMeshes);
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    int32 GetRequiredCleanCount() const;
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    int32 GetRemainingInfectedPoints() const;
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    int32 GetNumberOfInfectedPoints() const;
+    
+};
+
diff --git a/Source/FSD/Public/InputFunctionLibrary.h b/Source/FSD/Public/InputFunctionLibrary.h
index 3ded5bca..01175214 100644
--- a/Source/FSD/Public/InputFunctionLibrary.h
+++ b/Source/FSD/Public/InputFunctionLibrary.h
@@ -41,0 +42,3 @@ public:
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    static bool IsAnyInputActionDown(const APlayerController* InPlayerController, const TArray<FName>& InActionNames);
+    
diff --git a/Source/FSD/Public/InstancedNiagaraComponent.h b/Source/FSD/Public/InstancedNiagaraComponent.h
index 4bdbe91c..b2908ebe 100644
--- a/Source/FSD/Public/InstancedNiagaraComponent.h
+++ b/Source/FSD/Public/InstancedNiagaraComponent.h
@@ -4,0 +5 @@
+#include "EmitterConnection.h"
@@ -13,0 +15,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TArray<FEmitterConnection> Emitters;
+    
diff --git a/Source/FSD/Public/InterpolatedFirstPersonStaticMeshComponent.h b/Source/FSD/Public/InterpolatedFirstPersonStaticMeshComponent.h
new file mode 100644
index 00000000..033d9d05
--- /dev/null
+++ b/Source/FSD/Public/InterpolatedFirstPersonStaticMeshComponent.h
@@ -0,0 +1,12 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "FirstPersonStaticMeshComponent.h"
+#include "InterpolatedFirstPersonStaticMeshComponent.generated.h"
+
+UCLASS(Blueprintable, EditInlineNew, ClassGroup=Custom, meta=(BlueprintSpawnableComponent))
+class UInterpolatedFirstPersonStaticMeshComponent : public UFirstPersonStaticMeshComponent {
+    GENERATED_BODY()
+public:
+    UInterpolatedFirstPersonStaticMeshComponent();
+};
+
diff --git a/Source/FSD/Public/InventoryComponent.h b/Source/FSD/Public/InventoryComponent.h
index 830435ce..69acf74c 100644
--- a/Source/FSD/Public/InventoryComponent.h
+++ b/Source/FSD/Public/InventoryComponent.h
@@ -181,0 +182,3 @@ public:
+    UFUNCTION(BlueprintCallable)
+    AItem* GetOrCreateUnlistedItem(TSubclassOf<AItem> ItemType);
+    
diff --git a/Source/FSD/Public/Item.h b/Source/FSD/Public/Item.h
index 946cb90f..183994f4 100644
--- a/Source/FSD/Public/Item.h
+++ b/Source/FSD/Public/Item.h
@@ -8,0 +9 @@
+#include "DelegateDelegate.h"
@@ -47,0 +49,6 @@ public:
+    UPROPERTY(BlueprintAssignable, BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FDelegate OnEqipped;
+    
+    UPROPERTY(BlueprintAssignable, BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FDelegate OnUnequipped;
+    
@@ -104 +111 @@ protected:
-    bool Overheated;
+    bool overHeated;
@@ -196 +203 @@ public:
-    void OnTemperatureChanged(float Temperature, bool NewOverheated);
+    void OnTemperatureChanged(float Temperature, bool NewOverHeated);
diff --git a/Source/FSD/Public/JetBootsBox.h b/Source/FSD/Public/JetBootsBox.h
new file mode 100644
index 00000000..06a6be24
--- /dev/null
+++ b/Source/FSD/Public/JetBootsBox.h
@@ -0,0 +1,26 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "GameFramework/Actor.h"
+#include "ActorTrackingCheatInterface.h"
+#include "JetBootsBox.generated.h"
+
+class USpecialEvent;
+class UTerrainPlacementComponent;
+
+UCLASS(Blueprintable)
+class AJetBootsBox : public AActor, public IActorTrackingCheatInterface {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
+    UTerrainPlacementComponent* terrainPlacement;
+    
+protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    USpecialEvent* SpecialEvent;
+    
+public:
+    AJetBootsBox();
+    
+    // Fix for true pure virtual functions not being implemented
+};
+
diff --git a/Source/FSD/Public/JetBootsBoxSpawner.h b/Source/FSD/Public/JetBootsBoxSpawner.h
new file mode 100644
index 00000000..c32b322d
--- /dev/null
+++ b/Source/FSD/Public/JetBootsBoxSpawner.h
@@ -0,0 +1,40 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UObject/NoExportTypes.h"
+#include "GameFramework/Actor.h"
+#include "JetBootsBoxSpawner.generated.h"
+
+class AJetBootsBox;
+class UDebrisPositioning;
+class UTerrainPlacementComponent;
+
+UCLASS(Blueprintable)
+class AJetBootsBoxSpawner : public AActor {
+    GENERATED_BODY()
+public:
+protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TSoftClassPtr<AActor> JetBootsBoxClass;
+    
+    UPROPERTY(EditAnywhere, meta=(AllowPrivateAccess=true))
+    FFloatInterval SpawnIntervalFromDropPod;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    int32 MaxSpawnLocationTries;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
+    UDebrisPositioning* DebrisPositioning;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    UTerrainPlacementComponent* terrainPlacement;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
+    AJetBootsBox* JetBootsBoxInstance;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
+    UClass* JetBootsBoxClassLoaded;
+    
+public:
+    AJetBootsBoxSpawner();
+};
+
diff --git a/Source/FSD/Public/JetBootsDelegateDelegate.h b/Source/FSD/Public/JetBootsDelegateDelegate.h
new file mode 100644
index 00000000..29dbc63f
--- /dev/null
+++ b/Source/FSD/Public/JetBootsDelegateDelegate.h
@@ -0,0 +1,6 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "JetBootsDelegateDelegate.generated.h"
+
+UDELEGATE(BlueprintCallable) DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FJetBootsDelegate, float, jetFuel, bool, overHeated);
+
diff --git a/Source/FSD/Public/JetBootsMovementComponent.h b/Source/FSD/Public/JetBootsMovementComponent.h
new file mode 100644
index 00000000..b1517a39
--- /dev/null
+++ b/Source/FSD/Public/JetBootsMovementComponent.h
@@ -0,0 +1,191 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UObject/NoExportTypes.h"
+#include "Components/ActorComponent.h"
+#include "Engine/EngineTypes.h"
+#include "ECharacterCameraMode.h"
+#include "ECharacterState.h"
+#include "JetBootsDelegateDelegate.h"
+#include "JetBootsMovementComponent.generated.h"
+
+class AActor;
+class APlayerCharacter;
+class UAudioComponent;
+class UFXSystemAsset;
+class UFXSystemComponent;
+class UJetBootsSettings;
+class UNiagaraComponent;
+class UNiagaraSystem;
+class UPrimitiveComponent;
+class USkeletalMesh;
+class USkeletalMeshComponent;
+class USoundCue;
+
+UCLASS(Blueprintable, ClassGroup=Custom, meta=(BlueprintSpawnableComponent))
+class UJetBootsMovementComponent : public UActorComponent {
+    GENERATED_BODY()
+public:
+protected:
+    UPROPERTY(BlueprintAssignable, BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FJetBootsDelegate FuelUpdated;
+    
+    UPROPERTY(BlueprintAssignable, BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FJetBootsDelegate FuelUpdatedNonLocal;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    UJetBootsSettings* Settings;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    USoundCue* UseSound;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    USoundCue* DeactivatedSound;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    USoundCue* OverHeatSound;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    UAudioComponent* UseAudioComponent;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    UAudioComponent* OverHeatAudioComponent;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    UAudioComponent* DeactivatedAudioComponent;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    UAudioComponent* TP_UseAudioComponent;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    UAudioComponent* TP_OverHeatAudioComponent;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    UAudioComponent* TP_DeactivatedAudioComponent;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    UNiagaraSystem* FootParticles;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    UFXSystemAsset* FootParticlesFP;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FName FootSocketNameLeft;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FName FootSocketNameRight;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    USkeletalMesh* FootAttachMesh;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    USkeletalMeshComponent* LFootAttachMeshComponent;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    USkeletalMeshComponent* RFootAttachMeshComponent;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    UNiagaraComponent* LeftFootParticles;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    UNiagaraComponent* RightFootParticles;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    UFXSystemComponent* FPFootParticles;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
+    APlayerCharacter* Character;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float FromJumpDelay;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float FromTerrainStartDelay;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float OverHeatAtPercent;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float AddPlayerAirVelocityToThrowFactor;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, ReplicatedUsing=OnRep_CurrentJetFuel, meta=(AllowPrivateAccess=true))
+    float CurrentJetFuel;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, ReplicatedUsing=OnRep_IsUsing, meta=(AllowPrivateAccess=true))
+    bool IsUsing;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Replicated, Transient, meta=(AllowPrivateAccess=true))
+    bool isFromTakeOff;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, ReplicatedUsing=OnRep_OverHeated, meta=(AllowPrivateAccess=true))
+    bool overHeated;
+    
+public:
+    UJetBootsMovementComponent();
+    virtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;
+    
+protected:
+    UFUNCTION(BlueprintCallable, Reliable, Server)
+    void Server_SetOverheated(bool Current);
+    
+    UFUNCTION(BlueprintCallable, Reliable, Server)
+    void Server_SetIsUsing(bool Current, bool last, bool NewIsFromTakeOff);
+    
+    UFUNCTION(BlueprintCallable, Reliable, Server)
+    void Server_SetCurrentJetFuel(float Current);
+    
+public:
+    UFUNCTION(BlueprintCallable)
+    void RemoveJetBoots();
+    
+    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
+    void Receive_OnTakeOffLocal();
+    
+    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
+    void Receive_OnOverheatedChanged(bool NewOverHeated);
+    
+    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
+    void Receive_OnDestroy();
+    
+    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
+    void Receive_OnCharacterSet(APlayerCharacter* Player);
+    
+    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
+    void Receive_OnActiveChangedServer(bool IsActive, bool fromTakeOff);
+    
+    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
+    void Receive_OnActiveChangedNonLocal(bool IsActive, bool fromTakeOff);
+    
+    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
+    void Receive_OnActiveChangedLocal(bool IsActive, bool fromTakeOff);
+    
+protected:
+    UFUNCTION(BlueprintCallable)
+    void OnStateChanged(ECharacterState State);
+    
+    UFUNCTION(BlueprintCallable)
+    void OnRep_OverHeated(bool lastOverheated);
+    
+    UFUNCTION(BlueprintCallable)
+    void OnRep_IsUsing(bool lastUsing);
+    
+    UFUNCTION(BlueprintCallable)
+    void OnRep_CurrentJetFuel();
+    
+    UFUNCTION(BlueprintCallable)
+    void OnPlayerCharacterHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult& Hit);
+    
+    UFUNCTION(BlueprintCallable)
+    void OnJumpReleased();
+    
+    UFUNCTION(BlueprintCallable)
+    void OnJumpPressed();
+    
+    UFUNCTION(BlueprintCallable)
+    void OnCameraModeChanged(ECharacterCameraMode NewCameraMode, ECharacterCameraMode OldCameraMode);
+    
+public:
+    UFUNCTION(BlueprintCallable, Client, Reliable)
+    void Client_SetIsUsing(bool NewIsUsing);
+    
+};
+
diff --git a/Source/FSD/Public/JetBootsSettings.h b/Source/FSD/Public/JetBootsSettings.h
new file mode 100644
index 00000000..3cd15234
--- /dev/null
+++ b/Source/FSD/Public/JetBootsSettings.h
@@ -0,0 +1,39 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "Engine/DataAsset.h"
+#include "JetBootsSettings.generated.h"
+
+UCLASS(Blueprintable)
+class UJetBootsSettings : public UDataAsset {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float JetForce;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float AirControlSpeed;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float MaxAirSpeed;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float MaxJetFuel;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float JetFuelCost;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float JetFuelRechargeRate;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float JetFuelRechargeDelay;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float OutOfFuelRechargeDelay;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool DisableGravityWhenUsing;
+    
+    UJetBootsSettings();
+};
+
diff --git a/Source/FSD/Public/JettyBootEventSettings.h b/Source/FSD/Public/JettyBootEventSettings.h
new file mode 100644
index 00000000..5fc15371
--- /dev/null
+++ b/Source/FSD/Public/JettyBootEventSettings.h
@@ -0,0 +1,20 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "JettyBootEventSettings.generated.h"
+
+class UTexture2D;
+class UUserWidget;
+
+USTRUCT(BlueprintType)
+struct FJettyBootEventSettings {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TSoftObjectPtr<UTexture2D> JettyBootCharacter;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TSoftClassPtr<UUserWidget> JettyBootArcadeOverlay;
+    
+    FSD_API FJettyBootEventSettings();
+};
+
diff --git a/Source/FSD/Public/JettyBootNPC.h b/Source/FSD/Public/JettyBootNPC.h
new file mode 100644
index 00000000..9edd4d06
--- /dev/null
+++ b/Source/FSD/Public/JettyBootNPC.h
@@ -0,0 +1,24 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "IRandRange.h"
+#include "JettyBootNPC.generated.h"
+
+USTRUCT(BlueprintType)
+struct FJettyBootNPC {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FString CharacterName;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float HasPlayedChance;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FIRandRange ScoreInterval;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TArray<int32> StartScores;
+    
+    FSD_API FJettyBootNPC();
+};
+
diff --git a/Source/FSD/Public/JettyBootSetting.h b/Source/FSD/Public/JettyBootSetting.h
new file mode 100644
index 00000000..dddbc7e0
--- /dev/null
+++ b/Source/FSD/Public/JettyBootSetting.h
@@ -0,0 +1,21 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "IRandRange.h"
+#include "JettyBootSetting.generated.h"
+
+USTRUCT(BlueprintType)
+struct FJettyBootSetting {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FIRandRange GateCount;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FIRandRange GateSpacing;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FIRandRange GateOpeningSize;
+    
+    FSD_API FJettyBootSetting();
+};
+
diff --git a/Source/FSD/Public/JettyBootSettings.h b/Source/FSD/Public/JettyBootSettings.h
new file mode 100644
index 00000000..6e3697d7
--- /dev/null
+++ b/Source/FSD/Public/JettyBootSettings.h
@@ -0,0 +1,19 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "Engine/DataAsset.h"
+#include "JettyBootSetting.h"
+#include "JettyBootSettings.generated.h"
+
+UCLASS(Blueprintable)
+class UJettyBootSettings : public UDataAsset {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TArray<FJettyBootSetting> LevelSettings;
+    
+    UJettyBootSettings();
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    FJettyBootSetting GetLevelSetting(int32 InLevel) const;
+    
+};
+
diff --git a/Source/FSD/Public/JettyBootUsableComponent.h b/Source/FSD/Public/JettyBootUsableComponent.h
new file mode 100644
index 00000000..5b115faa
--- /dev/null
+++ b/Source/FSD/Public/JettyBootUsableComponent.h
@@ -0,0 +1,23 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "SingleUsableComponent.h"
+#include "JettyBootUsableComponent.generated.h"
+
+class APlayerCharacter;
+class UMissionStat;
+
+UCLASS(Blueprintable, ClassGroup=Custom, meta=(BlueprintSpawnableComponent))
+class FSD_API UJettyBootUsableComponent : public USingleUsableComponent {
+    GENERATED_BODY()
+public:
+protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    int32 CreditPrice;
+    
+public:
+    UJettyBootUsableComponent();
+    UFUNCTION(BlueprintCallable)
+    bool DeductCredits(APlayerCharacter* User, UMissionStat* InCreditCounter);
+    
+};
+
diff --git a/Source/FSD/Public/JettyBootsArcadeActor.h b/Source/FSD/Public/JettyBootsArcadeActor.h
new file mode 100644
index 00000000..11a10e12
--- /dev/null
+++ b/Source/FSD/Public/JettyBootsArcadeActor.h
@@ -0,0 +1,112 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UObject/NoExportTypes.h"
+#include "GameFramework/Actor.h"
+#include "JettyBootNPC.h"
+#include "JettyBootsPlayer.h"
+#include "JettyBootsReplay.h"
+#include "JettyBootsSave.h"
+#include "JettyBootsScore.h"
+#include "JettyBootsArcadeActor.generated.h"
+
+class APlayerCharacter;
+class UAnimMontage;
+class UJettyBootUsableComponent;
+class USceneComponent;
+
+UCLASS(Abstract, Blueprintable)
+class FSD_API AJettyBootsArcadeActor : public AActor {
+    GENERATED_BODY()
+public:
+protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
+    UJettyBootUsableComponent* StartGameUsable;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, ReplicatedUsing=OnRep_Player, meta=(AllowPrivateAccess=true))
+    FJettyBootsPlayer Player;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    int32 MaxDistanceToPlay;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    USceneComponent* MaxDistanceComponent;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TArray<UAnimMontage*> AnimPlaying;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TArray<UAnimMontage*> AnimFailed;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TArray<UAnimMontage*> AnimSucces;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TArray<FJettyBootNPC> HighScoreNPCs;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, ReplicatedUsing=OnRep_Save, meta=(AllowPrivateAccess=true))
+    FJettyBootsSave JettyBootsSave;
+    
+public:
+    AJettyBootsArcadeActor();
+    virtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;
+    
+    UFUNCTION(BlueprintAuthorityOnly, BlueprintCallable)
+    void SetActivePlayer(APlayerCharacter* InPlayer);
+    
+protected:
+    UFUNCTION(BlueprintCallable, Server, Unreliable)
+    void Server_ReplayPackage(const FJettyBootsReplay& InPackage);
+    
+    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
+    void ReceiveReplayPackage(const FJettyBootsReplay& InPackage);
+    
+    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
+    void ReceivePlayerChanged();
+    
+    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
+    void ReceiveHighScoreChanged();
+    
+    UFUNCTION(BlueprintCallable)
+    void OnRep_Save();
+    
+    UFUNCTION(BlueprintCallable)
+    void OnRep_Player(const FJettyBootsPlayer& OldPlayer);
+    
+    UFUNCTION(BlueprintCallable)
+    void OnPlayerCharacterDestroyed(AActor* InActor);
+    
+    UFUNCTION(BlueprintCallable)
+    void OnCharacterMoved(float DeltaSeconds, FVector OldLocation, FVector OldVelocity);
+    
+    UFUNCTION(BlueprintCallable)
+    void OnCharacterMontageEnded(UAnimMontage* InMontage, bool InInterrupted);
+    
+public:
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    bool IsPlayerWithinDistance();
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    int32 GetLastHighScoreIndex() const;
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    TArray<FJettyBootsScore> GetHighScores() const;
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    APlayerCharacter* GetActivePlayer() const;
+    
+    UFUNCTION(BlueprintAuthorityOnly, BlueprintCallable)
+    void ClearHighScores();
+    
+protected:
+    UFUNCTION(BlueprintCallable, NetMulticast, Unreliable)
+    void All_ReplayPackage(const FJettyBootsReplay& InPackage);
+    
+public:
+    UFUNCTION(BlueprintAuthorityOnly, BlueprintCallable)
+    void AddHighScoreServer(const FJettyBootsScore& InScore);
+    
+    UFUNCTION(BlueprintCallable)
+    void AddHighScoreClient(const FJettyBootsScore& InScore);
+    
+};
+
diff --git a/Source/FSD/Public/JettyBootsArcadeWidget.h b/Source/FSD/Public/JettyBootsArcadeWidget.h
new file mode 100644
index 00000000..a5988fbb
--- /dev/null
+++ b/Source/FSD/Public/JettyBootsArcadeWidget.h
@@ -0,0 +1,12 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "Blueprint/UserWidget.h"
+#include "JettyBootsArcadeWidget.generated.h"
+
+UCLASS(Abstract, Blueprintable, EditInlineNew)
+class UJettyBootsArcadeWidget : public UUserWidget {
+    GENERATED_BODY()
+public:
+    UJettyBootsArcadeWidget();
+};
+
diff --git a/Source/FSD/Public/JettyBootsPlayer.h b/Source/FSD/Public/JettyBootsPlayer.h
new file mode 100644
index 00000000..dc1f4fb9
--- /dev/null
+++ b/Source/FSD/Public/JettyBootsPlayer.h
@@ -0,0 +1,19 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "JettyBootsPlayer.generated.h"
+
+class APlayerCharacter;
+
+USTRUCT(BlueprintType)
+struct FJettyBootsPlayer {
+    GENERATED_BODY()
+public:
+    UPROPERTY(EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
+    TWeakObjectPtr<APlayerCharacter> PlayerCharacter;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
+    bool bIsPlaying;
+    
+    FSD_API FJettyBootsPlayer();
+};
+
diff --git a/Source/FSD/Public/JettyBootsReplay.h b/Source/FSD/Public/JettyBootsReplay.h
new file mode 100644
index 00000000..a0faade1
--- /dev/null
+++ b/Source/FSD/Public/JettyBootsReplay.h
@@ -0,0 +1,30 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UObject/NoExportTypes.h"
+#include "JettyBootsReplay.generated.h"
+
+USTRUCT(BlueprintType)
+struct FJettyBootsReplay {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    int32 Seed;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FVector2D Position;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    uint8 State;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    int32 Level;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    int32 Score;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    int32 Lives;
+    
+    FSD_API FJettyBootsReplay();
+};
+
diff --git a/Source/FSD/Public/JettyBootsSave.h b/Source/FSD/Public/JettyBootsSave.h
new file mode 100644
index 00000000..b87987b3
--- /dev/null
+++ b/Source/FSD/Public/JettyBootsSave.h
@@ -0,0 +1,24 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "JettyBootsScore.h"
+#include "JettyBootsSave.generated.h"
+
+USTRUCT(BlueprintType)
+struct FJettyBootsSave {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TArray<FJettyBootsScore> HighScores;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TArray<FJettyBootsScore> NPC_HighScores;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool bInitializeNPCs;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    int32 LastHighScoreIndex;
+    
+    FSD_API FJettyBootsSave();
+};
+
diff --git a/Source/FSD/Public/JettyBootsScore.h b/Source/FSD/Public/JettyBootsScore.h
new file mode 100644
index 00000000..82c244dc
--- /dev/null
+++ b/Source/FSD/Public/JettyBootsScore.h
@@ -0,0 +1,17 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "JettyBootsScore.generated.h"
+
+USTRUCT(BlueprintType)
+struct FJettyBootsScore {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FString PlayerName;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    int32 Score;
+    
+    FSD_API FJettyBootsScore();
+};
+
diff --git a/Source/FSD/Public/KnockbackDamageBonus.h b/Source/FSD/Public/KnockbackDamageBonus.h
index b09c9342..a2dd0e8e 100644
--- a/Source/FSD/Public/KnockbackDamageBonus.h
+++ b/Source/FSD/Public/KnockbackDamageBonus.h
@@ -16,0 +17,27 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float VerticalScaleMultiplier;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float HorizontalScaleMultiplier;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float MinVerticalPower;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float MinHorizontalPower;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float OptimalDistance;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool AllowForIncapacitadedPlayes;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool KnockThowardsInstigator;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool ScalePowerToInstigatorDistance;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool AbsoluteKnockBack;
+    
diff --git a/Source/FSD/Public/LineSpikeAttack.h b/Source/FSD/Public/LineSpikeAttack.h
new file mode 100644
index 00000000..77035b4f
--- /dev/null
+++ b/Source/FSD/Public/LineSpikeAttack.h
@@ -0,0 +1,102 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "SpecialAttackComponent.h"
+#include "Templates/SubclassOf.h"
+#include "LineSpikeAttack.generated.h"
+
+class AActor;
+class ULineSpikeTaskBase;
+class UMaterialInstance;
+class UMaterialInterface;
+class UNiagaraComponent;
+class UNiagaraSystem;
+class USoundCue;
+
+UCLASS(Blueprintable, ClassGroup=Custom, meta=(BlueprintSpawnableComponent))
+class ULineSpikeAttack : public USpecialAttackComponent {
+    GENERATED_BODY()
+public:
+protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    UMaterialInterface* TentacleMaterial;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    UMaterialInstance* ActiveMaterial;
+    
+    UPROPERTY(EditAnywhere, Export, Transient, meta=(AllowPrivateAccess=true))
+    TArray<TWeakObjectPtr<UNiagaraComponent>> ActiveParticles;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    UNiagaraSystem* TentacleImpactParticles;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    UNiagaraSystem* StartWaveParticles;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    USoundCue* TentacleImpactSound;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    USoundCue* TentacleExitSound;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    USoundCue* StartWaveSound;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
+    UNiagaraComponent* Tentacles;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
+    TArray<ULineSpikeTaskBase*> Sequence;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
+    TArray<AActor*> Children;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    int32 SequenceLoops;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TSubclassOf<AActor> SpikeClass;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, ReplicatedUsing=OnRep_TentaclesBurried, meta=(AllowPrivateAccess=true))
+    bool TentaclesBurried;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float MaxStepUpheight;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float MaxDistanceToGround;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float DistanceBetweenSpikes;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float TimeBetweenSpikes;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float TentacleStretchPower;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float TentacleSearchDistance;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float TentacleInGroundOffset;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    int32 MinSpikeCount;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    int32 MaxFails;
+    
+public:
+    ULineSpikeAttack();
+    virtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;
+    
+protected:
+    UFUNCTION(BlueprintCallable)
+    void OnRep_TentaclesBurried();
+    
+public:
+    UFUNCTION(BlueprintCallable, NetMulticast, Unreliable)
+    void All_PlayEffects();
+    
+};
+
diff --git a/Source/FSD/Public/LineSpikeTaskBase.h b/Source/FSD/Public/LineSpikeTaskBase.h
new file mode 100644
index 00000000..92ad6085
--- /dev/null
+++ b/Source/FSD/Public/LineSpikeTaskBase.h
@@ -0,0 +1,12 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UObject/Object.h"
+#include "LineSpikeTaskBase.generated.h"
+
+UCLASS(Blueprintable)
+class ULineSpikeTaskBase : public UObject {
+    GENERATED_BODY()
+public:
+    ULineSpikeTaskBase();
+};
+
diff --git a/Source/FSD/Public/LoadoutCopy.h b/Source/FSD/Public/LoadoutCopy.h
new file mode 100644
index 00000000..718ed87a
--- /dev/null
+++ b/Source/FSD/Public/LoadoutCopy.h
@@ -0,0 +1,27 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "CharacterPerksSave.h"
+#include "CharacterVanityLoadout.h"
+#include "ItemLoadout.h"
+#include "UpgradeLoadout.h"
+#include "LoadoutCopy.generated.h"
+
+USTRUCT(BlueprintType)
+struct FLoadoutCopy {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FItemLoadout ItemLoadout;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FUpgradeLoadout UpgradeLoadout;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FCharacterPerksSave PerkLoadout;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FCharacterVanityLoadout VanityLoadout;
+    
+    FSD_API FLoadoutCopy();
+};
+
diff --git a/Source/FSD/Public/LoadoutFunctionLibrary.h b/Source/FSD/Public/LoadoutFunctionLibrary.h
new file mode 100644
index 00000000..0276b1a0
--- /dev/null
+++ b/Source/FSD/Public/LoadoutFunctionLibrary.h
@@ -0,0 +1,32 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "Kismet/BlueprintFunctionLibrary.h"
+#include "LoadoutCopy.h"
+#include "LoadoutFunctionLibrary.generated.h"
+
+class APlayerCharacter;
+class UObject;
+class UPlayerCharacterID;
+
+UCLASS(Blueprintable)
+class FSD_API ULoadoutFunctionLibrary : public UBlueprintFunctionLibrary {
+    GENERATED_BODY()
+public:
+    ULoadoutFunctionLibrary();
+    UFUNCTION(BlueprintCallable, meta=(WorldContext="WorldContextObject"))
+    static void SetCurrLoadout(UObject* WorldContextObject, UPlayerCharacterID* PlayerId, FLoadoutCopy newLoadout);
+    
+    UFUNCTION(BlueprintCallable, meta=(WorldContext="WorldContextObject"))
+    static void RandomizeWeaponLoadout(UObject* WorldContextObject, UPlayerCharacterID* PlayerId, int32 loadoutIndex);
+    
+    UFUNCTION(BlueprintCallable)
+    static void RandomizeAllRandomWeaponLoadout(APlayerCharacter* Player);
+    
+    UFUNCTION(BlueprintCallable, meta=(WorldContext="WorldContextObject"))
+    static FLoadoutCopy GetCurrentLoadout(UObject* WorldContextObject, UPlayerCharacterID* PlayerId);
+    
+    UFUNCTION(BlueprintCallable, meta=(WorldContext="WorldContextObject"))
+    static void CopyPasteWeaponLoadout(UObject* WorldContextObject, UPlayerCharacterID* PlayerId, int32 fromIndex, int32 toIndex);
+    
+};
+
diff --git a/Source/FSD/Public/MeleeAttackComponent.h b/Source/FSD/Public/MeleeAttackComponent.h
index 9ea233a1..6a4c3586 100644
--- a/Source/FSD/Public/MeleeAttackComponent.h
+++ b/Source/FSD/Public/MeleeAttackComponent.h
@@ -8,0 +9 @@ class UAttackEffect;
+class UTargetValidator;
@@ -17,0 +19,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
+    UTargetValidator* HitValidator;
+    
diff --git a/Source/FSD/Public/NewsTextLists.h b/Source/FSD/Public/NewsTextLists.h
index 4e878156..0b85e989 100644
--- a/Source/FSD/Public/NewsTextLists.h
+++ b/Source/FSD/Public/NewsTextLists.h
@@ -21,0 +22,6 @@ public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TArray<FText> Minerals;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TArray<FText> MineralFactions;
+    
diff --git a/Source/FSD/Public/Objective.h b/Source/FSD/Public/Objective.h
index 0621e92f..0fa6dbec 100644
--- a/Source/FSD/Public/Objective.h
+++ b/Source/FSD/Public/Objective.h
@@ -50,0 +51,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool ShowObjectiveInHUD;
+    
diff --git a/Source/FSD/Public/OnGetIsUpdatePendingBPDelegate.h b/Source/FSD/Public/OnGetIsUpdatePendingBPDelegate.h
new file mode 100644
index 00000000..fc09c489
--- /dev/null
+++ b/Source/FSD/Public/OnGetIsUpdatePendingBPDelegate.h
@@ -0,0 +1,6 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "OnGetIsUpdatePendingBPDelegate.generated.h"
+
+UDELEGATE(BlueprintCallable) DECLARE_DYNAMIC_DELEGATE_OneParam(FOnGetIsUpdatePendingBP, bool, bIsUpdatePending);
+
diff --git a/Source/FSD/Public/OverheatingAggregator.h b/Source/FSD/Public/OverheatingAggregator.h
index acd29652..973dc392 100644
--- a/Source/FSD/Public/OverheatingAggregator.h
+++ b/Source/FSD/Public/OverheatingAggregator.h
@@ -11 +11 @@ public:
-    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOverheatedChanged, bool, Overheated);
+    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOverheatedChanged, bool, overHeated);
diff --git a/Source/FSD/Public/PlagueCleaning.h b/Source/FSD/Public/PlagueCleaning.h
new file mode 100644
index 00000000..e3f35250
--- /dev/null
+++ b/Source/FSD/Public/PlagueCleaning.h
@@ -0,0 +1,21 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UObject/Interface.h"
+#include "UObject/NoExportTypes.h"
+#include "PlagueCleaning.generated.h"
+
+class UInfectionPointCleaningComponent;
+
+UINTERFACE(Blueprintable)
+class UPlagueCleaning : public UInterface {
+    GENERATED_BODY()
+};
+
+class IPlagueCleaning : public IInterface {
+    GENERATED_BODY()
+public:
+    UFUNCTION(BlueprintCallable, BlueprintNativeEvent)
+    UInfectionPointCleaningComponent* GetCleaningPoints(FVector fromLocation);
+    
+};
+
diff --git a/Source/FSD/Public/PlagueControlActor.h b/Source/FSD/Public/PlagueControlActor.h
index 7ff7e1a9..ad1954dd 100644
--- a/Source/FSD/Public/PlagueControlActor.h
+++ b/Source/FSD/Public/PlagueControlActor.h
@@ -80 +80 @@ protected:
-    bool CanDropWeaponPod(float& timeLeft);
+    bool CanDropWeaponPod(float& TimeLeft);
diff --git a/Source/FSD/Public/PlagueMeteor.h b/Source/FSD/Public/PlagueMeteor.h
index 6c3d87df..c4cb7cbf 100644
--- a/Source/FSD/Public/PlagueMeteor.h
+++ b/Source/FSD/Public/PlagueMeteor.h
@@ -158 +158 @@ protected:
-    void DropRockCrackerPods(int32 Amount, float MinRadius, float maRadius, AProceduralSetup* setup);
+    void DropRockCrackerPods(int32 Amount, float MinRadius, float maRadius, AProceduralSetup* Setup);
diff --git a/Source/FSD/Public/PlaguePuddle.h b/Source/FSD/Public/PlaguePuddle.h
new file mode 100644
index 00000000..f7c24455
--- /dev/null
+++ b/Source/FSD/Public/PlaguePuddle.h
@@ -0,0 +1,19 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "AdicPuddle.h"
+#include "Vacuumable.h"
+#include "PlaguePuddle.generated.h"
+
+UCLASS(Blueprintable)
+class APlaguePuddle : public AAdicPuddle, public IVacuumable {
+    GENERATED_BODY()
+public:
+    APlaguePuddle();
+protected:
+    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
+    void Receive_OnVacuumed();
+    
+    
+    // Fix for true pure virtual functions not being implemented
+};
+
diff --git a/Source/FSD/Public/PlayEffectsTask.h b/Source/FSD/Public/PlayEffectsTask.h
new file mode 100644
index 00000000..a4340535
--- /dev/null
+++ b/Source/FSD/Public/PlayEffectsTask.h
@@ -0,0 +1,12 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "LineSpikeTaskBase.h"
+#include "PlayEffectsTask.generated.h"
+
+UCLASS(Blueprintable, DefaultToInstanced, EditInlineNew)
+class UPlayEffectsTask : public ULineSpikeTaskBase {
+    GENERATED_BODY()
+public:
+    UPlayEffectsTask();
+};
+
diff --git a/Source/FSD/Public/PlayerAnimInstance.h b/Source/FSD/Public/PlayerAnimInstance.h
index 91eaf675..2034cf35 100644
--- a/Source/FSD/Public/PlayerAnimInstance.h
+++ b/Source/FSD/Public/PlayerAnimInstance.h
@@ -125,0 +126,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
+    bool IsUsingJetBoots;
+    
diff --git a/Source/FSD/Public/PlayerCharacter.h b/Source/FSD/Public/PlayerCharacter.h
index d63dd708..837f03e0 100644
--- a/Source/FSD/Public/PlayerCharacter.h
+++ b/Source/FSD/Public/PlayerCharacter.h
@@ -99,0 +100 @@ class UInventoryList;
+class UJetBootsMovementComponent;
@@ -133,0 +135 @@ class UStatusEffectsComponent;
+class UTemporaryBuff;
@@ -307,0 +310,3 @@ public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TSubclassOf<UJetBootsMovementComponent> JetBootsComponentSpawnable;
+    
@@ -536,0 +542,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float PlayerVelocityToThrowFactor;
+    
@@ -635,0 +644,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
+    bool CanSalute;
+    
@@ -873,0 +885,3 @@ public:
+    UFUNCTION(BlueprintCallable, Reliable, Server)
+    void Server_CheatJetBoots();
+    
@@ -899,0 +914,3 @@ public:
+    UFUNCTION(BlueprintCallable, Reliable, Server)
+    void Server_ActivateTemporaryBuff(UTemporaryBuff* buff);
+    
@@ -991,0 +1009,6 @@ public:
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    bool IsUsingPressed() const;
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    bool IsUsingItemPressed() const;
+    
@@ -1173,0 +1197,3 @@ public:
+    UFUNCTION(BlueprintCallable, Client, Reliable)
+    void Client_ActivateTemporaryBuff(UTemporaryBuff* buff);
+    
diff --git a/Source/FSD/Public/PluckFromZiplineBonus.h b/Source/FSD/Public/PluckFromZiplineBonus.h
new file mode 100644
index 00000000..986438dc
--- /dev/null
+++ b/Source/FSD/Public/PluckFromZiplineBonus.h
@@ -0,0 +1,12 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "DamageBonusBase.h"
+#include "PluckFromZiplineBonus.generated.h"
+
+UCLASS(Blueprintable, EditInlineNew)
+class UPluckFromZiplineBonus : public UDamageBonusBase {
+    GENERATED_BODY()
+public:
+    UPluckFromZiplineBonus();
+};
+
diff --git a/Source/FSD/Public/ProceduralResources.h b/Source/FSD/Public/ProceduralResources.h
index de1723d1..8d79c860 100644
--- a/Source/FSD/Public/ProceduralResources.h
+++ b/Source/FSD/Public/ProceduralResources.h
@@ -18 +18 @@ public:
-    static void GenerateMissingCarvedResources_Async(AProceduralSetup*& setup, FLatentActionInfo LatentInfo);
+    static void GenerateMissingCarvedResources_Async(AProceduralSetup*& Setup, FLatentActionInfo LatentInfo);
@@ -24 +24 @@ public:
-    static void GenerateCarvedResources_Async(AProceduralSetup*& setup, FLatentActionInfo LatentInfo);
+    static void GenerateCarvedResources_Async(AProceduralSetup*& Setup, FLatentActionInfo LatentInfo);
diff --git a/Source/FSD/Public/ProceduralSetup.h b/Source/FSD/Public/ProceduralSetup.h
index c63ad70e..cfdc9583 100644
--- a/Source/FSD/Public/ProceduralSetup.h
+++ b/Source/FSD/Public/ProceduralSetup.h
@@ -205 +205 @@ public:
-    static void SpawnItems_Async(AProceduralSetup* setup, FLatentActionInfo LatentInfo);
+    static void SpawnItems_Async(AProceduralSetup* Setup, FLatentActionInfo LatentInfo);
@@ -214 +214 @@ public:
-    static void SpawnDebrisItems_Async(AProceduralSetup* setup, FLatentActionInfo LatentInfo, EDebrisItemPass pass, int32 Depth);
+    static void SpawnDebrisItems_Async(AProceduralSetup* Setup, FLatentActionInfo LatentInfo, EDebrisItemPass pass, int32 Depth);
@@ -265 +265 @@ public:
-    static void GenerateRoomsFromGraph_Async(AProceduralSetup* setup, FLatentActionInfo LatentInfo, int32 CarvePass);
+    static void GenerateRoomsFromGraph_Async(AProceduralSetup* Setup, FLatentActionInfo LatentInfo, int32 CarvePass);
@@ -283 +283 @@ public:
-    static void FillTunnels_Async(AProceduralSetup* setup, FLatentActionInfo LatentInfo);
+    static void FillTunnels_Async(AProceduralSetup* Setup, FLatentActionInfo LatentInfo);
diff --git a/Source/FSD/Public/ProceduralVeinsComponent.h b/Source/FSD/Public/ProceduralVeinsComponent.h
index 6d038963..7e7ab0a3 100644
--- a/Source/FSD/Public/ProceduralVeinsComponent.h
+++ b/Source/FSD/Public/ProceduralVeinsComponent.h
@@ -22 +22 @@ public:
-    static void GenerateResourceVeins_Async(AProceduralSetup*& setup, FLatentActionInfo LatentInfo);
+    static void GenerateResourceVeins_Async(AProceduralSetup*& Setup, FLatentActionInfo LatentInfo);
@@ -28 +28 @@ public:
-    static void GenerateMissingResourceVeins_Async(AProceduralSetup*& setup, FLatentActionInfo LatentInfo);
+    static void GenerateMissingResourceVeins_Async(AProceduralSetup*& Setup, FLatentActionInfo LatentInfo);
@@ -34 +34 @@ public:
-    static void GenerateDebrisVeins_Async(AProceduralSetup*& setup, EDebrisCarvedType CarverType, FLatentActionInfo LatentInfo);
+    static void GenerateDebrisVeins_Async(AProceduralSetup*& Setup, EDebrisCarvedType CarverType, FLatentActionInfo LatentInfo);
diff --git a/Source/FSD/Public/ProjectileImpact.h b/Source/FSD/Public/ProjectileImpact.h
index e383df89..ca203d65 100644
--- a/Source/FSD/Public/ProjectileImpact.h
+++ b/Source/FSD/Public/ProjectileImpact.h
@@ -32,0 +33,3 @@ public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool bBlockingHit;
+    
diff --git a/Source/FSD/Public/PuddleTrackerComponent.h b/Source/FSD/Public/PuddleTrackerComponent.h
new file mode 100644
index 00000000..65dbc9a5
--- /dev/null
+++ b/Source/FSD/Public/PuddleTrackerComponent.h
@@ -0,0 +1,26 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UObject/NoExportTypes.h"
+#include "Components/ActorComponent.h"
+#include "PuddleTrackerComponent.generated.h"
+
+class AActor;
+
+UCLASS(Blueprintable, ClassGroup=Custom, meta=(BlueprintSpawnableComponent))
+class UPuddleTrackerComponent : public UActorComponent {
+    GENERATED_BODY()
+public:
+    UPuddleTrackerComponent();
+protected:
+    UFUNCTION(BlueprintCallable)
+    void OnPuddleDestroyed(AActor* DestroyedActor);
+    
+public:
+    UFUNCTION(BlueprintCallable)
+    void GetPuddleLocations(TArray<FVector>& Locations);
+    
+    UFUNCTION(BlueprintCallable)
+    void AddPuddle(AActor* puddle);
+    
+};
+
diff --git a/Source/FSD/Public/PushSatusEffectDamageBonusUpgrade.h b/Source/FSD/Public/PushSatusEffectDamageBonusUpgrade.h
index 621459ee..68d28c43 100644
--- a/Source/FSD/Public/PushSatusEffectDamageBonusUpgrade.h
+++ b/Source/FSD/Public/PushSatusEffectDamageBonusUpgrade.h
@@ -9,0 +10 @@ class AFSDPlayerState;
+class UDamageCondition;
@@ -25,0 +27,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
+    UDamageCondition* Condition;
+    
diff --git a/Source/FSD/Public/RandomLoadoutBuff.h b/Source/FSD/Public/RandomLoadoutBuff.h
new file mode 100644
index 00000000..68c4015d
--- /dev/null
+++ b/Source/FSD/Public/RandomLoadoutBuff.h
@@ -0,0 +1,12 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "TemporaryBuff.h"
+#include "RandomLoadoutBuff.generated.h"
+
+UCLASS(Blueprintable)
+class URandomLoadoutBuff : public UTemporaryBuff {
+    GENERATED_BODY()
+public:
+    URandomLoadoutBuff();
+};
+
diff --git a/Source/FSD/Public/RefineryObjective.h b/Source/FSD/Public/RefineryObjective.h
index a5a829e0..55245b0a 100644
--- a/Source/FSD/Public/RefineryObjective.h
+++ b/Source/FSD/Public/RefineryObjective.h
@@ -60 +60 @@ public:
-    void SpawnWells(AProceduralSetup* setup, const FVector& rigLocation, float minDistanceBetween, const TArray<FVector2D>& minMaxDistancesToRig);
+    void SpawnWells(AProceduralSetup* Setup, const FVector& rigLocation, float minDistanceBetween, const TArray<FVector2D>& minMaxDistancesToRig);
@@ -78 +78 @@ protected:
-    void AddMissionCriticalItems(AProceduralSetup* setup);
+    void AddMissionCriticalItems(AProceduralSetup* Setup);
diff --git a/Source/FSD/Public/RequiredMissionItem.h b/Source/FSD/Public/RequiredMissionItem.h
index 19a3eff5..ea34bad3 100644
--- a/Source/FSD/Public/RequiredMissionItem.h
+++ b/Source/FSD/Public/RequiredMissionItem.h
@@ -21,0 +22,3 @@ public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool CanHaveMutators;
+    
diff --git a/Source/FSD/Public/RoomBurner.h b/Source/FSD/Public/RoomBurner.h
index 47f9075a..e239791c 100644
--- a/Source/FSD/Public/RoomBurner.h
+++ b/Source/FSD/Public/RoomBurner.h
@@ -108 +108 @@ protected:
-    void SpawnEncounter(AProceduralSetup* setup);
+    void SpawnEncounter(AProceduralSetup* Setup);
diff --git a/Source/FSD/Public/RotatingSceneComponent.h b/Source/FSD/Public/RotatingSceneComponent.h
new file mode 100644
index 00000000..c5eb3a0a
--- /dev/null
+++ b/Source/FSD/Public/RotatingSceneComponent.h
@@ -0,0 +1,34 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UObject/NoExportTypes.h"
+#include "Engine/EngineTypes.h"
+#include "Components/SceneComponent.h"
+#include "RotatingSceneComponent.generated.h"
+
+UCLASS(Blueprintable, ClassGroup=Custom, meta=(BlueprintSpawnableComponent))
+class URotatingSceneComponent : public USceneComponent {
+    GENERATED_BODY()
+public:
+protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FRotator DeltaRotaion;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float BobbingSpeed;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float BobbingSize;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool Sweep;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool ForceParentUp;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    ETeleportType TeleportMode;
+    
+public:
+    URotatingSceneComponent();
+};
+
diff --git a/Source/FSD/Public/SalvageFuelPod.h b/Source/FSD/Public/SalvageFuelPod.h
index 53f4a51e..8fa12ca7 100644
--- a/Source/FSD/Public/SalvageFuelPod.h
+++ b/Source/FSD/Public/SalvageFuelPod.h
@@ -6 +6 @@
-UCLASS(Abstract, Blueprintable)
+UCLASS(Blueprintable)
diff --git a/Source/FSD/Public/SalvageObjective.h b/Source/FSD/Public/SalvageObjective.h
index b1bad2cd..8ad64da6 100644
--- a/Source/FSD/Public/SalvageObjective.h
+++ b/Source/FSD/Public/SalvageObjective.h
@@ -107 +107 @@ public:
-    static FTransform FindRepairPointLocation(AProceduralSetup* setup, const FVector& podLocation, float Radius, float maxVerticalDistance, UDebrisPositioning* DebrisPositioning, TSubclassOf<AActor> terrainPlacement, const TArray<FVector>& locationsToAvoid, UCurveFloat* AvoidCostCurve);
+    static FTransform FindRepairPointLocation(AProceduralSetup* Setup, const FVector& podLocation, float Radius, float maxVerticalDistance, UDebrisPositioning* DebrisPositioning, TSubclassOf<AActor> terrainPlacement, const TArray<FVector>& locationsToAvoid, UCurveFloat* AvoidCostCurve);
diff --git a/Source/FSD/Public/SaveGameStateComponent.h b/Source/FSD/Public/SaveGameStateComponent.h
index fac1c9c0..d5ae1caa 100644
--- a/Source/FSD/Public/SaveGameStateComponent.h
+++ b/Source/FSD/Public/SaveGameStateComponent.h
@@ -37,3 +36,0 @@ public:
-    UPROPERTY(BlueprintAssignable, BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
-    FItemUpgradeEquipSignature OnItemUpgradeEquipped;
-    
diff --git a/Source/FSD/Public/Season.h b/Source/FSD/Public/Season.h
index 29c27938..b8c2f49e 100644
--- a/Source/FSD/Public/Season.h
+++ b/Source/FSD/Public/Season.h
@@ -6,0 +7 @@
+#include "SeasonalEventEntryChance.h"
@@ -7,0 +9 @@
+#include "WaveEntry.h"
@@ -52,0 +55,3 @@ public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TArray<FSeasonalEventEntryChance> SpawnChanceSeasonalEvents;
+    
@@ -58,0 +64,6 @@ public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TArray<FWaveEntry> SeasonSpecificWaves;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float SeasonWaveInMissionChance;
+    
diff --git a/Source/FSD/Public/SeasonLevelWidget.h b/Source/FSD/Public/SeasonLevelWidget.h
index c292d483..447504c7 100644
--- a/Source/FSD/Public/SeasonLevelWidget.h
+++ b/Source/FSD/Public/SeasonLevelWidget.h
@@ -43 +43 @@ public:
-    void SetData(int32 inLevel, bool inLastInRow);
+    void SetData(int32 InLevel, bool inLastInRow);
diff --git a/Source/FSD/Public/SeasonSaveEntry.h b/Source/FSD/Public/SeasonSaveEntry.h
index a2fdc0aa..14654dc7 100644
--- a/Source/FSD/Public/SeasonSaveEntry.h
+++ b/Source/FSD/Public/SeasonSaveEntry.h
@@ -48 +48 @@ protected:
-    int32 PlagueHeartsdUsed;
+    int32 PlagueHeartsUsed;
diff --git a/Source/FSD/Public/SeasonalEventEntryChance.h b/Source/FSD/Public/SeasonalEventEntryChance.h
new file mode 100644
index 00000000..7e58cab2
--- /dev/null
+++ b/Source/FSD/Public/SeasonalEventEntryChance.h
@@ -0,0 +1,27 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "SeasonalEventEntryChance.generated.h"
+
+class UMissionTemplate;
+class UMutator;
+class USpecialEvent;
+
+USTRUCT(BlueprintType)
+struct FSeasonalEventEntryChance {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    USpecialEvent* SpecialEvent;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float SpawnChance;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TArray<UMissionTemplate*> BannedMissions;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TArray<UMutator*> BannedMutators;
+    
+    FSD_API FSeasonalEventEntryChance();
+};
+
diff --git a/Source/FSD/Public/SharkEnemy.h b/Source/FSD/Public/SharkEnemy.h
index 2b07c149..5ffe076e 100644
--- a/Source/FSD/Public/SharkEnemy.h
+++ b/Source/FSD/Public/SharkEnemy.h
@@ -61,3 +60,0 @@ public:
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
-    float RagdollSpeedFactor;
-    
@@ -81 +78 @@ protected:
-    float StopSpeedThreshold;
+    float RagdollSpeedFactor;
@@ -86,6 +82,0 @@ protected:
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
-    float RaiseSpeed;
-    
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
-    float TiltInSpeed;
-    
@@ -104,3 +94,0 @@ protected:
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
-    float HitLaunchPower;
-    
@@ -126 +114,4 @@ protected:
-    float TimeBeforeGroundCheck;
+    float NormalHeight;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float DiveHeight;
@@ -147 +138 @@ protected:
-    UFakeMoverSettings* VounerableSettings;
+    UFakeMoverSettings* VulnerableSettings;
@@ -205,3 +195,0 @@ public:
-    UFUNCTION(BlueprintCallable, BlueprintImplementableEvent)
-    void OnGrabbedEvent();
-    
diff --git a/Source/FSD/Public/ShootTask.h b/Source/FSD/Public/ShootTask.h
new file mode 100644
index 00000000..2b31bdff
--- /dev/null
+++ b/Source/FSD/Public/ShootTask.h
@@ -0,0 +1,15 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "LineSpikeTaskBase.h"
+#include "ShootTask.generated.h"
+
+UCLASS(Blueprintable, DefaultToInstanced, EditInlineNew)
+class UShootTask : public ULineSpikeTaskBase {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool HasToFinish;
+    
+    UShootTask();
+};
+
diff --git a/Source/FSD/Public/SimpleArmorDamageComponent.h b/Source/FSD/Public/SimpleArmorDamageComponent.h
index b6894155..e54ed305 100644
--- a/Source/FSD/Public/SimpleArmorDamageComponent.h
+++ b/Source/FSD/Public/SimpleArmorDamageComponent.h
@@ -6 +5,0 @@
-#include "EArmorDamageType.h"
@@ -32,3 +30,0 @@ protected:
-    UFUNCTION(BlueprintCallable, Reliable, Server)
-    void Server_SetArmorIndexDestroyed(int32 Index, EArmorDamageType DamageType);
-    
diff --git a/Source/FSD/Public/SkinEffect.h b/Source/FSD/Public/SkinEffect.h
index f899cbb3..cf0bf849 100644
--- a/Source/FSD/Public/SkinEffect.h
+++ b/Source/FSD/Public/SkinEffect.h
@@ -3,0 +4 @@
+#include "EItemSkinType.h"
@@ -16,0 +18,3 @@ public:
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    EItemSkinType GetSkinType() const;
+    
diff --git a/Source/FSD/Public/SoapVacuumItem.h b/Source/FSD/Public/SoapVacuumItem.h
index 4413f04c..5b7d5db9 100644
--- a/Source/FSD/Public/SoapVacuumItem.h
+++ b/Source/FSD/Public/SoapVacuumItem.h
@@ -9 +8,0 @@ class AActor;
-class AFoamPuddle;
@@ -56 +55 @@ public:
-    void Server_StartVacuumingPuddle(AFoamPuddle* puddle);
+    void Server_StartVacuumingPuddle(AActor* Target);
diff --git a/Source/FSD/Public/SpawnActorWithDebrisPosComponent.h b/Source/FSD/Public/SpawnActorWithDebrisPosComponent.h
index c057ad8f..4bb13c5e 100644
--- a/Source/FSD/Public/SpawnActorWithDebrisPosComponent.h
+++ b/Source/FSD/Public/SpawnActorWithDebrisPosComponent.h
@@ -34 +34 @@ public:
-    bool PlaceActorsWithCallback(int32 NumToSpawn, int32 NumToSpawnMin, int32 NumAllowedChecks, TSubclassOf<AActor> SpawnedActorClass, AProceduralSetup* setup, float Radius, UDebrisPositioning* DebrisPositioning, const TArray<FVector>& locationsToAvoid, UCurveFloat* AvoidCostCurve, FSpawnActorDelegate OnSpawned, FVector CustomLocation);
+    bool PlaceActorsWithCallback(int32 NumToSpawn, int32 NumToSpawnMin, int32 NumAllowedChecks, TSubclassOf<AActor> SpawnedActorClass, AProceduralSetup* Setup, float Radius, UDebrisPositioning* DebrisPositioning, const TArray<FVector>& locationsToAvoid, UCurveFloat* AvoidCostCurve, FSpawnActorDelegate OnSpawned, FVector CustomLocation);
@@ -37 +37 @@ public:
-    bool PlaceActors(int32 NumToSpawn, int32 NumToSpawnMin, int32 NumAllowedChecks, TSubclassOf<AActor> SpawnedActorClass, AProceduralSetup* setup, float Radius, UDebrisPositioning* DebrisPositioning, const TArray<FVector>& locationsToAvoid, UCurveFloat* AvoidCostCurve, TArray<AActor*>& OutSpawnedActors, FVector CustomLocation);
+    bool PlaceActors(int32 NumToSpawn, int32 NumToSpawnMin, int32 NumAllowedChecks, TSubclassOf<AActor> SpawnedActorClass, AProceduralSetup* Setup, float Radius, UDebrisPositioning* DebrisPositioning, const TArray<FVector>& locationsToAvoid, UCurveFloat* AvoidCostCurve, TArray<AActor*>& OutSpawnedActors, FVector CustomLocation);
@@ -40 +40 @@ public:
-    void AddTerrainPlacement(AActor* Actor, AProceduralSetup* setup);
+    void AddTerrainPlacement(AActor* Actor, AProceduralSetup* Setup);
diff --git a/Source/FSD/Public/SpecialChanceEventItem.h b/Source/FSD/Public/SpecialChanceEventItem.h
new file mode 100644
index 00000000..178b6b4a
--- /dev/null
+++ b/Source/FSD/Public/SpecialChanceEventItem.h
@@ -0,0 +1,22 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "SpecialChanceEventItem.generated.h"
+
+class USpecialEvent;
+
+USTRUCT(BlueprintType)
+struct FSpecialChanceEventItem {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    USpecialEvent* Event;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float BaseChance;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool CanSpawnInDeepDive;
+    
+    FSD_API FSpecialChanceEventItem();
+};
+
diff --git a/Source/FSD/Public/SpiderLobberAnimInstance.h b/Source/FSD/Public/SpiderLobberAnimInstance.h
new file mode 100644
index 00000000..cc977124
--- /dev/null
+++ b/Source/FSD/Public/SpiderLobberAnimInstance.h
@@ -0,0 +1,40 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UObject/NoExportTypes.h"
+#include "UObject/NoExportTypes.h"
+#include "ShootingSpiderAnimInstance.h"
+#include "SpiderLobberAnimInstance.generated.h"
+
+class UHealthComponentBase;
+
+UCLASS(Blueprintable, NonTransient)
+class USpiderLobberAnimInstance : public UShootingSpiderAnimInstance {
+    GENERATED_BODY()
+public:
+protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Transient, meta=(AllowPrivateAccess=true))
+    FVector EffectiveLiquidInBum;
+    
+    UPROPERTY(EditAnywhere, meta=(AllowPrivateAccess=true))
+    FFloatInterval LiquidInBumRange;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float LiquidInBumEaseInExp;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float LiquidInBumTimeToMax;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float LiquidInBumTimeToMaxShort;
+    
+public:
+    USpiderLobberAnimInstance();
+protected:
+    UFUNCTION(BlueprintCallable)
+    void ResetLiquidInBum();
+    
+    UFUNCTION(BlueprintCallable)
+    void OnDeath(UHealthComponentBase* InHealthComponent);
+    
+};
+
diff --git a/Source/FSD/Public/SplineHookAttack.h b/Source/FSD/Public/SplineHookAttack.h
new file mode 100644
index 00000000..0f1a405a
--- /dev/null
+++ b/Source/FSD/Public/SplineHookAttack.h
@@ -0,0 +1,132 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UObject/NoExportTypes.h"
+#include "Curves/CurveFloat.h"
+#include "SpecialAttackComponent.h"
+#include "SplineHookAttack.generated.h"
+
+class AActor;
+class UAnimMontage;
+class UDamageComponent;
+class UHitReactionComponent;
+class USkeletalMeshComponent;
+class USplineMeshComponent;
+
+UCLASS(Blueprintable, ClassGroup=Custom, meta=(BlueprintSpawnableComponent))
+class USplineHookAttack : public USpecialAttackComponent {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    USplineMeshComponent* Spline;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    USkeletalMeshComponent* HeadMesh;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    USkeletalMeshComponent* TailMesh;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, Transient, meta=(AllowPrivateAccess=true))
+    UHitReactionComponent* HitReacts;
+    
+protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FRuntimeFloatCurve MovementCurve;
+    
+    UPROPERTY(EditAnywhere, Replicated, Transient, meta=(AllowPrivateAccess=true))
+    TWeakObjectPtr<AActor> SyncedTarget;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FName TailSocket;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FName HeadSocket;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    UAnimMontage* HeadAnimation;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    UAnimMontage* TailAnimation;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
+    UDamageComponent* Damage;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float KnockBackHorizontalForce;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float HorizontalScaleMultiplier;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float KnockBackVerticalForce;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float OptimalDistance;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float VerticalScaleMultiplier;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float MinHorizontalPower;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float MinVerticalPower;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float HeightDiffPower;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool AbsoluteKnockBack;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool ScaleByHeightDiff;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float AttackDuration;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float MaxAngle;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float AttackOnProgress;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float AttackDelay;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float LeadMultiplier;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float AquireLocationTime;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool ShowGrabArea;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool Lead;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, ReplicatedUsing=OnRep_Using, meta=(AllowPrivateAccess=true))
+    bool Using;
+    
+public:
+    USplineHookAttack();
+    virtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;
+    
+protected:
+    UFUNCTION(BlueprintCallable, Server, Unreliable)
+    void Server_DamageTarget(AActor* Target);
+    
+    UFUNCTION(BlueprintCallable)
+    void OnRep_Using();
+    
+public:
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    FVector GetTargetLocation() const;
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    FVector GetTargetDirection() const;
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    bool GetHasAquiredTarget() const;
+    
+};
+
diff --git a/Source/FSD/Public/SpriteRect.h b/Source/FSD/Public/SpriteRect.h
new file mode 100644
index 00000000..fff7f483
--- /dev/null
+++ b/Source/FSD/Public/SpriteRect.h
@@ -0,0 +1,23 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "SpriteRect.generated.h"
+
+USTRUCT(BlueprintType)
+struct FSpriteRect {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float Left;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float Top;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float Right;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float Bottom;
+    
+    FSD_API FSpriteRect();
+};
+
diff --git a/Source/FSD/Public/SpriteRectLibrary.h b/Source/FSD/Public/SpriteRectLibrary.h
new file mode 100644
index 00000000..ccf68929
--- /dev/null
+++ b/Source/FSD/Public/SpriteRectLibrary.h
@@ -0,0 +1,42 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UObject/NoExportTypes.h"
+#include "UObject/NoExportTypes.h"
+#include "Kismet/BlueprintFunctionLibrary.h"
+#include "SpriteRect.h"
+#include "SpriteRectLibrary.generated.h"
+
+UCLASS(Blueprintable)
+class USpriteRectLibrary : public UBlueprintFunctionLibrary {
+    GENERATED_BODY()
+public:
+    USpriteRectLibrary();
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    static FSpriteRect TranslateSpriteRect(FSpriteRect Rect, FVector2D Offset);
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    static bool SpriteRectIntersectsAny(FSpriteRect A, TArray<FSpriteRect> Others);
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    static bool SpriteRectIntersects(FSpriteRect A, FSpriteRect B);
+    
+    UFUNCTION(BlueprintCallable)
+    static void MoveSpriteRect(UPARAM(Ref) FSpriteRect& Rect, FVector2D Offset);
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    static FSpriteRect MakeSpriteRectFromPoints(FVector2D Start, FVector2D End);
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    static FSpriteRect MakeSpriteRectFromCenter(FVector2D Center, FVector2D Size);
+    
+    UFUNCTION(BlueprintCallable)
+    static void MakeGateSpriteRects(int32 CanvasHeight, int32 GateWidth, FVector OpeningPos, float OpeningHeight, FSpriteRect& OutTopRect, FSpriteRect& OutBottomRect);
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    static FVector2D GetSpriteRectSize(FSpriteRect Rect);
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    static FVector2D GetSpriteRectCenter(FSpriteRect Rect);
+    
+};
+
diff --git a/Source/FSD/Public/SpriteRectWidget.h b/Source/FSD/Public/SpriteRectWidget.h
new file mode 100644
index 00000000..15eac99a
--- /dev/null
+++ b/Source/FSD/Public/SpriteRectWidget.h
@@ -0,0 +1,37 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UObject/NoExportTypes.h"
+#include "Blueprint/UserWidget.h"
+#include "SpriteRect.h"
+#include "SpriteRectWidget.generated.h"
+
+UCLASS(Abstract, Blueprintable, EditInlineNew)
+class USpriteRectWidget : public UUserWidget {
+    GENERATED_BODY()
+public:
+protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FVector2D Position;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FVector2D Size;
+    
+public:
+    USpriteRectWidget();
+    UFUNCTION(BlueprintCallable)
+    void SetSize(FVector2D InSize);
+    
+    UFUNCTION(BlueprintCallable)
+    void SetPositionAndSize(FVector2D InPosition, FVector2D InSize);
+    
+    UFUNCTION(BlueprintCallable)
+    void SetPosition(FVector2D InPosition);
+    
+    UFUNCTION(BlueprintCallable)
+    void Move(FVector2D InOffset);
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    FSpriteRect GetSpriteRect() const;
+    
+};
+
diff --git a/Source/FSD/Public/StateDrivenBosco.h b/Source/FSD/Public/StateDrivenBosco.h
deleted file mode 100644
index a6eb175e..00000000
--- a/Source/FSD/Public/StateDrivenBosco.h
+++ /dev/null
@@ -1,44 +0,0 @@
-#pragma once
-#include "CoreMinimal.h"
-#include "DroneBase.h"
-#include "StateDrivenBosco.generated.h"
-
-class UAudioComponent;
-class UDroneCombatState;
-class UDroneFollowState;
-class UDroneMiningState;
-class UDroneReviveState;
-class UParticleSystemComponent;
-class UPointLightComponent;
-
-UCLASS(Blueprintable)
-class AStateDrivenBosco : public ADroneBase {
-    GENERATED_BODY()
-public:
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
-    UPointLightComponent* PointLight;
-    
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
-    UAudioComponent* ThrusterSound;
-    
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
-    UParticleSystemComponent* L_ThrusterParticle;
-    
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
-    UParticleSystemComponent* R_ThrusterParticle;
-    
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
-    UDroneFollowState* FollowState;
-    
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
-    UDroneCombatState* CombatState;
-    
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
-    UDroneMiningState* MiningState;
-    
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, Instanced, meta=(AllowPrivateAccess=true))
-    UDroneReviveState* ReviveState;
-    
-    AStateDrivenBosco();
-};
-
diff --git a/Source/FSD/Public/StateDrivenBoscoController.h b/Source/FSD/Public/StateDrivenBoscoController.h
deleted file mode 100644
index e7cdf4a4..00000000
--- a/Source/FSD/Public/StateDrivenBoscoController.h
+++ /dev/null
@@ -1,12 +0,0 @@
-#pragma once
-#include "CoreMinimal.h"
-#include "DroneControllerBase.h"
-#include "StateDrivenBoscoController.generated.h"
-
-UCLASS(Blueprintable)
-class AStateDrivenBoscoController : public ADroneControllerBase {
-    GENERATED_BODY()
-public:
-    AStateDrivenBoscoController();
-};
-
diff --git a/Source/FSD/Public/StateDrivenDroneController.h b/Source/FSD/Public/StateDrivenDroneController.h
new file mode 100644
index 00000000..bc7edb64
--- /dev/null
+++ b/Source/FSD/Public/StateDrivenDroneController.h
@@ -0,0 +1,12 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "DroneControllerBase.h"
+#include "StateDrivenDroneController.generated.h"
+
+UCLASS(Blueprintable)
+class AStateDrivenDroneController : public ADroneControllerBase {
+    GENERATED_BODY()
+public:
+    AStateDrivenDroneController();
+};
+
diff --git a/Source/FSD/Public/StatusEffectsComponent.h b/Source/FSD/Public/StatusEffectsComponent.h
index fe99e6a9..683e9a00 100644
--- a/Source/FSD/Public/StatusEffectsComponent.h
+++ b/Source/FSD/Public/StatusEffectsComponent.h
@@ -64,0 +65,6 @@ public:
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    int32 GetStackAmount(TSubclassOf<UStatusEffect> StatusEffect, AActor* Owner) const;
+    
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    int32 GetFullStackAmount(TSubclassOf<UStatusEffect> StatusEffect) const;
+    
diff --git a/Source/FSD/Public/StingerIdleAudioComponent.h b/Source/FSD/Public/StingerIdleAudioComponent.h
new file mode 100644
index 00000000..e04fba4a
--- /dev/null
+++ b/Source/FSD/Public/StingerIdleAudioComponent.h
@@ -0,0 +1,27 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "Components/ActorComponent.h"
+#include "StingerIdleAudioComponent.generated.h"
+
+class UAudioComponent;
+class UHealthComponentBase;
+
+UCLASS(Blueprintable, ClassGroup=Custom, meta=(BlueprintSpawnableComponent))
+class FSD_API UStingerIdleAudioComponent : public UActorComponent {
+    GENERATED_BODY()
+public:
+    UPROPERTY(EditAnywhere, Export, Transient, meta=(AllowPrivateAccess=true))
+    TWeakObjectPtr<UAudioComponent> AudioComponent;
+    
+    UPROPERTY(EditAnywhere, Export, Transient, meta=(AllowPrivateAccess=true))
+    TWeakObjectPtr<UHealthComponentBase> HealthComponent;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float FadeInTime;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float FadeOutTime;
+    
+    UStingerIdleAudioComponent();
+};
+
diff --git a/Source/FSD/Public/TemporaryBuff.h b/Source/FSD/Public/TemporaryBuff.h
index 1af2f108..b883a24b 100644
--- a/Source/FSD/Public/TemporaryBuff.h
+++ b/Source/FSD/Public/TemporaryBuff.h
@@ -6 +5,0 @@
-class AFSDPlayerController;
@@ -20,0 +20,6 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool ActivatesOnlyOnceWhenDrinking;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool IsTodaysSpecialBuff;
+    
@@ -23,2 +28,2 @@ public:
-    UFUNCTION(BlueprintCallable, BlueprintPure=false)
-    void DeActivateBuff(AFSDPlayerController* Player) const;
+    UFUNCTION(BlueprintCallable, BlueprintPure)
+    bool GetActivateOnlyWhenDrinking() const;
@@ -27 +32 @@ public:
-    void ActivateBuffOnPlayer(APlayerCharacter* Player) const;
+    void DeActivateBuff(APlayerCharacter* Player) const;
@@ -30 +35 @@ public:
-    void ActivateBuffOnController(AFSDPlayerController* Player) const;
+    void ActivateBuff(APlayerCharacter* Player) const;
diff --git a/Source/FSD/Public/TentacleManagerComponent.h b/Source/FSD/Public/TentacleManagerComponent.h
new file mode 100644
index 00000000..6af2a617
--- /dev/null
+++ b/Source/FSD/Public/TentacleManagerComponent.h
@@ -0,0 +1,32 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "Components/ActorComponent.h"
+#include "Curves/CurveFloat.h"
+#include "TentacleManagerComponent.generated.h"
+
+class UNiagaraComponent;
+
+UCLASS(Blueprintable, ClassGroup=Custom, meta=(BlueprintSpawnableComponent))
+class UTentacleManagerComponent : public UActorComponent {
+    GENERATED_BODY()
+public:
+protected:
+    UPROPERTY(EditAnywhere, Export, Transient, meta=(AllowPrivateAccess=true))
+    TWeakObjectPtr<UNiagaraComponent> Tentacles;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FRuntimeFloatCurve SpeedCurve;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FRuntimeFloatCurve ReachCurve;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FName Param_Speed;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    FName Param_Reach;
+    
+public:
+    UTentacleManagerComponent();
+};
+
diff --git a/Source/FSD/Public/TerrainFunctionLibrary.h b/Source/FSD/Public/TerrainFunctionLibrary.h
index f12f515a..901e85eb 100644
--- a/Source/FSD/Public/TerrainFunctionLibrary.h
+++ b/Source/FSD/Public/TerrainFunctionLibrary.h
@@ -22 +22,4 @@ public:
-    static TArray<FVector> GetAllNavPointsInSphere(UObject* WorldContextObject, FVector Origin, float Radius, DeepPathFinderSize pfSize);
+    static TArray<FVector> GetAllNavPointsInSphere(UObject* WorldContextObject, FVector Origin, float Radius, DeepPathFinderSize pfSize, const FVector searchNormal, float maxDegreesToSearchNormal);
+    
+    UFUNCTION(BlueprintAuthorityOnly, BlueprintCallable, meta=(WorldContext="WorldContextObject"))
+    static TArray<FVector> FindPath(UObject* WorldContextObject, FVector Origin, FVector Destination, DeepPathFinderSize pfSize);
diff --git a/Source/FSD/Public/TreasureBeacon.h b/Source/FSD/Public/TreasureBeacon.h
index e35252ae..f9868ca8 100644
--- a/Source/FSD/Public/TreasureBeacon.h
+++ b/Source/FSD/Public/TreasureBeacon.h
@@ -3,0 +4 @@
+#include "ActorTrackingCheatInterface.h"
@@ -14 +15 @@ UCLASS(Blueprintable)
-class FSD_API ATreasureBeacon : public AActor {
+class FSD_API ATreasureBeacon : public AActor, public IActorTrackingCheatInterface {
@@ -71,0 +73,2 @@ public:
+    
+    // Fix for true pure virtual functions not being implemented
diff --git a/Source/FSD/Public/TreasureBox.h b/Source/FSD/Public/TreasureBox.h
index 30d713c4..3162c24b 100644
--- a/Source/FSD/Public/TreasureBox.h
+++ b/Source/FSD/Public/TreasureBox.h
@@ -78 +78 @@ public:
-    void PlaceResources(AProceduralSetup* setup, float Radius, UDebrisPositioning* DebrisPositioning, const TArray<FVector>& locationsToAvoid, UCurveFloat* AvoidCostCurve);
+    void PlaceResources(AProceduralSetup* Setup, float Radius, UDebrisPositioning* DebrisPositioning, const TArray<FVector>& locationsToAvoid, UCurveFloat* AvoidCostCurve);
diff --git a/Source/FSD/Public/TreasureContainer.h b/Source/FSD/Public/TreasureContainer.h
index 6c4d20c6..115539d2 100644
--- a/Source/FSD/Public/TreasureContainer.h
+++ b/Source/FSD/Public/TreasureContainer.h
@@ -3,0 +4 @@
+#include "ActorTrackingCheatInterface.h"
@@ -15 +16 @@ UCLASS(Blueprintable)
-class FSD_API ATreasureContainer : public AActor {
+class FSD_API ATreasureContainer : public AActor, public IActorTrackingCheatInterface {
@@ -84,0 +86,2 @@ public:
+    
+    // Fix for true pure virtual functions not being implemented
diff --git a/Source/FSD/Public/TreasureSettings.h b/Source/FSD/Public/TreasureSettings.h
index fab4ca71..956dd2e2 100644
--- a/Source/FSD/Public/TreasureSettings.h
+++ b/Source/FSD/Public/TreasureSettings.h
@@ -5,0 +6 @@
+#include "SpecialChanceEventItem.h"
@@ -42,0 +44,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    TArray<FSpecialChanceEventItem> SpecialChancedEvent;
+    
diff --git a/Source/FSD/Public/UpgradableGearComponent.h b/Source/FSD/Public/UpgradableGearComponent.h
index 67629210..b83333d6 100644
--- a/Source/FSD/Public/UpgradableGearComponent.h
+++ b/Source/FSD/Public/UpgradableGearComponent.h
@@ -98,2 +98,2 @@ public:
-    UFUNCTION(BlueprintCallable, BlueprintPure)
-    static bool IsTierUnLocked(TSubclassOf<AActor> itemClass, int32 tierIndex, AFSDPlayerState* Player, UPlayerCharacterID* characterID);
+    UFUNCTION(BlueprintCallable, BlueprintPure, meta=(WorldContext="WorldContextObject"))
+    static bool IsTierUnLocked(UObject* WorldContextObject, TSubclassOf<AActor> itemClass, int32 tierIndex, UPlayerCharacterID* characterID);
@@ -102 +102 @@ public:
-    static bool IsOverclockingEnabled(UObject* WorldContextObject, AFSDPlayerState* Player, UPlayerCharacterID* characterID, TSubclassOf<AActor> itemClass);
+    static bool IsOverclockingEnabled(UObject* WorldContextObject, UPlayerCharacterID* characterID, TSubclassOf<AActor> itemClass);
diff --git a/Source/FSD/Public/UseConditionOwnerIsAlive.h b/Source/FSD/Public/UseConditionOwnerIsAlive.h
new file mode 100644
index 00000000..364d3813
--- /dev/null
+++ b/Source/FSD/Public/UseConditionOwnerIsAlive.h
@@ -0,0 +1,15 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UseConditionBase.h"
+#include "UseConditionOwnerIsAlive.generated.h"
+
+UCLASS(Blueprintable, EditInlineNew)
+class UUseConditionOwnerIsAlive : public UUseConditionBase {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool Invert;
+    
+    UUseConditionOwnerIsAlive();
+};
+
diff --git a/Source/FSD/Public/Vacuumable.h b/Source/FSD/Public/Vacuumable.h
new file mode 100644
index 00000000..8dd7cbdc
--- /dev/null
+++ b/Source/FSD/Public/Vacuumable.h
@@ -0,0 +1,15 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "UObject/Interface.h"
+#include "Vacuumable.generated.h"
+
+UINTERFACE()
+class UVacuumable : public UInterface {
+    GENERATED_BODY()
+};
+
+class IVacuumable : public IInterface {
+    GENERATED_BODY()
+public:
+};
+
diff --git a/Source/FSD/Public/VanityFunctionLibrary.h b/Source/FSD/Public/VanityFunctionLibrary.h
new file mode 100644
index 00000000..5dbabe70
--- /dev/null
+++ b/Source/FSD/Public/VanityFunctionLibrary.h
@@ -0,0 +1,25 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "Kismet/BlueprintFunctionLibrary.h"
+#include "VanityFunctionLibrary.generated.h"
+
+class APlayerCharacter;
+class UObject;
+class UPlayerCharacterID;
+
+UCLASS(Blueprintable)
+class FSD_API UVanityFunctionLibrary : public UBlueprintFunctionLibrary {
+    GENERATED_BODY()
+public:
+    UVanityFunctionLibrary();
+    UFUNCTION(BlueprintCallable, meta=(WorldContext="WorldContextObject"))
+    static void RandomizeVanityLoadout(UObject* WorldContextObject, APlayerCharacter* Character);
+    
+    UFUNCTION(BlueprintCallable)
+    static void RandomizeAllRandomVanityLoadout(APlayerCharacter* currentCharacter);
+    
+    UFUNCTION(BlueprintCallable, meta=(WorldContext="WorldContextObject"))
+    static void CopyPasteVanityLoadout(UObject* WorldContextObject, UPlayerCharacterID* PlayerId, int32 fromIndex, int32 toIndex);
+    
+};
+
diff --git a/Source/FSD/Public/VanityItem.h b/Source/FSD/Public/VanityItem.h
index 9c466130..44dae696 100644
--- a/Source/FSD/Public/VanityItem.h
+++ b/Source/FSD/Public/VanityItem.h
@@ -13,0 +14 @@ class APlayerCharacter;
+class UCharacterVanityComponent;
@@ -35,3 +35,0 @@ protected:
-    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
-    bool IsPartOfRandomization;
-    
@@ -105,0 +104,5 @@ public:
+protected:
+    UFUNCTION(BlueprintCallable)
+    void ChangeToItem(UCharacterVanityComponent* Gear) const;
+    
+public:
diff --git a/Source/FSD/Public/WaitTask.h b/Source/FSD/Public/WaitTask.h
new file mode 100644
index 00000000..0671475a
--- /dev/null
+++ b/Source/FSD/Public/WaitTask.h
@@ -0,0 +1,21 @@
+#pragma once
+#include "CoreMinimal.h"
+#include "LineSpikeTaskBase.h"
+#include "WaitTask.generated.h"
+
+UCLASS(Blueprintable, DefaultToInstanced, EditInlineNew)
+class UWaitTask : public ULineSpikeTaskBase {
+    GENERATED_BODY()
+public:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    float WaitTime;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool SkipIfLast;
+    
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    bool OnlyOnce;
+    
+    UWaitTask();
+};
+
diff --git a/Source/FSD/Public/WeakpointGlowComponent.h b/Source/FSD/Public/WeakpointGlowComponent.h
index 6bdab0c5..33f8dc17 100644
--- a/Source/FSD/Public/WeakpointGlowComponent.h
+++ b/Source/FSD/Public/WeakpointGlowComponent.h
@@ -5,0 +6 @@
+#include "EWeakpointGlowMode.h"
@@ -31,0 +33,3 @@ protected:
+    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta=(AllowPrivateAccess=true))
+    EWeakpointGlowMode Mode;
+    
